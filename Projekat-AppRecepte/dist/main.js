(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(a){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(e,u)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function i(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function u(e){return this instanceof u?(this.v=e,this):new u(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function a(e){return"function"==typeof e}function l(e){return a(null==e?void 0:e.then)}var s,d=((s=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),s.prototype.constructor=s,s);function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,u,c;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var s=r(l),f=s.next();!f.done;f=s.next())f.value.remove(this)}catch(t){e={error:t}}finally{try{f&&!f.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else l.remove(this);var p=this.initialTeardown;if(a(p))try{p()}catch(e){c=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var y=r(h),m=y.next();!m.done;m=y.next()){var b=m.value;try{v(b)}catch(e){c=null!=c?c:[],e instanceof d?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{m&&!m.done&&(u=y.return)&&u.call(y)}finally{if(n)throw n.error}}}if(c)throw new d(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&f(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function h(e){return e instanceof p||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function v(e){a(e)?e():e.unsubscribe()}p.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=m.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([e,t],o(n))):setTimeout.apply(void 0,i([e,t],o(n)))},clearTimeout:function(e){var t=m.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function b(e){m.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var S=E("C",void 0,void 0);function E(e,t,n){return{kind:e,value:t,error:n}}var g=null,x=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,h(t)&&t.add(n)):n.destination=P,n}return t(n,e),n.create=function(e,t,n){return new L(e,t,n)},n.prototype.next=function(e){this.isStopped?k(function(e){return E("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?k(E("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?k(S,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),_=Function.prototype.bind;function T(e,t){return _.call(e,t)}var C=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){j(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){j(e)}else j(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){j(e)}},e}(),L=function(e){function n(t,n,r){var o,i,u=e.call(this)||this;return a(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:u&&y.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&T(t.next,i),error:t.error&&T(t.error,i),complete:t.complete&&T(t.complete,i)}):o=t,u.destination=new C(o),u}return t(n,e),n}(x);function j(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&g&&(g.errorThrown=!0,g.error=t)):b(e)}function k(e,t){var n=y.onStoppedNotification;n&&m.setTimeout((function(){return n(e,t)}))}var P={closed:!0,next:w,error:function(e){throw e},complete:w},I="function"==typeof Symbol&&Symbol.observable||"@@observable";function O(e){return e}var q=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=this,i=(r=e)&&r instanceof x||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&h(r)?e:new L(e,t,n);return function(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!g;if(t&&(g={errorThrown:!1,error:null}),e(),t){var n=g,r=n.errorThrown,o=n.error;if(g=null,r)throw o}}else e()}((function(){var e=o,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=A(t))((function(t,r){var o=new L({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[I]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?O:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=A(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function A(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}function H(e){return a(e[I])}function M(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function z(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var U="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function D(e){return a(null==e?void 0:e[U])}function N(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=o[e](t)).value instanceof u?Promise.resolve(n.value.v).then(l,s):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function l(e){a("next",e)}function s(e){a("throw",e)}function d(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,u(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,u(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function G(e){return a(null==e?void 0:e.getReader)}function Y(e){if(e instanceof q)return e;if(null!=e){if(H(e))return i=e,new q((function(e){var t=i[I]();if(a(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return o=e,new q((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(l(e))return n=e,new q((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,b)}));if(M(e))return B(e);if(D(e))return t=e,new q((function(e){var n,o;try{for(var i=r(t),u=i.next();!u.done;u=i.next()){var c=u.value;if(e.next(c),e.closed)return}}catch(e){n={error:e}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(G(e))return B(N(e))}var t,n,o,i;throw z(e)}function B(e){return new q((function(t){(function(e,t){var o,i,u,c,a,l,s,d;return a=this,l=void 0,d=function(){var a,l;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(a=i.value,t.next(a),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=n.sent(),u={error:l},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof s?o:new s((function(e){e(o)}))).then(n,r)}o((d=d.apply(a,l||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function F(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function R(e){return function(t){if(function(e){return a(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var K=function(e){function n(t,n,r,o,i,u){var c=e.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(x);function J(e,t){return void 0===t&&(t=0),R((function(n,r){n.subscribe(new K(r,(function(n){return F(r,e,(function(){return r.next(n)}),t)}),(function(){return F(r,e,(function(){return r.complete()}),t)}),(function(n){return F(r,e,(function(){return r.error(n)}),t)}),undefined))}))}function Q(e,t){return void 0===t&&(t=0),R((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function V(e,t){if(!e)throw new Error("Iterable cannot be null");return new q((function(n){F(n,t,(function(){var r=e[Symbol.asyncIterator]();F(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function W(e,t){return t?function(e,t){if(null!=e){if(H(e))return function(e,t){return Y(e).pipe(Q(t),J(t))}(e,t);if(c(e))return function(e,t){return new q((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(l(e))return function(e,t){return Y(e).pipe(Q(t),J(t))}(e,t);if(M(e))return V(e,t);if(D(e))return function(e,t){return new q((function(n){var r;return F(n,t,(function(){r=e[U](),F(n,t,(function(){var e,t,o;try{t=(e=r.next()).value,o=e.done}catch(e){return void n.error(e)}o?n.complete():n.next(t)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(G(e))return function(e,t){return V(N(e),t)}(e,t)}throw z(e)}(e,t):Y(e)}var X=function(e,t,n,r,o,i,u){this.id=e,this.name=t,this.last_name=n,this.email=r,this.password=o,this.city=i,this.birth_date=u,this.picture=null};document.body.onload=function(){var e,t,n,r;e=document.querySelector("a[href='#kreiraj-nalog']"),t=document.querySelector("a[href='#prijavi-se']"),n=document.querySelector("a[href='#odjavi-se']"),r=document.querySelector("a[href='#profil']"),null!==sessionStorage.getItem("current-user")?(n.hidden=!1,r.hidden=!1,t.hidden=!0,e.hidden=!0):(n.hidden=!0,r.hidden=!0,t.hidden=!1,e.hidden=!1)},document.querySelector("a[href='#kreiraj-nalog']").addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var t=document.createElement("div");t.classList.add("divSignup");var n=document.createElement("div");n.classList.add("divSignupLabels");var r=document.createElement("label");r.innerHTML="Ime:",n.appendChild(r);var o=document.createElement("label");o.innerHTML="Prezime:",n.appendChild(o);var i=document.createElement("label");i.innerHTML="E-mail:",n.appendChild(i);var u=document.createElement("label");u.innerHTML="Lozinka:",n.appendChild(u);var c=document.createElement("label");c.innerHTML="Grad:",n.appendChild(c);var a=document.createElement("label");a.innerHTML="Datum rodjenja:",n.appendChild(a),t.appendChild(n);var l=document.createElement("div");l.classList.add("divSignupInput");var s=document.createElement("input");s.type="name",l.appendChild(s);var d=document.createElement("input");d.type="name",l.appendChild(d);var f=document.createElement("input");f.type="email",l.appendChild(f);var p=document.createElement("input");p.type="password",l.appendChild(p);var h=document.createElement("input");h.type="name",l.appendChild(h);var v=document.createElement("input");v.type="date",l.appendChild(v),t.appendChild(l),e.appendChild(t);var y=document.createElement("div");y.classList.add("divSignupButton");var m=document.createElement("button");m.classList.add("signupButton"),m.innerHTML="Kreiraj",m.onclick=function(){var e;""===s.value&&""===d.value&&""===h.value&&""===f.value&&""===p.value?alert("Morate da unesete sve podatke..."):(e=f.value,W(fetch("http://localhost:3000/users?email="+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))).subscribe((function(e){var t;e.length>0?alert("Korisnik sa ovom email adresom vec postoji,unesite drugu email adresu..."):(t=new X(null,s.value,d.value,f.value,p.value,h.value,v.value),console.log(t),W(fetch("http://localhost:3000/users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))).subscribe((function(e){!0===e?(sessionStorage.setItem("current-user",f.value),document.location.reload()):alert("Greska...pokusaj ponovo...")}))}))},y.appendChild(m),e.appendChild(y)}(document.querySelector(".middle"))})),document.querySelector("a[href='#pocetna']").addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)}))})),document.querySelector("a[href='#prijavi-se']").addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var t=document.createElement("div");t.classList.add("divLogin");var n=document.createElement("div");n.classList.add("divLoginLabels");var r=document.createElement("label");r.innerHTML="E-mail:",n.appendChild(r);var o=document.createElement("label");o.innerHTML="Password",n.appendChild(o),t.appendChild(n);var i=document.createElement("div");i.classList.add("divLoginInput");var u=document.createElement("input");u.type="email",i.appendChild(u);var c=document.createElement("input");c.type="password",i.appendChild(c),t.appendChild(i),e.appendChild(t);var a=document.createElement("div");a.classList.add("divLoginButton");var l=document.createElement("button");l.innerHTML="Uloguj se",l.onclick=function(){var e,t;""===u.value&&""===c.value?alert("Morate da unesete sve podatke..."):(e=u.value,t=c.value,W(fetch("http://localhost:3000/users?email="+e+"&password="+t,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))).subscribe((function(e){0===e.length?alert("Niste uneli ispravne podatke"):(sessionStorage.setItem("current-user",u.value),document.location.reload())}))},a.appendChild(l),e.appendChild(a)}(document.querySelector(".middle"))})),document.querySelector("a[href='#odjavi-se']").addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)})),sessionStorage.removeItem("current-user"),document.location.reload()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTTSxjQUFjLFdBQ3JDLElBRUFOLFNBQVNNLGNBQWMsd0JBQXdCSSxpQkFBaUIsU0FBUSxXQUNwRSxJQUFJQyxFQUFRWCxTQUFTWSxpQkFBaUIsaUJBRTNCLE9BQVJELEdBQ0NBLEVBQU1sRyxTQUFRLFNBQUFwSCxHQUNWMk0sU0FBU00sY0FBYyxXQUFXTyxZQUFZeE4sRUFDbEQsSUFFSmtOLGVBQWVzRCxXQUFXLGdCQUMxQjdELFNBQVNxRCxTQUFTQyxRQUN0QixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYubWpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcnJSZW1vdmUuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL05vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvZXJyb3JDb250ZXh0LmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvZXhlY3V0ZVNjaGVkdWxlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9vYnNlcnZlT24uanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vY2xhc3Nlcy91c2VyLnRzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL3NyYy9kcmF3RnVuY3Rpb25zLnRzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9zcmMvZGJTZXJ2aWNlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wgKi9cblxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcbiAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICB9XG4gIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2VzRGVjb3JhdGUoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XG4gIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xuICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgfVxuICB9XG4gIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgZG9uZSA9IHRydWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgfVxuICByZXR1cm4gdXNlVmFsdWUgPyB2YWx1ZSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Byb3BLZXkoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBwcmVmaXggPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiLCBuYW1lKSA6IG5hbWUgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XG4gIHZhciBpLCBwO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XG4gIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICByZXR1cm4gY29va2VkO1xufTtcblxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgb1tcImRlZmF1bHRcIl0gPSB2O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcbiAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWQuXCIpO1xuICAgIHZhciBkaXNwb3NlO1xuICAgIGlmIChhc3luYykge1xuICAgICAgICBpZiAoIVN5bWJvbC5hc3luY0Rpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNEaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5hc3luY0Rpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAoZGlzcG9zZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGlmICghU3ltYm9sLmRpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuZGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuZGlzcG9zZV07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xuICB9XG4gIGVsc2UgaWYgKGFzeW5jKSB7XG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGlzcG9zZVJlc291cmNlcyhlbnYpIHtcbiAgZnVuY3Rpb24gZmFpbChlKSB7XG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xuICAgIGVudi5oYXNFcnJvciA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAoZW52LnN0YWNrLmxlbmd0aCkge1xuICAgICAgdmFyIHJlYyA9IGVudi5zdGFjay5wb3AoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWMuZGlzcG9zZSAmJiByZWMuZGlzcG9zZS5jYWxsKHJlYy52YWx1ZSk7XG4gICAgICAgIGlmIChyZWMuYXN5bmMpIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KS50aGVuKG5leHQsIGZ1bmN0aW9uKGUpIHsgZmFpbChlKTsgcmV0dXJuIG5leHQoKTsgfSk7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIF9fZXh0ZW5kcyxcbiAgX19hc3NpZ24sXG4gIF9fcmVzdCxcbiAgX19kZWNvcmF0ZSxcbiAgX19wYXJhbSxcbiAgX19tZXRhZGF0YSxcbiAgX19hd2FpdGVyLFxuICBfX2dlbmVyYXRvcixcbiAgX19jcmVhdGVCaW5kaW5nLFxuICBfX2V4cG9ydFN0YXIsXG4gIF9fdmFsdWVzLFxuICBfX3JlYWQsXG4gIF9fc3ByZWFkLFxuICBfX3NwcmVhZEFycmF5cyxcbiAgX19zcHJlYWRBcnJheSxcbiAgX19hd2FpdCxcbiAgX19hc3luY0dlbmVyYXRvcixcbiAgX19hc3luY0RlbGVnYXRvcixcbiAgX19hc3luY1ZhbHVlcyxcbiAgX19tYWtlVGVtcGxhdGVPYmplY3QsXG4gIF9faW1wb3J0U3RhcixcbiAgX19pbXBvcnREZWZhdWx0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4sXG4gIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlLFxuICBfX2Rpc3Bvc2VSZXNvdXJjZXMsXG59O1xuIiwiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzRnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVycm9yQ2xhc3MuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGFyclJlbW92ZShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXksIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgVW5zdWJzY3JpcHRpb25FcnJvciB9IGZyb20gJy4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKGluaXRpYWxUZWFyZG93bikge1xuICAgICAgICB0aGlzLmluaXRpYWxUZWFyZG93biA9IGluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hLCBlXzIsIF9iO1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgICAgIGlmIChfcGFyZW50YWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3BhcmVudGFnZV8xID0gX192YWx1ZXMoX3BhcmVudGFnZSksIF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKTsgIV9wYXJlbnRhZ2VfMV8xLmRvbmU7IF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRhZ2VfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2VfMV8xICYmICFfcGFyZW50YWdlXzFfMS5kb25lICYmIChfYSA9IF9wYXJlbnRhZ2VfMS5yZXR1cm4pKSBfYS5jYWxsKF9wYXJlbnRhZ2VfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRhZ2UucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbml0aWFsRmluYWxpemVyID0gdGhpcy5pbml0aWFsVGVhcmRvd247XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihpbml0aWFsRmluYWxpemVyKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxGaW5hbGl6ZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBlLmVycm9ycyA6IFtlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ZpbmFsaXplcnNfMSA9IF9fdmFsdWVzKF9maW5hbGl6ZXJzKSwgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCk7ICFfZmluYWxpemVyc18xXzEuZG9uZTsgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbGl6ZXIgPSBfZmluYWxpemVyc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgPyBlcnJvcnMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChlcnJvcnMpKSwgX19yZWFkKGVyci5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnNfMV8xICYmICFfZmluYWxpemVyc18xXzEuZG9uZSAmJiAoX2IgPSBfZmluYWxpemVyc18xLnJldHVybikpIF9iLmNhbGwoX2ZpbmFsaXplcnNfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0ZWFyZG93biAmJiB0ZWFyZG93biAhPT0gdGhpcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcih0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duLmNsb3NlZCB8fCB0ZWFyZG93bi5faGFzUGFyZW50KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd24uX2FkZFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKHRoaXMuX2ZpbmFsaXplcnMgPSAoX2EgPSB0aGlzLl9maW5hbGl6ZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkucHVzaCh0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2hhc1BhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHJldHVybiBfcGFyZW50YWdlID09PSBwYXJlbnQgfHwgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgJiYgX3BhcmVudGFnZS5pbmNsdWRlcyhwYXJlbnQpKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FkZFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgPyAoX3BhcmVudGFnZS5wdXNoKHBhcmVudCksIF9wYXJlbnRhZ2UpIDogX3BhcmVudGFnZSA/IFtfcGFyZW50YWdlLCBwYXJlbnRdIDogcGFyZW50O1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fcmVtb3ZlUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgaWYgKF9wYXJlbnRhZ2UgPT09IHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICBhcnJSZW1vdmUoX3BhcmVudGFnZSwgcGFyZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgX2ZpbmFsaXplcnMgJiYgYXJyUmVtb3ZlKF9maW5hbGl6ZXJzLCB0ZWFyZG93bik7XG4gICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGVhcmRvd24uX3JlbW92ZVBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZXhwb3J0IHZhciBFTVBUWV9TVUJTQ1JJUFRJT04gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpcHRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uIHx8XG4gICAgICAgICh2YWx1ZSAmJiAnY2xvc2VkJyBpbiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnJlbW92ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZS5hZGQpICYmIGlzRnVuY3Rpb24odmFsdWUudW5zdWJzY3JpYmUpKSk7XG59XG5mdW5jdGlvbiBleGVjRmluYWxpemVyKGZpbmFsaXplcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKGZpbmFsaXplcikpIHtcbiAgICAgICAgZmluYWxpemVyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmaW5hbGl6ZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwIiwiZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgb25VbmhhbmRsZWRFcnJvcjogbnVsbCxcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb246IG51bGwsXG4gICAgUHJvbWlzZTogdW5kZWZpbmVkLFxuICAgIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc6IGZhbHNlLFxuICAgIHVzZURlcHJlY2F0ZWROZXh0Q29udGV4dDogZmFsc2UsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciB0aW1lb3V0UHJvdmlkZXIgPSB7XG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRUaW1lb3V0LmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJUaW1lb3V0KSB8fCBjbGVhclRpbWVvdXQpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXRQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5leHBvcnQgZnVuY3Rpb24gcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyKSB7XG4gICAgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb25VbmhhbmRsZWRFcnJvciA9IGNvbmZpZy5vblVuaGFuZGxlZEVycm9yO1xuICAgICAgICBpZiAob25VbmhhbmRsZWRFcnJvcikge1xuICAgICAgICAgICAgb25VbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBvcnRVbmhhbmRsZWRFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9vcC5qcy5tYXAiLCJleHBvcnQgdmFyIENPTVBMRVRFX05PVElGSUNBVElPTiA9IChmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0MnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7IH0pKCk7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JOb3RpZmljYXRpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnJvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gbmV4dE5vdGlmaWNhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ04nLCB2YWx1ZSwgdW5kZWZpbmVkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xudmFyIGNvbnRleHQgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yQ29udGV4dChjYikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICB2YXIgaXNSb290ID0gIWNvbnRleHQ7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB7IGVycm9yVGhyb3duOiBmYWxzZSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYigpO1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBjb250ZXh0LCBlcnJvclRocm93biA9IF9hLmVycm9yVGhyb3duLCBlcnJvciA9IF9hLmVycm9yO1xuICAgICAgICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2IoKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZUVycm9yKGVycikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiBjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICBjb250ZXh0LmVycm9yID0gZXJyO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbC9ub29wJztcbmltcG9ydCB7IG5leHROb3RpZmljYXRpb24sIGVycm9yTm90aWZpY2F0aW9uLCBDT01QTEVURV9OT1RJRklDQVRJT04gfSBmcm9tICcuL05vdGlmaWNhdGlvbkZhY3Rvcmllcyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuaW1wb3J0IHsgY2FwdHVyZUVycm9yIH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uKGRlc3RpbmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IEVNUFRZX09CU0VSVkVSO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2FmZVN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5leHROb3RpZmljYXRpb24odmFsdWUpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKGVycm9yTm90aWZpY2F0aW9uKGVyciksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihDT01QTEVURV9OT1RJRklDQVRJT04sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcbnZhciBfYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBfYmluZC5jYWxsKGZuLCB0aGlzQXJnKTtcbn1cbnZhciBDb25zdW1lck9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcikge1xuICAgICAgICB0aGlzLnBhcnRpYWxPYnNlcnZlciA9IHBhcnRpYWxPYnNlcnZlcjtcbiAgICB9XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29uc3VtZXJPYnNlcnZlcjtcbn0oKSk7XG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSB8fCAhb2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICBuZXh0OiAob2JzZXJ2ZXJPck5leHQgIT09IG51bGwgJiYgb2JzZXJ2ZXJPck5leHQgIT09IHZvaWQgMCA/IG9ic2VydmVyT3JOZXh0IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSAhPT0gbnVsbCAmJiBjb21wbGV0ZSAhPT0gdm9pZCAwID8gY29tcGxldGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMTtcbiAgICAgICAgICAgIGlmIChfdGhpcyAmJiBjb25maWcudXNlRGVwcmVjYXRlZE5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0Lm5leHQgJiYgYmluZChvYnNlcnZlck9yTmV4dC5uZXh0LCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPck5leHQuZXJyb3IgJiYgYmluZChvYnNlcnZlck9yTmV4dC5lcnJvciwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuY29tcGxldGUsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFNhZmVTdWJzY3JpYmVyIH07XG5mdW5jdGlvbiBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICBjYXB0dXJlRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyKSB7XG4gICAgdGhyb3cgZXJyO1xufVxuZnVuY3Rpb24gaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgb25TdG9wcGVkTm90aWZpY2F0aW9uID0gY29uZmlnLm9uU3RvcHBlZE5vdGlmaWNhdGlvbjtcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb24gJiYgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gb25TdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcik7IH0pO1xufVxuZXhwb3J0IHZhciBFTVBUWV9PQlNFUlZFUiA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogbm9vcCxcbiAgICBlcnJvcjogZGVmYXVsdEVycm9ySGFuZGxlcixcbiAgICBjb21wbGV0ZTogbm9vcCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcCIsImV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7IHJldHVybiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBTYWZlU3Vic2NyaWJlciwgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGlzU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCkgPyBvYnNlcnZlck9yTmV4dCA6IG5ldyBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvclxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgOiBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKVxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHByb21pc2VDdG9yICE9PSBudWxsICYmIHByb21pc2VDdG9yICE9PSB2b2lkIDAgPyBwcm9taXNlQ3RvciA6IGNvbmZpZy5Qcm9taXNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBQcm9taXNlO1xufVxuZnVuY3Rpb24gaXNPYnNlcnZlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLm5leHQpICYmIGlzRnVuY3Rpb24odmFsdWUuZXJyb3IpICYmIGlzRnVuY3Rpb24odmFsdWUuY29tcGxldGUpO1xufVxuZnVuY3Rpb24gaXNTdWJzY3JpYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHx8IChpc09ic2VydmVyKHZhbHVlKSAmJiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKG9iaikge1xuICAgIHJldHVybiBTeW1ib2wuYXN5bmNJdGVyYXRvciAmJiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IHByb3ZpZGVkIFwiICsgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgPyAnYW4gaW52YWxpZCBvYmplY3QnIDogXCInXCIgKyBpbnB1dCArIFwiJ1wiKSArIFwiIHdoZXJlIGEgc3RyZWFtIHdhcyBleHBlY3RlZC4gWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIFJlYWRhYmxlU3RyZWFtLCBBcnJheSwgQXN5bmNJdGVyYWJsZSwgb3IgSXRlcmFibGUuXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dVbm9ic2VydmFibGVFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXAiLCJpbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSwgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpbm5lckZyb20oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzLnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5TGlrZShhcnJheSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFzeW5jSXRlcmFibGUoYXN5bmNJdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyRnJvbS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZXhlY3V0ZVNjaGVkdWxlKHBhcmVudFN1YnNjcmlwdGlvbiwgc2NoZWR1bGVyLCB3b3JrLCBkZWxheSwgcmVwZWF0KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgaWYgKHJlcGVhdCA9PT0gdm9pZCAwKSB7IHJlcGVhdCA9IGZhbHNlOyB9XG4gICAgdmFyIHNjaGVkdWxlU3Vic2NyaXB0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd29yaygpO1xuICAgICAgICBpZiAocmVwZWF0KSB7XG4gICAgICAgICAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHRoaXMuc2NoZWR1bGUobnVsbCwgZGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH0sIGRlbGF5KTtcbiAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHNjaGVkdWxlU3Vic2NyaXB0aW9uKTtcbiAgICBpZiAoIXJlcGVhdCkge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVTdWJzY3JpcHRpb247XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZVNjaGVkdWxlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0xpZnQoc291cmNlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xuICAgIHJldHVybiBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpO1xufVxudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSwgc2hvdWxkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5zaG91bGRVbnN1YnNjcmliZSA9IHNob3VsZFVuc3Vic2NyaWJlO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgICAgICAgdmFyIGNsb3NlZF8xID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiLCJpbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9LCBkZWxheSk7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0sIGRlbGF5KTsgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2ZU9uLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpOyB9LCBkZWxheSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlT24uanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZXJhYmxlIGNhbm5vdCBiZSBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZWQgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVkJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4vaW5uZXJGcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIDogaW5uZXJGcm9tKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20uanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbnB1dFtpKytdKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvYnNlcnZlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGl0ZXJhdG9yLm5leHQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzRnVuY3Rpb24oaXRlcmF0b3IgPT09IG51bGwgfHwgaXRlcmF0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZXJhdG9yLnJldHVybikgJiYgaXRlcmF0b3IucmV0dXJuKCk7IH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKGlucHV0KSwgc2NoZWR1bGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsImV4cG9ydCBjbGFzcyBVc2Vye1xyXG4gICAgaWQ6bnVtYmVyO1xyXG4gICAgbmFtZTpzdHJpbmc7XHJcbiAgICBsYXN0X25hbWU6c3RyaW5nO1xyXG4gICAgZW1haWw6c3RyaW5nO1xyXG4gICAgcGFzc3dvcmQ6c3RyaW5nO1xyXG4gICAgY2l0eTpzdHJpbmc7XHJcbiAgICBiaXJ0aF9kYXRlOnN0cmluZztcclxuICAgIHBpY3R1cmU6c3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlkOm51bWJlcixuYW1lOnN0cmluZyxsYXN0X25hbWU6c3RyaW5nLGVtYWlsOnN0cmluZyxwYXNzd29yZDpzdHJpbmcsY2l0eTpzdHJpbmcsYmlydGhfZGF0ZTpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMuaWQ9aWQ7XHJcbiAgICAgICAgdGhpcy5uYW1lPW5hbWU7XHJcbiAgICAgICAgdGhpcy5sYXN0X25hbWU9bGFzdF9uYW1lO1xyXG4gICAgICAgIHRoaXMuZW1haWw9ZW1haWw7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZD1wYXNzd29yZDtcclxuICAgICAgICB0aGlzLmNpdHk9Y2l0eTtcclxuICAgICAgICB0aGlzLmJpcnRoX2RhdGU9YmlydGhfZGF0ZTtcclxuICAgICAgICB0aGlzLnBpY3R1cmU9bnVsbDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IGdldFVzZXIgfSBmcm9tIFwiLi9kYlNlcnZpY2VzXCI7XHJcbmltcG9ydCB7IGRyYXdMb2dpbiwgZHJhd1NpZ251cCwgdXNlckZpbHRlciB9IGZyb20gXCIuL2RyYXdGdW5jdGlvbnNcIjtcclxuXHJcbmRvY3VtZW50LmJvZHkub25sb2FkPSgpPT57XHJcbiAgICB1c2VyRmlsdGVyKCk7XHJcbn1cclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNrcmVpcmFqLW5hbG9nJ11cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntcclxuICAgIGxldCBjaGlsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWlkZGxlID4gZGl2XCIpO1xyXG4gICAgLy9jb25zb2xlLmxvZyhjaGlsZCk7XHJcbiAgICBpZihjaGlsZCE9PW51bGwpe1xyXG4gICAgICAgIGNoaWxkLmZvckVhY2goeD0+e1xyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1pZGRsZVwiKS5yZW1vdmVDaGlsZCh4KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRyYXdTaWdudXAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIikpO1xyXG59KTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNwb2NldG5hJ11cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntcclxuICAgIGxldCBjaGlsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWlkZGxlID4gZGl2XCIpO1xyXG4gICAgLy9jb25zb2xlLmxvZyhjaGlsZCk7XHJcbiAgICBpZihjaGlsZCE9PW51bGwpe1xyXG4gICAgICAgIGNoaWxkLmZvckVhY2goeD0+e1xyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1pZGRsZVwiKS5yZW1vdmVDaGlsZCh4KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSk7XHJcblxyXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYVtocmVmPScjcHJpamF2aS1zZSddXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCgpPT57XHJcbiAgICBsZXQgY2hpbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1pZGRsZSA+IGRpdlwiKTtcclxuICAgIC8vY29uc29sZS5sb2coY2hpbGQpO1xyXG4gICAgaWYoY2hpbGQhPT1udWxsKXtcclxuICAgICAgICBjaGlsZC5mb3JFYWNoKHg9PntcclxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIikucmVtb3ZlQ2hpbGQoeCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkcmF3TG9naW4oZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIikpO1xyXG59KTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNvZGphdmktc2UnXVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e1xyXG4gICAgbGV0IGNoaWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5taWRkbGUgPiBkaXZcIik7XHJcbiAgICAvL2NvbnNvbGUubG9nKGNoaWxkKTtcclxuICAgIGlmKGNoaWxkIT09bnVsbCl7XHJcbiAgICAgICAgY2hpbGQuZm9yRWFjaCh4PT57XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWlkZGxlXCIpLnJlbW92ZUNoaWxkKHgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShcImN1cnJlbnQtdXNlclwiKTtcclxuICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG59KTsiLCJpbXBvcnQgeyBnZXRVc2VyV2l0aEVtYWlsLCBnZXRVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQsIHBvc3RVc2VyIH0gZnJvbSBcIi4vZGJTZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NsYXNzZXMvdXNlclwiO1xyXG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tIFwicnhqc1wiO1xyXG5cclxuLy9kZWZhdWx0IHByb2ZpbGUgaW1hZ2UgZGF0YTppbWFnZS93ZWJwO2Jhc2U2NCxVa2xHUm5vTUFBQlhSVUpRVmxBNElHNE1BQUN3OHdDZEFTcUVBNFFEUG0wMm1Va2tJeUtoSVp5WUVJQU5pV2x1L0U4NWliNzl0cngvK042TGdxSlIybHBuaEg4Uy9TVlNZQzFJTDhUb252U1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlDd3dFZ3Z4T2llOUpBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ0puRWpncGIrNFlDMUlMOFRvbnZTUUlFQ0JBZ1FJRUNCQWdRSUVCOGJiOFRvbnZTUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFnUUlFTmpWY2RFOTZTQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQkFTRjBINDBtQk9JcWpURCs1TzNHNk0yQXVXSkhNNVVybk1RaDVGUUN1UndJRmxxUVg0blJQZWtnUUlFQ0JBZ1FJRUNCQWZIUlFTOG1uYzhvaDJicmcwaFJBZHI1TE8rd3FPb0lXNjRZQzFJTDhUb252U1FJRUNCQWdRSUQ0bTNNaDJYMCttNm4rY1Fud0ZmWnRqNzhITlIrMng5OXluTGx5NWN1WExseTVjdVhMbHk1Y3JVUk9tVjJ6cExkY01CWktGNmxiSlF1aWU5SkFnUUlFQ0JBZ1FJRUNCQWdRRWxjRUZtZ3Q2VlgrNFkvRms5dVJTVElDYUJ4UGVrZ1FJRUNCQWdRSUVDQkFnUUlDWkFIcVpUMklzWVM3NVh4T2llenBLb01PWUhZZHgwVDNwSUVDQkFnUUlFQ0JBZ1FIMDBGWE9vN09XaWU5SkFnUUYrZ2Zmdnl3bnBOSmdMVWd2eE9pZTlKQWdRSUVCK0JGb1RsNU9xY3VYTGx5NWNJN3Rtd3pxeC9FNko3MGtDQkFnUUlFQ0JBZ1FJQ2JJM2VRTjliS3JIUlBla2dQZzBDRDcwTlVkcHluTGx5NWN1WExseTVjdVhMbHduZ1RiMGtDQkFnUUV6Vlg5S29Dend3RnFRWDRuUlBla2dRSUVDQStMMjJnUUlFQ0JBZ1VNV1Q1WjFweW5MbHk1Y3VYTGx5NWN1WExsd2phaGpJWGVjdVhMbHk1Y0xYZUgxN2R4MFQzcElFQ0JBZ1FJRUNCQWZIRzJrZmo5cTZyam9udlNRRXVLL3M1MVhpczZSNlRTWUMxSUw4VG9udlNRSUVDQkFUWmZ6QUkxRDl0cEFRSUVDQkFTTVUvdEtzOEMybWhBUjF3d0ZxUVg0blJQZWtnUUh4UzFHWnFweTVjdVhMbFlobW5TdU02Sjcwa0NCQWdRSUVDQkFnUUlFQ0JRcFFCRnJKWG5kTWhPaWU5SkFnSmZYaFl5VVZVZDF3d0ZxUVg0blJQZWtnUUlFQ0JBZ1FlYjNnZitYSDVwQmZpZEU2bVBOalBManYrQzFJTDhUb252U1FJRUNCQWdRSUVDQlF6Rkl0Q3VvTU5kaThUb252UkJ5SjRiL0NtQmFrRitKMFQzcElFQ0JBZ1FJRUNCQWdVQ0VnRE13Qldqd3dGcVFJSDh3NGdDY1Z6S3RKQWdRSUVDQkFnUUlFQ0JBZ1FJRUNCQ3RFT0pLZkpkZWdpV1ZTWUNXQ3lXbmIwclo3b2RjTUJha0YrSjBUM3BJRUNCQWdRSUVDQkN4a1JnWjNXblNDSWtmaENCU1RjaURnM0dRQm5pcFE2V2c3SGJicEJmaWRFOTZTQkFnUUlFQ0JBZ1FJRUxJQkx4YkozRWE4QjdnWmwvb2ZMOHVyVmlMcTFFaitKMFQzcElFQ0JBZ1FJRUNCQWdRSUVDQkFnUU5OQ0JWM2lxc2RFOTZTQkFnUUlFQ0JBZ1FJRUNCQWdRSUVDQStXMVZlOXluTGx5NWN1WExseTVjdVhMbHk1Y3VYSzFMV3NtU1NCamF4YnJXZG1FT0k1d2ZJS3pXM1dISzdjUGpxR0huMHJManJEalB2Y3Q2Nm1GZjlsekxDVWJjTUJha0YrSjBUM3BJRUNCQWdKa0FjUHM5eHJyb2Q0dWY1eTNBbTloRmkvRTZKNzBrQ0lTczR5V1k2enVOUC84UjZXQzJNQmFrRitKMFQzcElFQ0ErT0VwRk5YL2FHVm8zdk8xUGVrZ1FJRUNCQWdRRWpLRUpUQTBMRHo1NTBUM3BJRUNCQWdRSUQ0d0FPQ0lWNU9KYVZ4MFQzcElFQ0JBZ1FJRUI4RmhkOWtQbHJkRUF0U0MvRTZKNzBrQjhZYkFjYjFrbU15VWwzTGx5NWN1WExseTVjdVhMaEV0RXZPa2RpMjdnZ1FJRUNCQWdRSUNaQUlFMGxZZHZPcGNnUUlFQ0JBZ1FJRUNCQWdRSUNSY2hJczFhbGdDZTlKQWdRSUVDQWs0Umw2OS83bFB1eG9FQ0JBZ1FJRUNCQWdRSUVDQWtWTFZIZU5aTmZjcHk1Y3VYTGxhRjBoVGtQR2RLUVg0blJQZWtnUUlFQ0JBZ1FJRUJKV0c2VTN5U04xd3dGcVFYNCt5UldseldmWEhSUGVrZ1FJRUNCQWdRSUVDQkFTSWxEZ2JXSUlFQ0JBZ1FId2VUVGJ5TGtScjljZEU5NlNCQWdRSUVDQkFnUUlFQkpvV1UveGZpZEU5NlNBa3pGUzFWakU5NlNCQWdRSUVDQkFnUUlFQ0JBZ0pNVHQxQmczWERBV3BBbUdETGo1RUJBZ1FJRUNCQWdRSUVDQkFnUUlFQjhZMUVJd0pNQmFrRitJNWI1WHZkQWhHM3BJRUNCQWdRSUVDQkFnUUlFQ0JBZ0pJUHpWbkdsdXVHQXRSc213L3d0VGpvbnZTUUlFQ0JBZ1FJRUNCQWdRSUQ0cDJzL01LWDRuUlBla1NOcmFma0YrSjBUM3BJRUNCQWdRSUVDQkFnUUh3SElNVjRkQ0JBZ1FJRDRITjBXdUdBdFNDL0U2Sjcwa0NCQWdRSUVDQStDU3FIa0YrSjBUM2lIMDBqaDMvT2llOUpBZ1FJRUNCQWdRSUVDQkFnUGhEUm5Yem9udlNRRXJTWGlkRTk2U0JBZ1FJRUNCQWdRSUVDQkFTUjgvY2RFOTZTQStBN29FS0dOQWdRSUVDQkFnUUlFQ0JBZ1FJRUNBa1h0em1keW5MbHk0VHYyOUpBZ1FJRUNCQWdRSUVDQkFnUUlFQjhEK1NUd0owVDNwSUNRc3hoQ2ZuUlBla2dRSUVDQkFnUUlFQ0JBZ1FId2hQbWszY2RFVUFBRCsvU1ZWTE1zajFXMVkzWHdBQUFBQUFBQUFBQUFBQUFBMGdOb0FFTFZZZHZ2aUFBQUFBQUFBQUFBVnZJcVdsREE3Mng2STgyNnNqRG8yYlJTUU04S0FDUEpHOFNtTVNxZGVpMTdJeHU3WUE3YzdSanNBdEV4dUROZ2JpdlI3WHFBUTl6ajFFNTk2aTZLc2pnck12WnNBZHA3R0lpNjNnZytUMyt5WnVRNzVEWXRBSEFEVlRnemozcDN0M0dGTWhNSjNKKzdGbzdKeG5WcVhUUU1nV3lFU05JbklTOHFaVkpWTkN3NnUxNmhGNFAvd2hQUDBiOHVBNFBhTElNSGs4Tldta2lqMUxMRnJaTDE3b2JFNnNYV0RGZWsyeXplbGpmNG13WEtndHNCc3FDUkVnQnR0QW1neTBqS3ppU2NUTzdmejVYMHNUeHN3d09sdnpmc1ZtTTVOdC94UldzamxnR0wzUDV3cGZJejN0SnpLQVYxQkR5QnJVNldHbnBIcDRrM1BrZDQ2V21rdlViWkZZQW5aNHpYRFdrZ3lOcjUvemJmYmFIc0M1ZnRCS3hwbmRWTmJrQUdUZTdjVHhFRC94WUEwbFpPRGFtVXlZMEpJckl1bUtrZ0U4TlJBYS9FWDV0RmpUakE0NjdocG9XZnBlT1RCWmwycGs3T2RjTVgyYUVpOWlQeENuQlFuVm9iZXgrL3kwaG44eXgzQ0RtbHBZWkVGRUducmRYWkQ0dGRHUWNnVVBKaVRrcDNYbmdrVVZRb1Rac09UQ0JGNHNDV0hmcWsxSG1iWTBCRmFqYnBKYVVWa0FZRzhSajBBS0hyc3pUSEcyZFo1VlFsUjF3T2pHS1dFOUNQZ1dCQnlOZ1ZGZ2tIWUhRUDd0N2w1ZkhLYjdOUnNpcVZiOFdPTVFkTXFiem13YnM4VDBlRk84Sy96QUZMSDZMMGNVZGNQMG5GbmtUeFVmOHZBUUJMZVZuU3lMV0c5L2tIQTNSTHp2TW9wT2lwL2VBZmd3WXVWTC9tQzNQQUxnSDBwYWFGdTdVa1JJTmpxajBaeUR0cDYyNnRNVENMdENDdFZkaXh5ZUFNUGRldG1Xa0thWVA1Um9PUGNzZUFWeVdZM1RjeFBQeVdMdEg2cnVMSnNrN3V1YWNzTzhQQVpRZkx2THVicTV5YTQ2S3Mydy9CNWd5ZmlLd2tkc1NRVEhqMnhyZjR1RFozN2hnSVZWN1NkbmtKMjR5ZkF2R29ETlppRTVVZ20xdTYwZjhUdGJ1K29IODV6Q3FkYllqMktIV3M2REFWbTFqTFhqUzBmMnVydUFCd0xhL1JxZDBBTGgzMkVPMW1CZUFHTzdsSTY1OWh6ckNVRUltaHNyV25IRTBnaGpaUmliYis3Zm1aZVBrV2Q2TENPcGI0MW5Qa3VRaUt5V3JWWVY1MWpPV0xUTlhEc2ZBZ3RqMVVNVzJRejluSWZ5WFd4SktET1BrdllwRER4ZExJZ1ljWEFxSTRFaU1zZlBpK3RLdVpGS216M1daejdIdDBDcFRqeVQ5WnFwamw0R0ZmL1Z4RlYxRFZYbDByWFllYmRQUUhFckl5K3NhWExnaTMrM3dNOE1TRTREQUZ2aHY3MjJBS05pTWNHWkl4ZVcrNG1xaFJBdGJyQTJBL3NZaGhqUUVPWFREaC8weFFJS0ZHaU54d3lXRTVxY2lVZVoyMERBaVJ3RnBOWnd6OWlyKzFoQUVVUmg3Q0ZGVnFJdk1jUzA5VVgzZzVLQlRoOTF4Nkdqb21EY0JZQkw2Q2ovTlQ4RGtCM2tvTDJqekpmRzRvSWtVQnN5ZHhERDE1MlRWQ2FhdmZ4dWxtWlV3NmtseSsxLzJRQWo1VU5naHVuZTRwUWVJTmxxMzVZQVUvOHdaaGkvc1VWOEFnYXoydk1kTGxZRm5pbzF0NlFvWTA4OVFJVVlyZ0FMU0l1em9Ld2diUHhhVTdDRytldmdCMExZRmR0SjVyaWVsdklCbENnV2hUcEUzaUZpTm9uUmozOVRGeWZ2clJRQ0J0NS9oNlFSdk53UXVBQTlCQ1RGOVpDZWtBQlNpQlY3MTZLbXJrd0ZXWDFmS0ZMWmpvQUF1REJIb2pLZG1BQUF1Qy9YdEluR1BOazJTUGZxeUhJT3pPNjAwZlZ5aGVNZTVjazNBQUJxeHpCb3hBQUFBPT1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VyRmlsdGVyKCl7XHJcbiAgICBsZXQgc2lnbnVwID0gPEhUTUxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNrcmVpcmFqLW5hbG9nJ11cIik7XHJcbiAgICBsZXQgbG9naW4gPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFbaHJlZj0nI3ByaWphdmktc2UnXVwiKTtcclxuICAgIGxldCBsb2dvZmYgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFbaHJlZj0nI29kamF2aS1zZSddXCIpO1xyXG4gICAgbGV0IHByb2ZpbGVMaW5rID0gPEhUTUxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNwcm9maWwnXVwiKTtcclxuICAgIGxldCBjdXJyZW50VXNlciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJjdXJyZW50LXVzZXJcIik7XHJcblxyXG4gICAgaWYoY3VycmVudFVzZXIhPT1udWxsKXtcclxuICAgICAgICBsb2dvZmYuaGlkZGVuPWZhbHNlO1xyXG4gICAgICAgIHByb2ZpbGVMaW5rLmhpZGRlbj1mYWxzZTtcclxuICAgICAgICBsb2dpbi5oaWRkZW49dHJ1ZTtcclxuICAgICAgICBzaWdudXAuaGlkZGVuPXRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNle1xyXG4gICAgICAgIGxvZ29mZi5oaWRkZW49dHJ1ZTtcclxuICAgICAgICBwcm9maWxlTGluay5oaWRkZW49dHJ1ZTtcclxuICAgICAgICBsb2dpbi5oaWRkZW49ZmFsc2U7XHJcbiAgICAgICAgc2lnbnVwLmhpZGRlbj1mYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdTaWdudXAocGFyZW50X25vZGU6SFRNTEVsZW1lbnQpe1xyXG4gICAgY29uc3QgZGl2U2lnbnVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNpZ251cC5jbGFzc0xpc3QuYWRkKFwiZGl2U2lnbnVwXCIpO1xyXG5cclxuICAgIC8vZGl2U2lnbnVwIGxhYmVsZVxyXG4gICAgY29uc3QgZGl2U2lnbnVwTGFiZWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNpZ251cExhYmVscy5jbGFzc0xpc3QuYWRkKFwiZGl2U2lnbnVwTGFiZWxzXCIpO1xyXG5cclxuICAgIGxldCBuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBuYW1lTGFiZWwuaW5uZXJIVE1MPVwiSW1lOlwiO1xyXG4gICAgZGl2U2lnbnVwTGFiZWxzLmFwcGVuZENoaWxkKG5hbWVMYWJlbCk7XHJcblxyXG4gICAgbGV0IGxuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsbmFtZUxhYmVsLmlubmVySFRNTD1cIlByZXppbWU6XCI7XHJcbiAgICBkaXZTaWdudXBMYWJlbHMuYXBwZW5kQ2hpbGQobG5hbWVMYWJlbCk7XHJcblxyXG4gICAgbGV0IGVtYWlsTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBlbWFpbExhYmVsLmlubmVySFRNTD1cIkUtbWFpbDpcIjtcclxuICAgIGRpdlNpZ251cExhYmVscy5hcHBlbmRDaGlsZChlbWFpbExhYmVsKTtcclxuXHJcbiAgICBsZXQgcGFzc3dvcmRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIHBhc3N3b3JkTGFiZWwuaW5uZXJIVE1MPVwiTG96aW5rYTpcIjtcclxuICAgIGRpdlNpZ251cExhYmVscy5hcHBlbmRDaGlsZChwYXNzd29yZExhYmVsKTtcclxuXHJcbiAgICBsZXQgY2l0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgY2l0eUxhYmVsLmlubmVySFRNTD1cIkdyYWQ6XCI7XHJcbiAgICBkaXZTaWdudXBMYWJlbHMuYXBwZW5kQ2hpbGQoY2l0eUxhYmVsKTtcclxuXHJcbiAgICBsZXQgZGF0ZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgZGF0ZUxhYmVsLmlubmVySFRNTD1cIkRhdHVtIHJvZGplbmphOlwiO1xyXG4gICAgZGl2U2lnbnVwTGFiZWxzLmFwcGVuZENoaWxkKGRhdGVMYWJlbCk7XHJcblxyXG4gICAgZGl2U2lnbnVwLmFwcGVuZENoaWxkKGRpdlNpZ251cExhYmVscyk7XHJcblxyXG4gICAgLy9kaXZTaWdudXAgaW5wdXRzXHJcblxyXG4gICAgbGV0IGRpdlNpZ251cElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNpZ251cElucHV0LmNsYXNzTGlzdC5hZGQoXCJkaXZTaWdudXBJbnB1dFwiKTtcclxuXHJcbiAgICBsZXQgbmFtZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgbmFtZUlucHV0LnR5cGUgPSBcIm5hbWVcIjtcclxuICAgIGRpdlNpZ251cElucHV0LmFwcGVuZENoaWxkKG5hbWVJbnB1dCk7XHJcblxyXG4gICAgbGV0IGxuYW1lSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBsbmFtZUlucHV0LnR5cGUgPSBcIm5hbWVcIjtcclxuICAgIGRpdlNpZ251cElucHV0LmFwcGVuZENoaWxkKGxuYW1lSW5wdXQpO1xyXG5cclxuICAgIGxldCBlbWFpbElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgZW1haWxJbnB1dC50eXBlID0gXCJlbWFpbFwiO1xyXG4gICAgZGl2U2lnbnVwSW5wdXQuYXBwZW5kQ2hpbGQoZW1haWxJbnB1dCk7XHJcblxyXG4gICAgbGV0IHBhc3N3b3JkSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBwYXNzd29yZElucHV0LnR5cGUgPSBcInBhc3N3b3JkXCI7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5hcHBlbmRDaGlsZChwYXNzd29yZElucHV0KTtcclxuXHJcbiAgICBsZXQgY2l0eUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgY2l0eUlucHV0LnR5cGUgPSBcIm5hbWVcIjtcclxuICAgIGRpdlNpZ251cElucHV0LmFwcGVuZENoaWxkKGNpdHlJbnB1dCk7XHJcblxyXG4gICAgbGV0IGRhdGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGRhdGVJbnB1dC50eXBlID0gXCJkYXRlXCI7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5hcHBlbmRDaGlsZChkYXRlSW5wdXQpO1xyXG5cclxuICAgIGRpdlNpZ251cC5hcHBlbmRDaGlsZChkaXZTaWdudXBJbnB1dCk7XHJcblxyXG4gICAgcGFyZW50X25vZGUuYXBwZW5kQ2hpbGQoZGl2U2lnbnVwKTtcclxuXHJcbiAgICBsZXQgZGl2U2lnbnVwQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNpZ251cEJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZGl2U2lnbnVwQnV0dG9uXCIpO1xyXG5cclxuICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJzaWdudXBCdXR0b25cIik7XHJcbiAgICBidXR0b24uaW5uZXJIVE1MPVwiS3JlaXJhalwiO1xyXG4gICAgYnV0dG9uLm9uY2xpY2s9KCk9PntcclxuICAgICAgICBpZihuYW1lSW5wdXQudmFsdWU9PT1cIlwiICYmICBsbmFtZUlucHV0LnZhbHVlPT09XCJcIiAmJiBjaXR5SW5wdXQudmFsdWU9PT1cIlwiICYmIGVtYWlsSW5wdXQudmFsdWU9PT1cIlwiICYmIHBhc3N3b3JkSW5wdXQudmFsdWU9PT1cIlwiKXtcclxuICAgICAgICAgICAgYWxlcnQoXCJNb3JhdGUgZGEgdW5lc2V0ZSBzdmUgcG9kYXRrZS4uLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgZ2V0VXNlcldpdGhFbWFpbChlbWFpbElucHV0LnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShvbGRVc2VyPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaWYob2xkVXNlci5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiS29yaXNuaWsgc2Egb3ZvbSBlbWFpbCBhZHJlc29tIHZlYyBwb3N0b2ppLHVuZXNpdGUgZHJ1Z3UgZW1haWwgYWRyZXN1Li4uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0VXNlcihuZXcgVXNlcihudWxsLG5hbWVJbnB1dC52YWx1ZSxsbmFtZUlucHV0LnZhbHVlLGVtYWlsSW5wdXQudmFsdWUscGFzc3dvcmRJbnB1dC52YWx1ZSxjaXR5SW5wdXQudmFsdWUsZGF0ZUlucHV0LnZhbHVlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUobmV4dD0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5leHQ9PT10cnVlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnQtdXNlclwiLGVtYWlsSW5wdXQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJHcmVza2EuLi5wb2t1c2FqIHBvbm92by4uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGl2U2lnbnVwQnV0dG9uLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcblxyXG4gICAgcGFyZW50X25vZGUuYXBwZW5kQ2hpbGQoZGl2U2lnbnVwQnV0dG9uKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdMb2dpbihwYXJlbnRfbm9kZTpIVE1MRWxlbWVudCl7XHJcblxyXG4gICAgbGV0IGRpdkxvZ2luID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdkxvZ2luLmNsYXNzTGlzdC5hZGQoXCJkaXZMb2dpblwiKTtcclxuICAgIFxyXG4gICAgLy9sb2dpbiBsYWJlbHNcclxuICAgIGxldCBkaXZMb2dpbkxhYmVscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZMb2dpbkxhYmVscy5jbGFzc0xpc3QuYWRkKFwiZGl2TG9naW5MYWJlbHNcIik7XHJcblxyXG4gICAgbGV0IGVtYWlsTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBlbWFpbExhYmVsLmlubmVySFRNTD1cIkUtbWFpbDpcIjtcclxuICAgIGRpdkxvZ2luTGFiZWxzLmFwcGVuZENoaWxkKGVtYWlsTGFiZWwpO1xyXG5cclxuICAgIGxldCBwYXNzd29yZExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgcGFzc3dvcmRMYWJlbC5pbm5lckhUTUw9XCJQYXNzd29yZFwiO1xyXG4gICAgZGl2TG9naW5MYWJlbHMuYXBwZW5kQ2hpbGQocGFzc3dvcmRMYWJlbCk7XHJcblxyXG4gICAgZGl2TG9naW4uYXBwZW5kQ2hpbGQoZGl2TG9naW5MYWJlbHMpO1xyXG5cclxuICAgIC8vbG9naW4gaW5wdXRzXHJcblxyXG4gICAgbGV0IGRpdkxvZ2luSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2TG9naW5JbnB1dC5jbGFzc0xpc3QuYWRkKFwiZGl2TG9naW5JbnB1dFwiKTtcclxuXHJcbiAgICBsZXQgZW1haWxJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGVtYWlsSW5wdXQudHlwZSA9IFwiZW1haWxcIjtcclxuICAgIGRpdkxvZ2luSW5wdXQuYXBwZW5kQ2hpbGQoZW1haWxJbnB1dCk7XHJcblxyXG4gICAgbGV0IHBhc3N3b3JkSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBwYXNzd29yZElucHV0LnR5cGUgPSBcInBhc3N3b3JkXCI7XHJcbiAgICBkaXZMb2dpbklucHV0LmFwcGVuZENoaWxkKHBhc3N3b3JkSW5wdXQpO1xyXG5cclxuICAgIGRpdkxvZ2luLmFwcGVuZENoaWxkKGRpdkxvZ2luSW5wdXQpO1xyXG5cclxuICAgIHBhcmVudF9ub2RlLmFwcGVuZENoaWxkKGRpdkxvZ2luKTtcclxuXHJcbiAgICBsZXQgZGl2TG9naW5CdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2TG9naW5CdXR0b24uY2xhc3NMaXN0LmFkZChcImRpdkxvZ2luQnV0dG9uXCIpO1xyXG5cclxuICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgYnV0dG9uLmlubmVySFRNTD1cIlVsb2d1aiBzZVwiO1xyXG4gICAgYnV0dG9uLm9uY2xpY2s9KCk9PntcclxuICAgICAgICBpZihlbWFpbElucHV0LnZhbHVlPT09XCJcIiAmJiBwYXNzd29yZElucHV0LnZhbHVlPT09XCJcIil7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiTW9yYXRlIGRhIHVuZXNldGUgc3ZlIHBvZGF0a2UuLi5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGdldFVzZXJXaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbElucHV0LnZhbHVlLHBhc3N3b3JkSW5wdXQudmFsdWUpXHJcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgICAgICAgICBpZihuZXh0Lmxlbmd0aD09PTApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIk5pc3RlIHVuZWxpIGlzcHJhdm5lIHBvZGF0a2VcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJjdXJyZW50LXVzZXJcIixlbWFpbElucHV0LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkaXZMb2dpbkJ1dHRvbi5hcHBlbmRDaGlsZChidXR0b24pO1xyXG5cclxuICAgIHBhcmVudF9ub2RlLmFwcGVuZENoaWxkKGRpdkxvZ2luQnV0dG9uKTtcclxufSIsImltcG9ydCB7IE9ic2VydmFibGUsIGZyb20gfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NsYXNzZXMvdXNlclwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RVc2VyKHVzZXI6VXNlcikgOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCB2b2lkPntcclxuICAgIGNvbnNvbGUubG9nKHVzZXIpO1xyXG4gICAgY29uc3QgcmVzcD1mZXRjaChcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC91c2Vyc1wiLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDpcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlcilcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4ocmVzcG9uc2U9PntcclxuICAgICAgICAgICAgICAgICAgICBpZighcmVzcG9uc2Uub2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcblxyXG4gICAgcmV0dXJuIGZyb20ocmVzcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyKGlkOm51bWJlcikgOiBPYnNlcnZhYmxlPFVzZXJbXT57XHJcbiAgICBjb25zdCB1c2VyID0gZmV0Y2goXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvdXNlcnMvXCIraWQse21ldGhvZDpcIkdFVFwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcmVzcG9uc2Uub2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gZnJvbSh1c2VyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJXaXRoRW1haWwoZW1haWw6c3RyaW5nKSA6IE9ic2VydmFibGU8VXNlcltdPntcclxuICAgIGNvbnN0IHVzZXIgPSBmZXRjaChcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC91c2Vycz9lbWFpbD1cIitlbWFpbCx7bWV0aG9kOlwiR0VUXCJ9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcbiAgICBcclxuICAgIHJldHVybiBmcm9tKHVzZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKGVtYWlsOnN0cmluZyxwYXNzd29yZDpzdHJpbmcpIDogT2JzZXJ2YWJsZTxVc2VyW10+e1xyXG4gICAgY29uc3QgdXNlciA9IGZldGNoKFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL3VzZXJzP2VtYWlsPVwiK2VtYWlsK1wiJnBhc3N3b3JkPVwiK3Bhc3N3b3JkLHttZXRob2Q6XCJHRVRcIn0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2U9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXJlc3BvbnNlLm9rKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZyb20odXNlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VVc2VyKHVzZXIgOiBVc2VyKSA6IE9ic2VydmFibGU8Ym9vbGVhbiB8IHZvaWQ+e1xyXG4gICAgY29uc3QgdXNlclJlc3AgPSBmZXRjaChcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC91c2Vyc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6XCJQVVRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXJlc3BvbnNlLm9rKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gZnJvbSh1c2VyUmVzcCk7ICAgICAgICAgICAgICAgICAgXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVVc2VyKGlkOm51bWJlcikgOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCB2b2lkPntcclxuICAgIGNvbnN0IHVzZXJSZXNwID0gZmV0Y2goXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvdXNlcnMvXCIraWQse21ldGhvZDpcIkRFTEVURVwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcmVzcG9uc2Uub2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcbiAgICBcclxuICAgIHJldHVybiBmcm9tKHVzZXJSZXNwKTtcclxufSJdLCJuYW1lcyI6WyJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fZXh0ZW5kcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19nZW5lcmF0b3IiLCJ0aGlzQXJnIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIm5leHQiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwidiIsIm9wIiwiZG9uZSIsInZhbHVlIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImUiLCJzdGVwIiwiX192YWx1ZXMiLCJvIiwicyIsIm0iLCJpIiwiX19yZWFkIiwiciIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImwiLCJzbGljZSIsImNvbmNhdCIsIl9fYXdhaXQiLCJTdXBwcmVzc2VkRXJyb3IiLCJpc0FycmF5TGlrZSIsIngiLCJpc0Z1bmN0aW9uIiwiaXNQcm9taXNlIiwidGhlbiIsImN0b3JGdW5jIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsImVycm9ycyIsImluc3RhbmNlIiwiRXJyb3IiLCJzdGFjayIsIm1lc3NhZ2UiLCJtYXAiLCJlcnIiLCJ0b1N0cmluZyIsImpvaW4iLCJuYW1lIiwiYXJyUmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIlN1YnNjcmlwdGlvbiIsImluaXRpYWxUZWFyZG93biIsImNsb3NlZCIsIl9wYXJlbnRhZ2UiLCJfZmluYWxpemVycyIsImVtcHR5IiwidW5zdWJzY3JpYmUiLCJlXzEiLCJfYSIsImVfMiIsIl9iIiwiaXNBcnJheSIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwicmVtb3ZlIiwiZV8xXzEiLCJyZXR1cm4iLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnNfMSIsIl9maW5hbGl6ZXJzXzFfMSIsImZpbmFsaXplciIsImV4ZWNGaW5hbGl6ZXIiLCJlXzJfMSIsImFkZCIsInRlYXJkb3duIiwiX2hhc1BhcmVudCIsIl9hZGRQYXJlbnQiLCJwYXJlbnQiLCJpbmNsdWRlcyIsIl9yZW1vdmVQYXJlbnQiLCJFTVBUWSIsImlzU3Vic2NyaXB0aW9uIiwiY29uZmlnIiwib25VbmhhbmRsZWRFcnJvciIsIm9uU3RvcHBlZE5vdGlmaWNhdGlvbiIsIlByb21pc2UiLCJ1bmRlZmluZWQiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImhhbmRsZXIiLCJ0aW1lb3V0IiwiYXJncyIsIl9pIiwiZGVsZWdhdGUiLCJhcHBseSIsImNsZWFyVGltZW91dCIsImhhbmRsZSIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImtpbmQiLCJjb250ZXh0IiwiU3Vic2NyaWJlciIsIl9zdXBlciIsImRlc3RpbmF0aW9uIiwiX3RoaXMiLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJGdW5jdGlvbiIsImJpbmQiLCJmbiIsIkNvbnN1bWVyT2JzZXJ2ZXIiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJoYW5kbGVVbmhhbmRsZWRFcnJvciIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwiZXJyb3JUaHJvd24iLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJpc09ic2VydmVyIiwiY2IiLCJpc1Jvb3QiLCJlcnJvckNvbnRleHQiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJvcGVyYXRpb25zIiwiZm5zIiwiaW5wdXQiLCJyZWR1Y2UiLCJwcmV2IiwidG9Qcm9taXNlIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzQXN5bmNJdGVyYWJsZSIsIm9iaiIsImFzeW5jSXRlcmF0b3IiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsImlzSXRlcmFibGUiLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwicmVhZGFibGVTdHJlYW0iLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwicSIsImEiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwic2hpZnQiLCJfX2FzeW5jR2VuZXJhdG9yIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZCIsInJlbGVhc2VMb2NrIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJpbm5lckZyb20iLCJvYnMiLCJhcnJheSIsInByb21pc2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsIlAiLCJfX2FzeW5jVmFsdWVzIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJwcm9jZXNzIiwiY2F0Y2giLCJleGVjdXRlU2NoZWR1bGUiLCJwYXJlbnRTdWJzY3JpcHRpb24iLCJzY2hlZHVsZXIiLCJ3b3JrIiwiZGVsYXkiLCJyZXBlYXQiLCJzY2hlZHVsZVN1YnNjcmlwdGlvbiIsInNjaGVkdWxlIiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwic2hvdWxkVW5zdWJzY3JpYmUiLCJjbG9zZWRfMSIsIm9ic2VydmVPbiIsInN1YnNjcmliZU9uIiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlUHJvbWlzZSIsInNjaGVkdWxlSXRlcmFibGUiLCJzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSIsInNjaGVkdWxlZCIsImlkIiwibGFzdF9uYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImNpdHkiLCJiaXJ0aF9kYXRlIiwicGljdHVyZSIsImRvY3VtZW50Iiwib25sb2FkIiwic2lnbnVwIiwibG9naW4iLCJsb2dvZmYiLCJwcm9maWxlTGluayIsInF1ZXJ5U2VsZWN0b3IiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJoaWRkZW4iLCJhZGRFdmVudExpc3RlbmVyIiwiY2hpbGQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicmVtb3ZlQ2hpbGQiLCJwYXJlbnRfbm9kZSIsImRpdlNpZ251cCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJkaXZTaWdudXBMYWJlbHMiLCJuYW1lTGFiZWwiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsImxuYW1lTGFiZWwiLCJlbWFpbExhYmVsIiwicGFzc3dvcmRMYWJlbCIsImNpdHlMYWJlbCIsImRhdGVMYWJlbCIsImRpdlNpZ251cElucHV0IiwibmFtZUlucHV0IiwidHlwZSIsImxuYW1lSW5wdXQiLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsImNpdHlJbnB1dCIsImRhdGVJbnB1dCIsImRpdlNpZ251cEJ1dHRvbiIsImJ1dHRvbiIsIm9uY2xpY2siLCJhbGVydCIsImZldGNoIiwibWV0aG9kIiwicmVzcG9uc2UiLCJvayIsImpzb24iLCJjb25zb2xlIiwibG9nIiwib2xkVXNlciIsInVzZXIiLCJVc2VyIiwiaGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXRJdGVtIiwibG9jYXRpb24iLCJyZWxvYWQiLCJkcmF3U2lnbnVwIiwiZGl2TG9naW4iLCJkaXZMb2dpbkxhYmVscyIsImRpdkxvZ2luSW5wdXQiLCJkaXZMb2dpbkJ1dHRvbiIsImRyYXdMb2dpbiIsInJlbW92ZUl0ZW0iXSwic291cmNlUm9vdCI6IiJ9