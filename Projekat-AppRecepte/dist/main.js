(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(a){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,c[0]&&(u=0)),u;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){u.label=c[1];break}if(6===c[0]&&u.label<i[1]){u.label=i[1],i=c;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(c);break}i[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(e,u)}catch(e){c=[6,e],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u}function o(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}function u(e){return this instanceof u?(this.v=e,this):new u(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function a(e){return"function"==typeof e}function l(e){return a(null==e?void 0:e.then)}function s(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var d=s((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function p(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var f=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,t,n,u,c;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var s=r(l),p=s.next();!p.done;p=s.next())p.value.remove(this)}catch(t){e={error:t}}finally{try{p&&!p.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else l.remove(this);var f=this.initialTeardown;if(a(f))try{f()}catch(e){c=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var v=r(h),y=v.next();!y.done;y=v.next()){var b=y.value;try{m(b)}catch(e){c=null!=c?c:[],e instanceof d?c=o(o([],i(c)),i(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{y&&!y.done&&(u=v.return)&&u.call(v)}finally{if(n)throw n.error}}}if(c)throw new d(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)m(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&p(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&p(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}(),h=f.EMPTY;function v(e){return e instanceof f||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function m(e){a(e)?e():e.unsubscribe()}var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=b.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,o([e,t],i(n))):setTimeout.apply(void 0,o([e,t],i(n)))},clearTimeout:function(e){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function g(e){b.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var E=S("C",void 0,void 0);function S(e,t,n){return{kind:e,value:t,error:n}}var C=null;function L(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!C;if(t&&(C={errorThrown:!1,error:null}),e(),t){var n=C,r=n.errorThrown,i=n.error;if(C=null,r)throw i}}else e()}var _=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,v(t)&&t.add(n)):n.destination=P,n}return t(n,e),n.create=function(e,t,n){return new T(e,t,n)},n.prototype.next=function(e){this.isStopped?I(function(e){return S("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?I(S("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?I(E,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(f),j=Function.prototype.bind;function x(e,t){return j.call(e,t)}var k=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){q(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){q(e)}else q(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){q(e)}},e}(),T=function(e){function n(t,n,r){var i,o,u=e.call(this)||this;return a(t)||!t?i={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:u&&y.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},i={next:t.next&&x(t.next,o),error:t.error&&x(t.error,o),complete:t.complete&&x(t.complete,o)}):i=t,u.destination=new k(i),u}return t(n,e),n}(_);function q(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&C&&(C.errorThrown=!0,C.error=t)):g(e)}function I(e,t){var n=y.onStoppedNotification;n&&b.setTimeout((function(){return n(e,t)}))}var P={closed:!0,next:w,error:function(e){throw e},complete:w},A="function"==typeof Symbol&&Symbol.observable||"@@observable";function R(e){return e}var O=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,i=this,o=(r=e)&&r instanceof _||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&v(r)?e:new T(e,t,n);return L((function(){var e=i,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=M(t))((function(t,r){var i=new T({next:function(t){try{e(t)}catch(e){r(e),i.unsubscribe()}},error:r,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[A]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?R:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=M(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function M(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}function H(e){return a(e[A])}function z(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function D(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var N="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function G(e){return a(null==e?void 0:e[N])}function U(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=i[e](t)).value instanceof u?Promise.resolve(n.value.v).then(l,s):d(o[0][2],n)}catch(e){d(o[0][3],e)}var n}function l(e){a("next",e)}function s(e){a("throw",e)}function d(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var t,r,i;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,u(t.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,u(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function J(e){return a(null==e?void 0:e.getReader)}function V(e){if(e instanceof O)return e;if(null!=e){if(H(e))return o=e,new O((function(e){var t=o[A]();if(a(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return i=e,new O((function(e){for(var t=0;t<i.length&&!e.closed;t++)e.next(i[t]);e.complete()}));if(l(e))return n=e,new O((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,g)}));if(z(e))return B(e);if(G(e))return t=e,new O((function(e){var n,i;try{for(var o=r(t),u=o.next();!u.done;u=o.next()){var c=u.value;if(e.next(c),e.closed)return}}catch(e){n={error:e}}finally{try{u&&!u.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}e.complete()}));if(J(e))return B(U(e))}var t,n,i,o;throw D(e)}function B(e){return new O((function(t){(function(e,t){var i,o,u,c,a,l,s,d;return a=this,l=void 0,d=function(){var a,l;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,i,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,i.next()];case 2:if((o=n.sent()).done)return[3,4];if(a=o.value,t.next(a),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=n.sent(),u={error:l},[3,11];case 6:return n.trys.push([6,,9,10]),o&&!o.done&&(c=i.return)?[4,c.call(i)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{i(d.next(e))}catch(e){t(e)}}function r(e){try{i(d.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof s?i:new s((function(e){e(i)}))).then(n,r)}i((d=d.apply(a,l||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function F(e,t,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=t.schedule((function(){n(),i?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(o),!i)return o}function Y(e){return function(t){if(function(e){return a(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function K(e,t,n,r,i){return new Q(e,t,n,r,i)}var Q=function(e){function n(t,n,r,i,o,u){var c=e.call(this,t)||this;return c.onFinalize=o,c.shouldUnsubscribe=u,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=i?function(e){try{i(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(_);function W(e,t){return void 0===t&&(t=0),Y((function(n,r){n.subscribe(K(r,(function(n){return F(r,e,(function(){return r.next(n)}),t)}),(function(){return F(r,e,(function(){return r.complete()}),t)}),(function(n){return F(r,e,(function(){return r.error(n)}),t)})))}))}function X(e,t){return void 0===t&&(t=0),Y((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function Z(e,t){if(!e)throw new Error("Iterable cannot be null");return new O((function(n){F(n,t,(function(){var r=e[Symbol.asyncIterator]();F(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function $(e,t){return t?function(e,t){if(null!=e){if(H(e))return function(e,t){return V(e).pipe(X(t),W(t))}(e,t);if(c(e))return function(e,t){return new O((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(l(e))return function(e,t){return V(e).pipe(X(t),W(t))}(e,t);if(z(e))return Z(e,t);if(G(e))return function(e,t){return new O((function(n){var r;return F(n,t,(function(){r=e[N](),F(n,t,(function(){var e,t,i;try{t=(e=r.next()).value,i=e.done}catch(e){return void n.error(e)}i?n.complete():n.next(t)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(J(e))return function(e,t){return Z(U(e),t)}(e,t)}throw D(e)}(e,t):V(e)}var ee=new O((function(e){return e.complete()}));function te(e){return e<=0?function(){return ee}:Y((function(t,n){var r=0;t.subscribe(K(n,(function(t){++r<=e&&(n.next(t),e<=r&&n.complete())})))}))}var ne="http://localhost:3000/users",re="http://localhost:3000/recept",ie="http://localhost:3000/vrsta-jela";function oe(e,t){return $(fetch(ne+"?email="+e+"&password="+t,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))}function ue(){return $(fetch(ie,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return alert(e)})))}function ce(){return $(fetch(re,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))}var ae=s((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),le=function(e){function n(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return t(n,e),n.prototype.lift=function(e){var t=new se(this,this);return t.operator=e,t},n.prototype._throwIfClosed=function(){if(this.closed)throw new ae},n.prototype.next=function(e){var t=this;L((function(){var n,i;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var o=r(t.currentObservers),u=o.next();!u.done;u=o.next())u.value.next(e)}catch(e){n={error:e}}finally{try{u&&!u.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(e){var t=this;L((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},n.prototype.complete=function(){var e=this;L((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},n.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},n.prototype._innerSubscribe=function(e){var t=this,n=this,r=n.hasError,i=n.isStopped,o=n.observers;return r||i?h:(this.currentObservers=null,o.push(e),new f((function(){t.currentObservers=null,p(o,e)})))},n.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,i=t.isStopped;n?e.error(r):i&&e.complete()},n.prototype.asObservable=function(){var e=new O;return e.source=this,e},n.create=function(e,t){return new se(e,t)},n}(O),se=function(e){function n(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return t(n,e),n.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},n.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},n.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},n.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:h},n}(le);function de(e,t){return Y((function(n,r){var i=0;n.subscribe(K(r,(function(n){r.next(e.call(t,n,i++))})))}))}function pe(e,t,n){return void 0===n&&(n=1/0),a(t)?pe((function(n,r){return de((function(e,i){return t(n,e,r,i)}))(V(e(n,r)))}),n):("number"==typeof t&&(n=t),Y((function(t,r){return function(e,t,n,r,i,o,u,c){var a=[],l=0,s=0,d=!1,p=function(){!d||a.length||l||t.complete()},f=function(e){return l<r?h(e):a.push(e)},h=function(e){l++;var i=!1;V(n(e,s++)).subscribe(K(t,(function(e){t.next(e)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(;a.length&&l<r;)e=void 0,e=a.shift(),h(e);p()}catch(e){t.error(e)}var e})))};return e.subscribe(K(t,f,(function(){d=!0,p()}))),function(){}}(t,r,e,n)})))}var fe=Array.isArray;function he(e){return de((function(t){return function(e,t){return fe(t)?e.apply(void 0,o([],i(t))):e(t)}(e,t)}))}var ve=["addListener","removeListener"],me=["addEventListener","removeEventListener"],ye=["on","off"];function be(e,t,n,r){if(a(n)&&(r=n,n=void 0),r)return be(e,t,n).pipe(he(r));var o=i(function(e){return a(e.addEventListener)&&a(e.removeEventListener)}(e)?me.map((function(r){return function(i){return e[r](t,i,n)}})):function(e){return a(e.addListener)&&a(e.removeListener)}(e)?ve.map(ge(e,t)):function(e){return a(e.on)&&a(e.off)}(e)?ye.map(ge(e,t)):[],2),u=o[0],l=o[1];if(!u&&c(e))return pe((function(e){return be(e,t,n)}))(V(e));if(!u)throw new TypeError("Invalid event target");return new O((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return u(t),function(){return l(t)}}))}function ge(e,t){return function(n){return function(r){return e[n](t,r)}}}var we=function(e){function n(t,n){return e.call(this)||this}return t(n,e),n.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},n}(f),Ee={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=Ee.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,o([e,t],i(n))):setInterval.apply(void 0,o([e,t],i(n)))},clearInterval:function(e){var t=Ee.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},Se=function(e){function n(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return t(n,e),n.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,t),this},n.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),Ee.setInterval(e.flush.bind(e,this),n)},n.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&Ee.clearInterval(t)},n.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},n}(we),Ce={now:function(){return(Ce.delegate||Date).now()},delegate:void 0},Le=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=Ce.now,e}(),_e=new(function(e){function n(t,n){void 0===n&&(n=Le.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return t(n,e),n.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},n}(Le))(Se),je=_e;function xe(e,t){return void 0===t&&(t=_e),Y((function(n,r){var i=null,o=null,u=null,c=function(){if(i){i.unsubscribe(),i=null;var e=o;o=null,r.next(e)}};function a(){var n=u+e,o=t.now();if(o<n)return i=this.schedule(void 0,n-o),void r.add(i);c()}n.subscribe(K(r,(function(n){o=n,u=t.now(),i||(i=t.schedule(a,e),r.add(i))}),(function(){c(),r.complete()}),void 0,(function(){o=i=null})))}))}function ke(e){return Y((function(t,n){V(e).subscribe(K(n,(function(){return n.complete()}),w)),!n.closed&&t.subscribe(n)}))}var Te=Array.isArray,qe=Object.getPrototypeOf,Ie=Object.prototype,Pe=Object.keys;function Ae(e){return e&&a(e.schedule)}function Re(e){return e[e.length-1]}function Oe(e){return a(Re(e))?e.pop():void 0}function Me(e){return Ae(Re(e))?e.pop():void 0}function He(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Me(e),r=Oe(e),i=function(e){if(1===e.length){var t=e[0];if(Te(t))return{args:t,keys:null};if((r=t)&&"object"==typeof r&&qe(r)===Ie){var n=Pe(t);return{args:n.map((function(e){return t[e]})),keys:n}}}var r;return{args:e,keys:null}}(e),o=i.args,u=i.keys;if(0===o.length)return $([],n);var c=new O(function(e,t,n){return void 0===n&&(n=R),function(r){ze(t,(function(){for(var i=e.length,o=new Array(i),u=i,c=i,a=function(i){ze(t,(function(){var a=$(e[i],t),l=!1;a.subscribe(K(r,(function(e){o[i]=e,l||(l=!0,c--),c||r.next(n(o.slice()))}),(function(){--u||r.complete()})))}),r)},l=0;l<i;l++)a(l)}),r)}}(o,n,u?function(e){return function(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}(u,e)}:R));return r?c.pipe(he(r)):c}function ze(e,t,n){e?F(n,e,t):t()}function De(e,t){return Y((function(n,r){var i=null,o=0,u=!1,c=function(){return u&&!i&&r.complete()};n.subscribe(K(r,(function(n){null==i||i.unsubscribe();var u=0,a=o++;V(e(n,a)).subscribe(i=K(r,(function(e){return r.next(t?t(n,e,a,u++):e)}),(function(){i=null,c()})))}),(function(){u=!0,c()})))}))}function Ne(e,t){return t?function(n){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(void 0===(n=1)&&(n=1/0),pe(R,n))($(e,Me(e)));var n}(t.pipe(te(1),Y((function(e,t){e.subscribe(K(t,w))}))),n.pipe(Ne(e)))}:pe((function(t,n){return V(e(t,n)).pipe(te(1),function(e){return de((function(){return e}))}(t))}))}function Ge(e,t){void 0===t&&(t=_e);var n=function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=je);var r=-1;return null!=t&&(Ae(t)?n=t:r=t),new O((function(t){var i,o=(i=e)instanceof Date&&!isNaN(i)?+e-n.now():e;o<0&&(o=0);var u=0;return n.schedule((function(){t.closed||(t.next(u++),0<=r?this.schedule(void 0,r):t.complete())}),o)}))}(e,t);return Ne((function(){return n}))}var Ue=function(e,t,n,r,i,o,u){this.id=e,this.name=t,this.last_name=n,this.email=r,this.password=i,this.city=o,this.birth_date=u,this.picture=null};function Je(e,t){return Y(function(e,t,n,r,i){return function(r,i){var o=n,u=t,c=0;r.subscribe(K(i,(function(t){var n=c++;u=o?e(u,t,n):(o=!0,t),i.next(u)}),undefined))}}(e,t,arguments.length>=2))}var Ve=Array.isArray;function Be(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Oe(e),r=function(e){return 1===e.length&&Ve(e[0])?e[0]:e}(e);return r.length?new O((function(e){var t=r.map((function(){return[]})),u=r.map((function(){return!1}));e.add((function(){t=u=null}));for(var c=function(c){V(r[c]).subscribe(K(e,(function(r){if(t[c].push(r),t.every((function(e){return e.length}))){var a=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,o([],i(a))):a),t.some((function(e,t){return!e.length&&u[t]}))&&e.complete()}}),(function(){u[c]=!0,!t[c].length&&e.complete()})))},a=0;!e.closed&&a<r.length;a++)c(a);return function(){t=u=null}})):ee}var Fe=function(){this.naziv=null,this.autor=null,this.vrsta_jela=null,this.sastojci=null,this.priprema=null,this.slika=null},Ye=function(e,t){this.id=e,this.name=t};function Ke(e,t){null!==t&&t.forEach((function(t){e.removeChild(t)}))}function Qe(e,t,n,r,i,o){var u=document.createElement("div");u.classList.add("divRecept");var c=document.createElement("div");c.classList.add("divReceptSlika");var a=document.createElement("img");a.src=t,a.alt="Image",c.appendChild(a),u.appendChild(c);var l=document.createElement("div");l.classList.add("divReceptName");var s=document.createElement("label");s.classList.add("divReceptLabelName"),s.innerHTML=n,l.appendChild(s),u.appendChild(l);var d=new Fe,p=new Ue(null,null,null,null,null,null,null),f=new Ye(null,null);Be([We(u).pipe(De((function(){return $(fetch(re+"/"+r,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)}))).pipe(te(1))}))),We(u).pipe(De((function(){return $(fetch(ne+"/"+i,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)}))).pipe(te(1))}))),We(u).pipe(De((function(){return $(fetch(ie+"/"+o,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return alert(e)}))).pipe(te(1))})))]).subscribe((function(e){d=e[0],p=e[1],f=e[2],function(e,t,n){Ke(document.querySelector(".middle"),document.querySelectorAll(".middle > div"));var r=document.createElement("div");r.classList.add("divReceptPage");var i=document.createElement("div");i.classList.add("divReceptPageSlika");var o=document.createElement("img");o.alt="Recept image.",o.src=e.slika,i.appendChild(o),r.appendChild(i);var u=document.createElement("div");u.classList.add("divReceptPageInfo");var c=document.createElement("div");c.classList.add("divReceptPageName");var a=document.createElement("label");a.innerHTML="Naziv recepta:",c.appendChild(a);var l=document.createElement("label");l.innerHTML=e.naziv,c.appendChild(l),u.appendChild(c);var s=document.createElement("div");s.classList.add("divReceptPageAutor");var d=document.createElement("label");d.innerHTML="Ime autora:",s.appendChild(d);var p=document.createElement("label");p.innerHTML=t.name+" "+t.last_name,s.appendChild(p),u.appendChild(s);var f=document.createElement("div");f.classList.add("divRecepPageVrstaJela");var h=document.createElement("label");h.innerHTML="Vrsta jela:",f.appendChild(h);var v=document.createElement("label");v.innerHTML=n.name,f.appendChild(v),u.appendChild(f);var m=document.createElement("div");m.classList.add("divRecepPageSastojci");var y=document.createElement("label");y.innerHTML="Sastojci:",m.appendChild(y);var b=document.createElement("label");b.innerHTML=e.sastojci,m.appendChild(b),u.appendChild(m);var g=document.createElement("div");g.classList.add("divRecepPagePriprema");var w=document.createElement("label");w.innerHTML="Priprema:",g.appendChild(w);var E=document.createElement("div");E.classList.add("divPripremaLabels"),e.priprema.split("\n").forEach((function(e){var t=document.createElement("label");t.innerHTML=e,E.appendChild(t)})),g.appendChild(E),u.appendChild(g),r.appendChild(u),document.querySelector(".middle").appendChild(r)}(d,p,f)})),e.appendChild(u)}function We(e){return be(e,"click")}function Xe(e,t,n,r,i){void 0===i&&(i=0);var o=document.createElement("a");o.href=t,o.classList.add(n),o.innerHTML=r,"dropdown-content-links"===n&&function(e,t,n){be(e,t).pipe(De((function(){return $(fetch(re+"?vrsta_jela="+n,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))}))).subscribe((function(e){Ke(document.querySelector(".middle"),document.querySelectorAll(".middle > div"));var t=document.createElement("div");t.classList.add("divReceptFromVrstaJela"),e.forEach((function(e){console.log(e),Qe(t,e.slika,e.naziv,e.id,e.autor,e.vrsta_jela)})),document.querySelector(".middle").appendChild(t)}))}(o,"click",i);var u=document.querySelector(e);null!==o&&null!==u&&u.appendChild(o)}function Ze(e,t){var n=document.querySelector("a[href='"+t+"']"),r=document.querySelector(e);null!==n&&null!==r&&r.removeChild(n)}function $e(){document.querySelector("a[href='#kreiraj-nalog']"),document.querySelector("a[href='#prijavi-se']"),document.querySelector("a[href='#odjavi-se']"),document.querySelector("a[href='#profil']"),null!==sessionStorage.getItem("current-user")?(Xe(".header","#novi-recept","header-item","NOVI RECEPT"),Xe(".header","#profil","header-item","PROFIL"),Xe(".header","#odjavi-se","header-item","ODJAVI SE"),Ze(".header","#prijavi-se"),Ze(".header","#kreiraj-nalog")):(Xe(".header","#prijavi-se","header-item","PRIJAVI SE"),Xe(".header","#kreiraj-nalog","header-item","KREIRAJ NALOG"),Ze(".header","#profil"),Ze(".header","#odjavi-se"),Ze(".header","#novi-recept"));var e=document.querySelector("a[href='#kreiraj-nalog']"),t=new le;null!==e&&e.addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var t=document.createElement("div");t.classList.add("divSignup");var n=document.createElement("div");n.classList.add("divSignupLabels");var r=document.createElement("label");r.innerHTML="Ime:",n.appendChild(r);var i=document.createElement("label");i.innerHTML="Prezime:",n.appendChild(i);var o=document.createElement("label");o.innerHTML="E-mail:",n.appendChild(o);var u=document.createElement("label");u.innerHTML="Lozinka:",n.appendChild(u);var c=document.createElement("label");c.innerHTML="Grad:",n.appendChild(c);var a=document.createElement("label");a.innerHTML="Datum rodjenja:",n.appendChild(a),t.appendChild(n);var l=document.createElement("div");l.classList.add("divSignupInput");var s=document.createElement("input");s.id="signup-name",s.type="name",l.appendChild(s);var d=document.createElement("input");d.id="signup-lastname",d.type="name",l.appendChild(d);var p=document.createElement("input");p.id="signup-email",p.type="email",l.appendChild(p);var f=document.createElement("input");f.id="signup-password",f.type="password",l.appendChild(f);var h=document.createElement("input");h.id="signup-city",h.type="name",l.appendChild(h);var v=document.createElement("input");v.id="signup-date",v.type="date",l.appendChild(v),t.appendChild(l),e.appendChild(t);var m=document.createElement("div");m.classList.add("divSignupButton");var y=document.createElement("button");y.classList.add("signupButton"),y.innerHTML="Kreiraj",m.appendChild(y),e.appendChild(m)}(document.querySelector(".middle")),function(e){var t=new Ue(null,null,null,null,null,null,null);document.querySelector(".signupButton").disabled=!0,He([be(document.querySelector("#signup-name"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e)),be(document.querySelector("#signup-lastname"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e)),be(document.querySelector("#signup-email"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e)),be(document.querySelector("#signup-password"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e)),be(document.querySelector("#signup-city"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e)),be(document.querySelector("#signup-date"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e))]).pipe(ke(e)).subscribe((function(e){t.name=e[0],t.last_name=e[1],t.email=e[2],t.password=e[3],t.city=e[4],t.birth_date=e[5],document.querySelector(".signupButton").disabled=!1})),be(document.querySelector(".signupButton"),"click").pipe(De((function(){return e=t.email,$(fetch(ne+"?email="+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})));var e})),Ge(500)).subscribe((function(n){n.length>0?alert("Korisnik sa ovom email adresom vec postoji.Pokusajte drugu."):null===t.name||null===t.last_name||null===t.email||null===t.password||null===t.city||null===t.birth_date?alert("Morate da unesete sve podatke"):function(e){return console.log(e),$(fetch(ne,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))}(t).subscribe((function(n){!0===n?(alert("Uspesno registrovnje."),e.next("Login complete..."),e.complete(),oe(t.email,t.password).subscribe((function(e){sessionStorage.setItem("current-user-id",e[0].id.toString()),sessionStorage.setItem("current-user",e[0].email),document.location.reload()}))):alert("Doslo je do greske,pokusajte ponovo...")}))}))}(t)}));var n=document.querySelector("a[href='#prijavi-se']"),r=new le;null!==n&&n.addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var t=document.createElement("div");t.classList.add("divLogin");var n=document.createElement("div");n.classList.add("divLoginLabels");var r=document.createElement("label");r.innerHTML="E-mail:",n.appendChild(r);var i=document.createElement("label");i.innerHTML="Password:",n.appendChild(i),t.appendChild(n);var o=document.createElement("div");o.classList.add("divLoginInput");var u=document.createElement("input");u.id="userEmail",u.type="email",o.appendChild(u);var c=document.createElement("input");c.id="userPass",c.type="password",o.appendChild(c),t.appendChild(o),e.appendChild(t);var a=document.createElement("div");a.classList.add("divLoginButton");var l=document.createElement("button");l.id="btnLogin",l.innerHTML="Uloguj se",a.appendChild(l),e.appendChild(a)}(document.querySelector(".middle")),function(e){var t=new Ue(null,null,null,null,null,null,null),n=be(document.querySelector("#userPass"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e));He([be(document.querySelector("#userEmail"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e)),n]).pipe(ke(e)).subscribe((function(e){t.email=e[0],t.password=e[1]})),be(document.querySelector("#btnLogin"),"click").pipe(De((function(){return oe(t.email,t.password)})),Ge(500)).subscribe((function(t){0===t.length?alert("Niste uneli ispravne podatke"):(e.next("Login complete..."),e.complete(),sessionStorage.setItem("current-user",t[0].email),sessionStorage.setItem("current-user-id",t[0].id.toString()),document.location.reload())}))}(r)}));var i=document.querySelector("a[href='#odjavi-se']");null!==i&&i.addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)})),sessionStorage.removeItem("current-user"),sessionStorage.removeItem("current-user-id"),document.location.reload()}))}document.body.onload=function(){$e(),function(){var e=document.querySelector(".middle"),t=document.createElement("div");t.classList.add("divReceptDrawParent"),e.appendChild(t);var n=document.createElement("div");n.classList.add("divReceptMoreButton");var r,i=document.createElement("button");i.id="buttonPrikaziJos",i.innerHTML="Prikazi jos",n.appendChild(i),e.appendChild(n),r=t,ce().subscribe((function(e){e.slice(0,4).forEach((function(e){Qe(r,e.slika,e.naziv,e.id,e.autor,e.vrsta_jela)}))}));var o=be(i,"click");Be([o.pipe(de((function(){return 4})),Je((function(e,t){return e+t}),4)),o.pipe(De((function(){return ce()})))]).subscribe((function(e){Ke(t,document.querySelectorAll(".divRecept")),e[1].slice(0,e[0]).forEach((function(e){Qe(t,e.slika,e.naziv,e.id,e.autor,e.vrsta_jela)}))}))}(),document.querySelector("a[href='#pocetna']").addEventListener("click",(function(){document.location.reload()}));var e=document.querySelector("a[href='#recepti']");null!==e&&e.addEventListener("click",(function(){var e=document.querySelectorAll(".dropdown-content-links"),t=document.querySelector(".dropdown-content");e.length>0?e.forEach((function(e){t.removeChild(e)})):ue().subscribe((function(e){e.forEach((function(e){Xe(".dropdown-content","#"+e.name.toLowerCase().split(" ").reduce((function(e,t){return e+t})),"dropdown-content-links",e.name,e.id)}))}))})),window.onclick=function(e){if(!e.target.matches("a[href='recepti']")){var t=document.querySelector(".dropdown-content"),n=document.querySelectorAll(".dropdown-content-links");n.length>0&&n.forEach((function(e){t.removeChild(e)}))}};var t=document.querySelector("a[href='#novi-recept']"),n=new le;null!==t&&t.addEventListener("click",(function(){var e,t,r,i,o,u,c,a=document.querySelectorAll(".middle > div");null!==a&&a.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var t=document.createElement("div");t.classList.add("divReceptParent");var n=document.createElement("div");n.classList.add("divNazivRecepta");var r=document.createElement("label");r.innerHTML="Naziv:",n.appendChild(r);var i=document.createElement("input");i.type="name",i.id="noviReceptName",n.appendChild(i),t.appendChild(n);var o=document.createElement("div");o.classList.add("divVrstaJela");var u=document.createElement("label");u.innerHTML="Vrsta jela:",o.appendChild(u);var c=document.createElement("select");c.classList.add("divVrstaJelaSelect");var a=document.createElement("option");a.innerHTML="",a.value="0",c.appendChild(a),ue().subscribe((function(e){e.forEach((function(e){var t=document.createElement("option");t.innerHTML=e.name,t.value=e.id.toString(),c.appendChild(t)}))})),o.appendChild(c),t.appendChild(o);var l=document.createElement("div");l.classList.add("divSastojci");var s=document.createElement("label");s.innerHTML="Sastojci:",l.appendChild(s);var d=document.createElement("input");d.type="text",d.id="noviReceptSastojci",l.appendChild(d),t.appendChild(l);var p=document.createElement("div");p.classList.add("divPriprema");var f=document.createElement("label");f.innerHTML="Priprema:",p.appendChild(f);var h=document.createElement("textarea");h.id="noviReceptPriprema",h.cols=30,h.rows=15,p.appendChild(h),t.appendChild(p);var v=document.createElement("div");v.classList.add("divSlika");var m=document.createElement("label");m.innerHTML="Dodaj sliku",v.appendChild(m);var y=document.createElement("input");y.id="slikaRecept",y.type="file",v.appendChild(y);var b=document.createElement("img");b.alt="Image preview",b.width=150,b.height=150,v.appendChild(b),t.appendChild(v);var g=document.createElement("div");g.classList.add("divButtonDodajRecept");var w=document.createElement("button");w.innerHTML="Dodaj",w.classList.add("buttonDodajRecept"),w.disabled=!0,g.appendChild(w),t.appendChild(g),e.appendChild(t)}(document.querySelector(".middle")),e=n,t=new Fe,r=function(e){return be(document.querySelector("#noviReceptName"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e))}(e),i=function(e){return be(document.querySelector("select"),"change").pipe(de((function(e){return e.target.value})),(t=function(e){return parseInt(e)>0},Y((function(e,n){var r=0;e.subscribe(K(n,(function(e){return t.call(void 0,e,r++)&&n.next(e)})))}))),ke(e));var t}(e),o=function(e){return be(document.querySelector("#noviReceptSastojci"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e))}(e),u=function(e){return be(document.querySelector("#noviReceptPriprema"),"input").pipe(xe(200),de((function(e){return e.target.value})),ke(e))}(e),c=function(e){return be(document.querySelector("#slikaRecept"),"input").pipe(de((function(e){return e.target.files[0]})),De((function(t){return function(e,t){var n=new FileReader;return n.readAsDataURL(e),be(n,"load").pipe(de((function(e){var t,n=e.target.result;return t=n,document.querySelector("img").src=t,n})),ke(t))}(t,e)})),ke(e))}(e),He([r,i,o,u,c]).pipe(ke(e)).subscribe((function(e){""!==e[0]&&"0"!==e[1]&&""!==e[2]&&""!==e[3]&&""!==e[4]?(t.naziv=e[0],t.vrsta_jela=parseInt(e[1]),t.sastojci=e[2],t.priprema=e[3],t.slika=e[4],t.autor=parseInt(sessionStorage.getItem("current-user-id")),document.querySelector(".buttonDodajRecept").disabled=!1):alert("Morate uneti sve podatke...")})),be(document.querySelector(".buttonDodajRecept"),"click").pipe(De((function(){return function(e){return $(fetch(re,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))}(t)}))).subscribe((function(e){if(!0===e){alert("Dodali ste novi recept.");var t=document.querySelectorAll("input"),n=document.querySelector("textarea");document.querySelector("img").src="",t.forEach((function(e){return e.value=""})),n.value=""}else alert("Doslo je do greske,pokusajte ponovo.")}))}))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,