(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(a){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(e,u)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function i(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function u(e){return this instanceof u?(this.v=e,this):new u(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function a(e){return"function"==typeof e}function l(e){return a(null==e?void 0:e.then)}function s(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var d=s((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,u,c;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var s=r(l),f=s.next();!f.done;f=s.next())f.value.remove(this)}catch(t){e={error:t}}finally{try{f&&!f.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else l.remove(this);var p=this.initialTeardown;if(a(p))try{p()}catch(e){c=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var v=r(h),y=v.next();!y.done;y=v.next()){var b=y.value;try{m(b)}catch(e){c=null!=c?c:[],e instanceof d?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{y&&!y.done&&(u=v.return)&&u.call(v)}finally{if(n)throw n.error}}}if(c)throw new d(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)m(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&f(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}(),h=p.EMPTY;function v(e){return e instanceof p||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function m(e){a(e)?e():e.unsubscribe()}var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=b.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([e,t],o(n))):setTimeout.apply(void 0,i([e,t],o(n)))},clearTimeout:function(e){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function w(e){b.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function S(){}var g=E("C",void 0,void 0);function E(e,t,n){return{kind:e,value:t,error:n}}var x=null;function _(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!x;if(t&&(x={errorThrown:!1,error:null}),e(),t){var n=x,r=n.errorThrown,o=n.error;if(x=null,r)throw o}}else e()}var C=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,v(t)&&t.add(n)):n.destination=O,n}return t(n,e),n.create=function(e,t,n){return new j(e,t,n)},n.prototype.next=function(e){this.isStopped?A(function(e){return E("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?A(E("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?A(g,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),L=Function.prototype.bind;function I(e,t){return L.call(e,t)}var T=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){k(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){k(e)}else k(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){k(e)}},e}(),j=function(e){function n(t,n,r){var o,i,u=e.call(this)||this;return a(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:u&&y.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&I(t.next,i),error:t.error&&I(t.error,i),complete:t.complete&&I(t.complete,i)}):o=t,u.destination=new T(o),u}return t(n,e),n}(C);function k(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&x&&(x.errorThrown=!0,x.error=t)):w(e)}function A(e,t){var n=y.onStoppedNotification;n&&b.setTimeout((function(){return n(e,t)}))}var O={closed:!0,next:S,error:function(e){throw e},complete:S},q="function"==typeof Symbol&&Symbol.observable||"@@observable";function P(e){return e}var H=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=this,i=(r=e)&&r instanceof C||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&v(r)?e:new j(e,t,n);return _((function(){var e=o,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=M(t))((function(t,r){var o=new j({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[q]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?P:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=M(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function M(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}function z(e){return a(e[q])}function N(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function R(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var D="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function U(e){return a(null==e?void 0:e[D])}function G(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=o[e](t)).value instanceof u?Promise.resolve(n.value.v).then(l,s):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function l(e){a("next",e)}function s(e){a("throw",e)}function d(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,u(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,u(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function F(e){return a(null==e?void 0:e.getReader)}function J(e){if(e instanceof H)return e;if(null!=e){if(z(e))return i=e,new H((function(e){var t=i[q]();if(a(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return o=e,new H((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(l(e))return n=e,new H((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,w)}));if(N(e))return V(e);if(U(e))return t=e,new H((function(e){var n,o;try{for(var i=r(t),u=i.next();!u.done;u=i.next()){var c=u.value;if(e.next(c),e.closed)return}}catch(e){n={error:e}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(F(e))return V(G(e))}var t,n,o,i;throw R(e)}function V(e){return new H((function(t){(function(e,t){var o,i,u,c,a,l,s,d;return a=this,l=void 0,d=function(){var a,l;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(a=i.value,t.next(a),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=n.sent(),u={error:l},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof s?o:new s((function(e){e(o)}))).then(n,r)}o((d=d.apply(a,l||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function Y(e){return function(t){if(function(e){return a(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function B(e,t,n,r,o){return new K(e,t,n,r,o)}var K=function(e){function n(t,n,r,o,i,u){var c=e.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(C);function Q(e,t){return Y((function(n,r){var o=0;n.subscribe(B(r,(function(n){r.next(e.call(t,n,o++))})))}))}function W(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function X(e,t,n){return void 0===n&&(n=1/0),a(t)?X((function(n,r){return Q((function(e,o){return t(n,e,r,o)}))(J(e(n,r)))}),n):("number"==typeof t&&(n=t),Y((function(t,r){return function(e,t,n,r,o,i,u,c){var a=[],l=0,s=0,d=!1,f=function(){!d||a.length||l||t.complete()},p=function(e){return l<r?h(e):a.push(e)},h=function(e){l++;var o=!1;J(n(e,s++)).subscribe(B(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{l--;for(;a.length&&l<r;)e=void 0,e=a.shift(),h(e);f()}catch(e){t.error(e)}var e})))};return e.subscribe(B(t,p,(function(){d=!0,f()}))),function(){}}(t,r,e,n)})))}var Z=Array.isArray;function $(e){return Q((function(t){return function(e,t){return Z(t)?e.apply(void 0,i([],o(t))):e(t)}(e,t)}))}var ee=["addListener","removeListener"],te=["addEventListener","removeEventListener"],ne=["on","off"];function re(e,t,n,r){if(a(n)&&(r=n,n=void 0),r)return re(e,t,n).pipe($(r));var i=o(function(e){return a(e.addEventListener)&&a(e.removeEventListener)}(e)?te.map((function(r){return function(o){return e[r](t,o,n)}})):function(e){return a(e.addListener)&&a(e.removeListener)}(e)?ee.map(oe(e,t)):function(e){return a(e.on)&&a(e.off)}(e)?ne.map(oe(e,t)):[],2),u=i[0],l=i[1];if(!u&&c(e))return X((function(e){return re(e,t,n)}))(J(e));if(!u)throw new TypeError("Invalid event target");return new H((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return u(t),function(){return l(t)}}))}function oe(e,t){return function(n){return function(r){return e[n](t,r)}}}var ie=function(e){function n(t,n){return e.call(this)||this}return t(n,e),n.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},n}(p),ue={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=ue.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,i([e,t],o(n))):setInterval.apply(void 0,i([e,t],o(n)))},clearInterval:function(e){var t=ue.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},ce=function(e){function n(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return t(n,e),n.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(o,this.id,t),this},n.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),ue.setInterval(e.flush.bind(e,this),n)},n.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&ue.clearInterval(t)},n.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},n}(ie),ae={now:function(){return(ae.delegate||Date).now()},delegate:void 0},le=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=ae.now,e}(),se=new(function(e){function n(t,n){void 0===n&&(n=le.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return t(n,e),n.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},n}(le))(ce);function de(e,t){return void 0===t&&(t=se),Y((function(n,r){var o=null,i=null,u=null,c=function(){if(o){o.unsubscribe(),o=null;var e=i;i=null,r.next(e)}};function a(){var n=u+e,i=t.now();if(i<n)return o=this.schedule(void 0,n-i),void r.add(o);c()}n.subscribe(B(r,(function(n){i=n,u=t.now(),o||(o=t.schedule(a,e),r.add(o))}),(function(){c(),r.complete()}),void 0,(function(){i=o=null})))}))}function fe(e){return Y((function(t,n){J(e).subscribe(B(n,(function(){return n.complete()}),S)),!n.closed&&t.subscribe(n)}))}var pe=Array.isArray,he=Object.getPrototypeOf,ve=Object.prototype,me=Object.keys;function ye(e,t){return void 0===t&&(t=0),Y((function(n,r){n.subscribe(B(r,(function(n){return W(r,e,(function(){return r.next(n)}),t)}),(function(){return W(r,e,(function(){return r.complete()}),t)}),(function(n){return W(r,e,(function(){return r.error(n)}),t)})))}))}function be(e,t){return void 0===t&&(t=0),Y((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function we(e,t){if(!e)throw new Error("Iterable cannot be null");return new H((function(n){W(n,t,(function(){var r=e[Symbol.asyncIterator]();W(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function Se(e,t){return t?function(e,t){if(null!=e){if(z(e))return function(e,t){return J(e).pipe(be(t),ye(t))}(e,t);if(c(e))return function(e,t){return new H((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(l(e))return function(e,t){return J(e).pipe(be(t),ye(t))}(e,t);if(N(e))return we(e,t);if(U(e))return function(e,t){return new H((function(n){var r;return W(n,t,(function(){r=e[D](),W(n,t,(function(){var e,t,o;try{t=(e=r.next()).value,o=e.done}catch(e){return void n.error(e)}o?n.complete():n.next(t)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(F(e))return function(e,t){return we(G(e),t)}(e,t)}throw R(e)}(e,t):J(e)}function ge(e){return e[e.length-1]}function Ee(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return(t=ge(e))&&a(t.schedule)?e.pop():void 0;var t}(e),r=function(e){return a(ge(e))?e.pop():void 0}(e),o=function(e){if(1===e.length){var t=e[0];if(pe(t))return{args:t,keys:null};if((r=t)&&"object"==typeof r&&he(r)===ve){var n=me(t);return{args:n.map((function(e){return t[e]})),keys:n}}}var r;return{args:e,keys:null}}(e),i=o.args,u=o.keys;if(0===i.length)return Se([],n);var c=new H(function(e,t,n){return void 0===n&&(n=P),function(r){xe(t,(function(){for(var o=e.length,i=new Array(o),u=o,c=o,a=function(o){xe(t,(function(){var a=Se(e[o],t),l=!1;a.subscribe(B(r,(function(e){i[o]=e,l||(l=!0,c--),c||r.next(n(i.slice()))}),(function(){--u||r.complete()})))}),r)},l=0;l<o;l++)a(l)}),r)}}(i,n,u?function(e){return function(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}(u,e)}:P));return r?c.pipe($(r)):c}function xe(e,t,n){e?W(n,e,t):t()}function _e(){return Se(fetch("http://localhost:3000/vrsta-jela",{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return alert(e)})))}var Ce=function(e,t,n,r,o,i,u){this.id=e,this.name=t,this.last_name=n,this.email=r,this.password=o,this.city=i,this.birth_date=u,this.picture=null};function Le(e,t,n,r){var o=document.createElement("a");o.href=t,o.classList.add(n),o.innerHTML=r;var i=document.querySelector(e);null!==o&&null!==i&&i.appendChild(o)}function Ie(e,t){var n=document.querySelector("a[href='"+t+"']"),r=document.querySelector(e);null!==n&&null!==r&&r.removeChild(n)}var Te=s((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),je=function(e){function n(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return t(n,e),n.prototype.lift=function(e){var t=new ke(this,this);return t.operator=e,t},n.prototype._throwIfClosed=function(){if(this.closed)throw new Te},n.prototype.next=function(e){var t=this;_((function(){var n,o;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var i=r(t.currentObservers),u=i.next();!u.done;u=i.next())u.value.next(e)}catch(e){n={error:e}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(e){var t=this;_((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},n.prototype.complete=function(){var e=this;_((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},n.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},n.prototype._innerSubscribe=function(e){var t=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?h:(this.currentObservers=null,i.push(e),new p((function(){t.currentObservers=null,f(i,e)})))},n.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},n.prototype.asObservable=function(){var e=new H;return e.source=this,e},n.create=function(e,t){return new ke(e,t)},n}(H),ke=function(e){function n(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return t(n,e),n.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},n.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},n.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},n.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:h},n}(je);document.body.onload=function(){document.querySelector("a[href='#kreiraj-nalog']"),document.querySelector("a[href='#prijavi-se']"),document.querySelector("a[href='#odjavi-se']"),document.querySelector("a[href='#profil']"),null!==sessionStorage.getItem("current-user")?(Le(".header","#novi-recept","header-item","NOVI RECEPT"),Le(".header","#profil","header-item","PROFIL"),Le(".header","#odjavi-se","header-item","ODJAVI SE"),Ie(".header","#prijavi-se"),Ie(".header","#kreiraj-nalog")):(Le(".header","#prijavi-se","header-item","PRIJAVI SE"),Le(".header","#kreiraj-nalog","header-item","KREIRAJ NALOG"),Ie(".header","#profil"),Ie(".header","#odjavi-se"),Ie(".header","#novi-recept"));var e=document.querySelector("a[href='#kreiraj-nalog']");null!==e&&e.addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var t=document.createElement("div");t.classList.add("divSignup");var n=document.createElement("div");n.classList.add("divSignupLabels");var r=document.createElement("label");r.innerHTML="Ime:",n.appendChild(r);var o=document.createElement("label");o.innerHTML="Prezime:",n.appendChild(o);var i=document.createElement("label");i.innerHTML="E-mail:",n.appendChild(i);var u=document.createElement("label");u.innerHTML="Lozinka:",n.appendChild(u);var c=document.createElement("label");c.innerHTML="Grad:",n.appendChild(c);var a=document.createElement("label");a.innerHTML="Datum rodjenja:",n.appendChild(a),t.appendChild(n);var l=document.createElement("div");l.classList.add("divSignupInput");var s=document.createElement("input");s.type="name",l.appendChild(s);var d=document.createElement("input");d.type="name",l.appendChild(d);var f=document.createElement("input");f.type="email",l.appendChild(f);var p=document.createElement("input");p.type="password",l.appendChild(p);var h=document.createElement("input");h.type="name",l.appendChild(h);var v=document.createElement("input");v.type="date",l.appendChild(v),t.appendChild(l),e.appendChild(t);var m=document.createElement("div");m.classList.add("divSignupButton");var y=document.createElement("button");y.classList.add("signupButton"),y.innerHTML="Kreiraj",y.onclick=function(){var e;""===s.value&&""===d.value&&""===h.value&&""===f.value&&""===p.value?alert("Morate da unesete sve podatke..."):(e=f.value,Se(fetch("http://localhost:3000/users?email="+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))).subscribe((function(e){var t;e.length>0?alert("Korisnik sa ovom email adresom vec postoji,unesite drugu email adresu..."):(t=new Ce(null,s.value,d.value,f.value,p.value,h.value,v.value),console.log(t),Se(fetch("http://localhost:3000/users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))).subscribe((function(e){!0===e?(sessionStorage.setItem("current-user",f.value),document.location.reload()):alert("Greska...pokusaj ponovo...")}))}))},m.appendChild(y),e.appendChild(m)}(document.querySelector(".middle"))})),document.querySelector("a[href='#pocetna']").addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)}))}));var t=document.querySelector("a[href='#prijavi-se']"),n=new je;null!==t&&t.addEventListener("click",(function(){var e,t,r,o,i=document.querySelectorAll(".middle > div");null!==i&&i.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var t=document.createElement("div");t.classList.add("divLogin");var n=document.createElement("div");n.classList.add("divLoginLabels");var r=document.createElement("label");r.innerHTML="E-mail:",n.appendChild(r);var o=document.createElement("label");o.innerHTML="Password:",n.appendChild(o),t.appendChild(n);var i=document.createElement("div");i.classList.add("divLoginInput");var u=document.createElement("input");u.id="userEmail",u.type="email",i.appendChild(u);var c=document.createElement("input");c.id="userPass",c.type="password",i.appendChild(c),t.appendChild(i),e.appendChild(t);var a=document.createElement("div");a.classList.add("divLoginButton");var l=document.createElement("button");l.id="btnLogin",l.innerHTML="Uloguj se",a.appendChild(l),e.appendChild(a)}(document.querySelector(".middle")),e=n,r=new Ce(null,null,null,null,null,null,null),o=re(document.querySelector("#userPass"),"input").pipe(de(200),Q((function(e){return e.target.value})),fe(e)),Ee([re(document.querySelector("#userEmail"),"input").pipe(de(200),Q((function(e){return e.target.value})),fe(e)),o]).pipe(fe(e)).subscribe((function(e){r.email=e[0],r.password=e[1]})),re(document.querySelector("#btnLogin"),"click").pipe((t=function(){return e=r.email,t=r.password,Se(fetch("http://localhost:3000/users?email="+e+"&password="+t,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})));var e,t},Y((function(e,n){var r=null,o=!1,i=function(){return o&&!r&&n.complete()};e.subscribe(B(n,(function(e){null==r||r.unsubscribe(),J(t()).subscribe(r=B(n,(function(e){return n.next(e)}),(function(){r=null,i()})))}),(function(){o=!0,i()})))})))).subscribe((function(t){0===t.length?alert("Niste uneli ispravne podatke"):(e.next("Login complete..."),e.complete(),sessionStorage.setItem("current-user",t[0].email),sessionStorage.setItem("current-user-id",t[0].id.toString()),document.location.reload())}))}));var r=document.querySelector("a[href='#odjavi-se']");null!==r&&r.addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)})),sessionStorage.removeItem("current-user"),document.location.reload()}));var o=document.querySelector("a[href='#recepti']");null!==o&&o.addEventListener("click",(function(){var e=document.querySelectorAll(".dropdown-content-links"),t=document.querySelector(".dropdown-content");e.length>0?e.forEach((function(e){t.removeChild(e)})):_e().subscribe((function(e){e.forEach((function(e){Le(".dropdown-content","#"+e.name.toLowerCase().split(" ").reduce((function(e,t){return e+t})),"dropdown-content-links",e.name)}))}))})),window.onclick=function(e){if(!e.target.matches("a[href='recepti']")){var t=document.querySelector(".dropdown-content"),n=document.querySelectorAll(".dropdown-content-links");n.length>0&&n.forEach((function(e){t.removeChild(e)}))}};var i=document.querySelector("a[href='#novi-recept']");null!==i&&i.addEventListener("click",(function(){var e=document.querySelectorAll(".middle > div");null!==e&&e.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var t=document.createElement("div");t.classList.add("divNazivRecepta");var n=document.createElement("label");n.innerHTML="Naziv:",t.appendChild(n);var r=document.createElement("input");r.type="name",r.id="noviReceptName",t.appendChild(r),e.appendChild(t);var o=document.createElement("div");o.classList.add("divVrstaJela");var i=document.createElement("label");i.innerHTML="Vrsta jela:",o.appendChild(i);var u=document.createElement("select");u.classList.add("divVrstaJelaSelect"),_e().subscribe((function(e){e.forEach((function(e){var t=document.createElement("option");t.innerHTML=e.name,t.value=e.id.toString(),u.appendChild(t)}))})),o.appendChild(u),e.appendChild(o);var c=document.createElement("div");c.classList.add("divSastojci");var a=document.createElement("label");a.innerHTML="Sastojci:",c.appendChild(a);var l=document.createElement("input");l.type="text",l.id="noviReceptSastojci",c.appendChild(l),e.appendChild(c);var s=document.createElement("div");s.classList.add("divPriprema");var d=document.createElement("label");d.innerHTML="Priprema:",s.appendChild(d);var f=document.createElement("input");f.type="text",f.id="noviReceptPriprema",s.appendChild(f),e.appendChild(s)}(document.querySelector(".middle"))}))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,