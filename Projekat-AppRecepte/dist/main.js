(()=>{"use strict";var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},e(n,t)};function n(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function t(e,n){var t,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(a){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,c[0]&&(u=0)),u;)try{if(t=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){u.label=c[1];break}if(6===c[0]&&u.label<i[1]){u.label=i[1],i=c;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(c);break}i[2]&&u.ops.pop(),u.trys.pop();continue}c=n.call(e,u)}catch(e){c=[6,e],r=0}finally{t=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function r(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,i,o=t.call(e),u=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(i)throw i.error}}return u}function o(e,n,t){if(t||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return e.concat(r||Array.prototype.slice.call(n))}function u(e){return this instanceof u?(this.v=e,this):new u(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function a(e){return"function"==typeof e}function l(e){return a(null==e?void 0:e.then)}function s(e){var n=e((function(e){Error.call(e),e.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var d=s((function(e){return function(n){e(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(e,n){return n+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function p(e,n){if(e){var t=e.indexOf(n);0<=t&&e.splice(t,1)}}var f=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,n,t,u,c;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var s=r(l),p=s.next();!p.done;p=s.next())p.value.remove(this)}catch(n){e={error:n}}finally{try{p&&!p.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}else l.remove(this);var f=this.initialTeardown;if(a(f))try{f()}catch(e){c=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var v=r(h),y=v.next();!y.done;y=v.next()){var b=y.value;try{m(b)}catch(e){c=null!=c?c:[],e instanceof d?c=o(o([],i(c)),i(e.errors)):c.push(e)}}}catch(e){t={error:e}}finally{try{y&&!y.done&&(u=v.return)&&u.call(v)}finally{if(t)throw t.error}}}if(c)throw new d(c)}},e.prototype.add=function(n){var t;if(n&&n!==this)if(this.closed)m(n);else{if(n instanceof e){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(n)}},e.prototype._hasParent=function(e){var n=this._parentage;return n===e||Array.isArray(n)&&n.includes(e)},e.prototype._addParent=function(e){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(e),n):n?[n,e]:e},e.prototype._removeParent=function(e){var n=this._parentage;n===e?this._parentage=null:Array.isArray(n)&&p(n,e)},e.prototype.remove=function(n){var t=this._finalizers;t&&p(t,n),n instanceof e&&n._removeParent(this)},e.EMPTY=((n=new e).closed=!0,n),e;var n}(),h=f.EMPTY;function v(e){return e instanceof f||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function m(e){a(e)?e():e.unsubscribe()}var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var u=b.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,o([e,n],i(t))):setTimeout.apply(void 0,o([e,n],i(t)))},clearTimeout:function(e){var n=b.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(e)},delegate:void 0};function g(e){b.setTimeout((function(){var n=y.onUnhandledError;if(!n)throw e;n(e)}))}function E(){}var w=S("C",void 0,void 0);function S(e,n,t){return{kind:e,value:n,error:t}}var L=null;function C(e){if(y.useDeprecatedSynchronousErrorHandling){var n=!L;if(n&&(L={errorThrown:!1,error:null}),e(),n){var t=L,r=t.errorThrown,i=t.error;if(L=null,r)throw i}}else e()}var k=function(e){function t(n){var t=e.call(this)||this;return t.isStopped=!1,n?(t.destination=n,v(n)&&n.add(t)):t.destination=P,t}return n(t,e),t.create=function(e,n,t){return new x(e,n,t)},t.prototype.next=function(e){this.isStopped?I(function(e){return S("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?I(S("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?I(w,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(f),T=Function.prototype.bind;function _(e,n){return T.call(e,n)}var j=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var n=this.partialObserver;if(n.next)try{n.next(e)}catch(e){q(e)}},e.prototype.error=function(e){var n=this.partialObserver;if(n.error)try{n.error(e)}catch(e){q(e)}else q(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){q(e)}},e}(),x=function(e){function t(n,t,r){var i,o,u=e.call(this)||this;return a(n)||!n?i={next:null!=n?n:void 0,error:null!=t?t:void 0,complete:null!=r?r:void 0}:u&&y.useDeprecatedNextContext?((o=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},i={next:n.next&&_(n.next,o),error:n.error&&_(n.error,o),complete:n.complete&&_(n.complete,o)}):i=n,u.destination=new j(i),u}return n(t,e),t}(k);function q(e){var n;y.useDeprecatedSynchronousErrorHandling?(n=e,y.useDeprecatedSynchronousErrorHandling&&L&&(L.errorThrown=!0,L.error=n)):g(e)}function I(e,n){var t=y.onStoppedNotification;t&&b.setTimeout((function(){return t(e,n)}))}var P={closed:!0,next:E,error:function(e){throw e},complete:E},M="function"==typeof Symbol&&Symbol.observable||"@@observable";function H(e){return e}var A=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(n){var t=new e;return t.source=this,t.operator=n,t},e.prototype.subscribe=function(e,n,t){var r,i=this,o=(r=e)&&r instanceof k||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&v(r)?e:new x(e,n,t);return C((function(){var e=i,n=e.operator,t=e.source;o.add(n?n.call(o,t):t?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(n){e.error(n)}},e.prototype.forEach=function(e,n){var t=this;return new(n=R(n))((function(n,r){var i=new x({next:function(n){try{e(n)}catch(e){r(e),i.unsubscribe()}},error:r,complete:n});t.subscribe(i)}))},e.prototype._subscribe=function(e){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(e)},e.prototype[M]=function(){return this},e.prototype.pipe=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return(0===(t=e).length?H:1===t.length?t[0]:function(e){return t.reduce((function(e,n){return n(e)}),e)})(this);var t},e.prototype.toPromise=function(e){var n=this;return new(e=R(e))((function(e,t){var r;n.subscribe((function(e){return r=e}),(function(e){return t(e)}),(function(){return e(r)}))}))},e.create=function(n){return new e(n)},e}();function R(e){var n;return null!==(n=null!=e?e:y.Promise)&&void 0!==n?n:Promise}function O(e){return a(e[M])}function z(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function D(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var N="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function U(e){return a(null==e?void 0:e[N])}function G(e){return function(e,n,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=t.apply(e,n||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){i[e]&&(r[e]=function(n){return new Promise((function(t,r){o.push([e,n,t,r])>1||a(e,n)}))})}function a(e,n){try{(t=i[e](n)).value instanceof u?Promise.resolve(t.value.v).then(l,s):d(o[0][2],t)}catch(e){d(o[0][3],e)}var t}function l(e){a("next",e)}function s(e){a("throw",e)}function d(e,n){e(n),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var n,r,i;return t(this,(function(t){switch(t.label){case 0:n=e.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,u(n.read())];case 3:return r=t.sent(),i=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,u(i)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function J(e){return a(null==e?void 0:e.getReader)}function V(e){if(e instanceof A)return e;if(null!=e){if(O(e))return o=e,new A((function(e){var n=o[M]();if(a(n.subscribe))return n.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return i=e,new A((function(e){for(var n=0;n<i.length&&!e.closed;n++)e.next(i[n]);e.complete()}));if(l(e))return t=e,new A((function(e){t.then((function(n){e.closed||(e.next(n),e.complete())}),(function(n){return e.error(n)})).then(null,g)}));if(z(e))return B(e);if(U(e))return n=e,new A((function(e){var t,i;try{for(var o=r(n),u=o.next();!u.done;u=o.next()){var c=u.value;if(e.next(c),e.closed)return}}catch(e){t={error:e}}finally{try{u&&!u.done&&(i=o.return)&&i.call(o)}finally{if(t)throw t.error}}e.complete()}));if(J(e))return B(G(e))}var n,t,i,o;throw D(e)}function B(e){return new A((function(n){(function(e,n){var i,o,u,c,a,l,s,d;return a=this,l=void 0,d=function(){var a,l;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,t=e[Symbol.asyncIterator];return t?t.call(e):(e=r(e),n={},i("next"),i("throw"),i("return"),n[Symbol.asyncIterator]=function(){return this},n);function i(t){n[t]=e[t]&&function(n){return new Promise((function(r,i){!function(e,n,t,r){Promise.resolve(r).then((function(n){e({value:n,done:t})}),n)}(r,i,(n=e[t](n)).done,n.value)}))}}}(e),t.label=1;case 1:return[4,i.next()];case 2:if((o=t.sent()).done)return[3,4];if(a=o.value,n.next(a),n.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=t.sent(),u={error:l},[3,11];case 6:return t.trys.push([6,,9,10]),o&&!o.done&&(c=i.return)?[4,c.call(i)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,n){function t(e){try{i(d.next(e))}catch(e){n(e)}}function r(e){try{i(d.throw(e))}catch(e){n(e)}}function i(n){var i;n.done?e(n.value):(i=n.value,i instanceof s?i:new s((function(e){e(i)}))).then(t,r)}i((d=d.apply(a,l||[])).next())}))})(e,n).catch((function(e){return n.error(e)}))}))}function F(e,n,t,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=n.schedule((function(){t(),i?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(o),!i)return o}function K(e){return function(n){if(function(e){return a(null==e?void 0:e.lift)}(n))return n.lift((function(n){try{return e(n,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Y(e,n,t,r,i){return new Q(e,n,t,r,i)}var Q=function(e){function t(n,t,r,i,o,u){var c=e.call(this,n)||this;return c.onFinalize=o,c.shouldUnsubscribe=u,c._next=t?function(e){try{t(e)}catch(e){n.error(e)}}:e.prototype._next,c._error=i?function(e){try{i(e)}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return n(t,e),t.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;e.prototype.unsubscribe.call(this),!t&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},t}(k);function W(e,n){return void 0===n&&(n=0),K((function(t,r){t.subscribe(Y(r,(function(t){return F(r,e,(function(){return r.next(t)}),n)}),(function(){return F(r,e,(function(){return r.complete()}),n)}),(function(t){return F(r,e,(function(){return r.error(t)}),n)})))}))}function X(e,n){return void 0===n&&(n=0),K((function(t,r){r.add(e.schedule((function(){return t.subscribe(r)}),n))}))}function Z(e,n){if(!e)throw new Error("Iterable cannot be null");return new A((function(t){F(t,n,(function(){var r=e[Symbol.asyncIterator]();F(t,n,(function(){r.next().then((function(e){e.done?t.complete():t.next(e.value)}))}),0,!0)}))}))}function $(e,n){return n?function(e,n){if(null!=e){if(O(e))return function(e,n){return V(e).pipe(X(n),W(n))}(e,n);if(c(e))return function(e,n){return new A((function(t){var r=0;return n.schedule((function(){r===e.length?t.complete():(t.next(e[r++]),t.closed||this.schedule())}))}))}(e,n);if(l(e))return function(e,n){return V(e).pipe(X(n),W(n))}(e,n);if(z(e))return Z(e,n);if(U(e))return function(e,n){return new A((function(t){var r;return F(t,n,(function(){r=e[N](),F(t,n,(function(){var e,n,i;try{n=(e=r.next()).value,i=e.done}catch(e){return void t.error(e)}i?t.complete():t.next(n)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,n);if(J(e))return function(e,n){return Z(G(e),n)}(e,n)}throw D(e)}(e,n):V(e)}var ee=new A((function(e){return e.complete()}));function ne(e){return e<=0?function(){return ee}:K((function(n,t){var r=0;n.subscribe(Y(t,(function(n){++r<=e&&(t.next(n),e<=r&&t.complete())})))}))}var te="http://localhost:3000/users",re="http://localhost:3000/recept",ie="http://localhost:3000/vrsta-jela";function oe(e){return $(fetch(te+"/"+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)}))).pipe(ne(1))}function ue(e,n){return $(fetch(te+"?email="+e+"&password="+n,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))}function ce(){return $(fetch(ie,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return alert(e)})))}function ae(e){return $(fetch(ie+"/"+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return alert(e)}))).pipe(ne(1))}function le(){return $(fetch(re,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))}function se(e){return $(fetch(re+"/"+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)}))).pipe(ne(1))}var de=s((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),pe=function(e){function t(){var n=e.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return n(t,e),t.prototype.lift=function(e){var n=new fe(this,this);return n.operator=e,n},t.prototype._throwIfClosed=function(){if(this.closed)throw new de},t.prototype.next=function(e){var n=this;C((function(){var t,i;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var o=r(n.currentObservers),u=o.next();!u.done;u=o.next())u.value.next(e)}catch(e){t={error:e}}finally{try{u&&!u.done&&(i=o.return)&&i.call(o)}finally{if(t)throw t.error}}}}))},t.prototype.error=function(e){var n=this;C((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=e;for(var t=n.observers;t.length;)t.shift().error(e)}}))},t.prototype.complete=function(){var e=this;C((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var n=e.observers;n.length;)n.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(n){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,n)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var n=this,t=this,r=t.hasError,i=t.isStopped,o=t.observers;return r||i?h:(this.currentObservers=null,o.push(e),new f((function(){n.currentObservers=null,p(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var n=this,t=n.hasError,r=n.thrownError,i=n.isStopped;t?e.error(r):i&&e.complete()},t.prototype.asObservable=function(){var e=new A;return e.source=this,e},t.create=function(e,n){return new fe(e,n)},t}(A),fe=function(e){function t(n,t){var r=e.call(this)||this;return r.destination=n,r.source=t,r}return n(t,e),t.prototype.next=function(e){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===t||t.call(n,e)},t.prototype.error=function(e){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===t||t.call(n,e)},t.prototype.complete=function(){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===n||n.call(e)},t.prototype._subscribe=function(e){var n,t;return null!==(t=null===(n=this.source)||void 0===n?void 0:n.subscribe(e))&&void 0!==t?t:h},t}(pe);function he(e,n){return K((function(t,r){var i=0;t.subscribe(Y(r,(function(t){r.next(e.call(n,t,i++))})))}))}function ve(e,n,t){return void 0===t&&(t=1/0),a(n)?ve((function(t,r){return he((function(e,i){return n(t,e,r,i)}))(V(e(t,r)))}),t):("number"==typeof n&&(t=n),K((function(n,r){return function(e,n,t,r,i,o,u,c){var a=[],l=0,s=0,d=!1,p=function(){!d||a.length||l||n.complete()},f=function(e){return l<r?h(e):a.push(e)},h=function(e){l++;var i=!1;V(t(e,s++)).subscribe(Y(n,(function(e){n.next(e)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(;a.length&&l<r;)e=void 0,e=a.shift(),h(e);p()}catch(e){n.error(e)}var e})))};return e.subscribe(Y(n,f,(function(){d=!0,p()}))),function(){}}(n,r,e,t)})))}var me=Array.isArray;function ye(e){return he((function(n){return function(e,n){return me(n)?e.apply(void 0,o([],i(n))):e(n)}(e,n)}))}var be=["addListener","removeListener"],ge=["addEventListener","removeEventListener"],Ee=["on","off"];function we(e,n,t,r){if(a(t)&&(r=t,t=void 0),r)return we(e,n,t).pipe(ye(r));var o=i(function(e){return a(e.addEventListener)&&a(e.removeEventListener)}(e)?ge.map((function(r){return function(i){return e[r](n,i,t)}})):function(e){return a(e.addListener)&&a(e.removeListener)}(e)?be.map(Se(e,n)):function(e){return a(e.on)&&a(e.off)}(e)?Ee.map(Se(e,n)):[],2),u=o[0],l=o[1];if(!u&&c(e))return ve((function(e){return we(e,n,t)}))(V(e));if(!u)throw new TypeError("Invalid event target");return new A((function(e){var n=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return e.next(1<n.length?n:n[0])};return u(n),function(){return l(n)}}))}function Se(e,n){return function(t){return function(r){return e[t](n,r)}}}var Le=function(e){function t(n,t){return e.call(this)||this}return n(t,e),t.prototype.schedule=function(e,n){return void 0===n&&(n=0),this},t}(f),Ce={setInterval:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var u=Ce.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,o([e,n],i(t))):setInterval.apply(void 0,o([e,n],i(t)))},clearInterval:function(e){var n=Ce.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(e)},delegate:void 0},ke=function(e){function t(n,t){var r=e.call(this,n,t)||this;return r.scheduler=n,r.work=t,r.pending=!1,r}return n(t,e),t.prototype.schedule=function(e,n){var t;if(void 0===n&&(n=0),this.closed)return this;this.state=e;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,n)),this.pending=!0,this.delay=n,this.id=null!==(t=this.id)&&void 0!==t?t:this.requestAsyncId(i,this.id,n),this},t.prototype.requestAsyncId=function(e,n,t){return void 0===t&&(t=0),Ce.setInterval(e.flush.bind(e,this),t)},t.prototype.recycleAsyncId=function(e,n,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return n;null!=n&&Ce.clearInterval(n)},t.prototype.execute=function(e,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(e,n);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,n){var t,r=!1;try{this.work(e)}catch(e){r=!0,t=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),t},t.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,t=this.scheduler,r=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=n&&(this.id=this.recycleAsyncId(t,n,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(Le),Te={now:function(){return(Te.delegate||Date).now()},delegate:void 0},_e=function(){function e(n,t){void 0===t&&(t=e.now),this.schedulerActionCtor=n,this.now=t}return e.prototype.schedule=function(e,n,t){return void 0===n&&(n=0),new this.schedulerActionCtor(this,e).schedule(t,n)},e.now=Te.now,e}(),je=new(function(e){function t(n,t){void 0===t&&(t=_e.now);var r=e.call(this,n,t)||this;return r.actions=[],r._active=!1,r}return n(t,e),t.prototype.flush=function(e){var n=this.actions;if(this._active)n.push(e);else{var t;this._active=!0;do{if(t=e.execute(e.state,e.delay))break}while(e=n.shift());if(this._active=!1,t){for(;e=n.shift();)e.unsubscribe();throw t}}},t}(_e))(ke),xe=je;function qe(e,n){return void 0===n&&(n=je),K((function(t,r){var i=null,o=null,u=null,c=function(){if(i){i.unsubscribe(),i=null;var e=o;o=null,r.next(e)}};function a(){var t=u+e,o=n.now();if(o<t)return i=this.schedule(void 0,t-o),void r.add(i);c()}t.subscribe(Y(r,(function(t){o=t,u=n.now(),i||(i=n.schedule(a,e),r.add(i))}),(function(){c(),r.complete()}),void 0,(function(){o=i=null})))}))}function Ie(e){return K((function(n,t){V(e).subscribe(Y(t,(function(){return t.complete()}),E)),!t.closed&&n.subscribe(t)}))}var Pe=Array.isArray,Me=Object.getPrototypeOf,He=Object.prototype,Ae=Object.keys;function Re(e){return e&&a(e.schedule)}function Oe(e){return e[e.length-1]}function ze(e){return a(Oe(e))?e.pop():void 0}function De(e){return Re(Oe(e))?e.pop():void 0}function Ne(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=De(e),r=ze(e),i=function(e){if(1===e.length){var n=e[0];if(Pe(n))return{args:n,keys:null};if((r=n)&&"object"==typeof r&&Me(r)===He){var t=Ae(n);return{args:t.map((function(e){return n[e]})),keys:t}}}var r;return{args:e,keys:null}}(e),o=i.args,u=i.keys;if(0===o.length)return $([],t);var c=new A(function(e,n,t){return void 0===t&&(t=H),function(r){Ue(n,(function(){for(var i=e.length,o=new Array(i),u=i,c=i,a=function(i){Ue(n,(function(){var a=$(e[i],n),l=!1;a.subscribe(Y(r,(function(e){o[i]=e,l||(l=!0,c--),c||r.next(t(o.slice()))}),(function(){--u||r.complete()})))}),r)},l=0;l<i;l++)a(l)}),r)}}(o,t,u?function(e){return function(e,n){return e.reduce((function(e,t,r){return e[t]=n[r],e}),{})}(u,e)}:H));return r?c.pipe(ye(r)):c}function Ue(e,n,t){e?F(t,e,n):n()}function Ge(e,n){return K((function(t,r){var i=null,o=0,u=!1,c=function(){return u&&!i&&r.complete()};t.subscribe(Y(r,(function(t){null==i||i.unsubscribe();var u=0,a=o++;V(e(t,a)).subscribe(i=Y(r,(function(e){return r.next(n?n(t,e,a,u++):e)}),(function(){i=null,c()})))}),(function(){u=!0,c()})))}))}function Je(e,n){return n?function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return(void 0===(t=1)&&(t=1/0),ve(H,t))($(e,De(e)));var t}(n.pipe(ne(1),K((function(e,n){e.subscribe(Y(n,E))}))),t.pipe(Je(e)))}:ve((function(n,t){return V(e(n,t)).pipe(ne(1),function(e){return he((function(){return e}))}(n))}))}function Ve(e,n){void 0===n&&(n=je);var t=function(e,n,t){void 0===e&&(e=0),void 0===t&&(t=xe);var r=-1;return null!=n&&(Re(n)?t=n:r=n),new A((function(n){var i,o=(i=e)instanceof Date&&!isNaN(i)?+e-t.now():e;o<0&&(o=0);var u=0;return t.schedule((function(){n.closed||(n.next(u++),0<=r?this.schedule(void 0,r):n.complete())}),o)}))}(e,n);return Je((function(){return t}))}var Be=function(e,n,t,r,i,o,u){this.id=e,this.name=n,this.last_name=t,this.email=r,this.password=i,this.city=o,this.birth_date=u,this.picture=null};function Fe(e,n){return K((function(t,r){var i=0;t.subscribe(Y(r,(function(t){return e.call(n,t,i++)&&r.next(t)})))}))}var Ke=function(){this.naziv=null,this.autor=null,this.vrsta_jela=null,this.sastojci=null,this.priprema=null,this.slika=null};function Ye(e,n){var t=new FileReader;return t.readAsDataURL(e),we(t,"load").pipe(he((function(e){var n,t=e.target.result;return n=t,document.querySelector("img").src=n,t})),Ie(n))}function Qe(e,n){return K(function(e,n,t,r,i){return function(r,i){var o=t,u=n,c=0;r.subscribe(Y(i,(function(n){var t=c++;u=o?e(u,n,t):(o=!0,n),i.next(u)}),undefined))}}(e,n,arguments.length>=2))}var We=Array.isArray;function Xe(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=ze(e),r=function(e){return 1===e.length&&We(e[0])?e[0]:e}(e);return r.length?new A((function(e){var n=r.map((function(){return[]})),u=r.map((function(){return!1}));e.add((function(){n=u=null}));for(var c=function(c){V(r[c]).subscribe(Y(e,(function(r){if(n[c].push(r),n.every((function(e){return e.length}))){var a=n.map((function(e){return e.shift()}));e.next(t?t.apply(void 0,o([],i(a))):a),n.some((function(e,n){return!e.length&&u[n]}))&&e.complete()}}),(function(){u[c]=!0,!n[c].length&&e.complete()})))},a=0;!e.closed&&a<r.length;a++)c(a);return function(){n=u=null}})):ee}var Ze=function(e,n){this.id=e,this.name=n};function $e(e,n){null!==n&&n.forEach((function(n){e.removeChild(n)}))}function en(e,n,t,r,i,o){var u=document.createElement("div");u.classList.add("divRecept");var c=document.createElement("div");c.classList.add("divReceptSlika");var a=document.createElement("img");a.src=n,a.alt="Image",c.appendChild(a),u.appendChild(c);var l=document.createElement("div");l.classList.add("divReceptName");var s=document.createElement("label");s.classList.add("divReceptLabelName"),s.innerHTML=t,l.appendChild(s),u.appendChild(l);var d=new Ke,p=new Be(null,null,null,null,null,null,null),f=new Ze(null,null);Xe([nn(u).pipe(Ge((function(){return se(r)}))),nn(u).pipe(Ge((function(){return oe(i)}))),nn(u).pipe(Ge((function(){return ae(o)})))]).subscribe((function(e){d=e[0],p=e[1],f=e[2],an(d,p,f)})),e.appendChild(u)}function nn(e){return we(e,"click")}function tn(){var e=document.querySelector("#search-bar-dropdown-show"),n=document.querySelectorAll(".divSearchSingleRecept");n.length>0&&n.forEach((function(n){return e.removeChild(n)}))}function rn(e,n){Xe([we(n,"click").pipe(Ge((function(){return oe(e)}))),we(n,"click").pipe(Ge((function(){return $(fetch(re+"?autor="+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))})))]).subscribe((function(e){$e(document.querySelector(".middle"),document.querySelectorAll(".middle > div"));var n=e[0],t=e[1].reverse(),r=function(e){var n=document.querySelector(".middle"),t=document.createElement("div");t.classList.add("divUserProfile");var r=document.createElement("h2");r.classList.add("userInfoNaslov"),sessionStorage.getItem("current-user-id")===e.id.toString()?r.innerHTML="Vas profil":r.innerHTML="Korisnik",t.appendChild(r);var i=document.createElement("div");i.classList.add("divUserProfileInfo");var o=document.createElement("div");o.classList.add("divUserProfileInfoSlika");var u=document.createElement("img");u.alt="User image...",u.src=e.picture,o.appendChild(u),i.appendChild(o);var c=document.createElement("div");c.classList.add("divUserProfileInfoData");var a=document.createElement("div"),l=document.createElement("label");l.classList.add("main-label"),l.innerHTML="Ime: ",a.appendChild(l);var s=document.createElement("div");s.innerHTML=e.name+" "+e.last_name,a.appendChild(s),c.appendChild(a);var d=document.createElement("div"),p=document.createElement("label");p.classList.add("main-label"),p.innerHTML="Email: ",d.appendChild(p);var f=document.createElement("div");f.innerHTML=e.email,d.appendChild(f),c.appendChild(d);var h=document.createElement("div"),v=document.createElement("label");v.classList.add("main-label"),v.innerHTML="Grad: ",h.appendChild(v);var m=document.createElement("div");m.innerHTML=e.city,h.appendChild(m),c.appendChild(h);var y=document.createElement("div"),b=document.createElement("label");b.classList.add("main-label"),b.innerHTML="Datum rodjenja: ",y.appendChild(b);var g=document.createElement("div");g.innerHTML=e.birth_date,y.appendChild(g),c.appendChild(y),i.appendChild(c),t.appendChild(i);var E=document.createElement("h2");E.classList.add("userReceptiNaslov"),E.innerHTML="Recepti",t.appendChild(E);var w=document.createElement("div");return w.classList.add("divUserProfileRecepti"),t.appendChild(w),n.appendChild(t),w}(n);t.forEach((function(e){en(r,e.slika,e.naziv,e.id,n.id,e.vrsta_jela)}))}))}function on(e,n,t,r,i){void 0===i&&(i=0);var o=document.createElement("a");o.href=n,o.classList.add(t),o.innerHTML=r,"dropdown-content-links"===t&&function(e,n,t){we(e,n).pipe(Ge((function(){return $(fetch(re+"?vrsta_jela="+t,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))}))).subscribe((function(e){$e(document.querySelector(".middle"),document.querySelectorAll(".middle > div"));var n=document.createElement("div");n.classList.add("divReceptFromVrstaJela"),e.forEach((function(e){console.log(e),en(n,e.slika,e.naziv,e.id,e.autor,e.vrsta_jela)})),document.querySelector(".middle").appendChild(n)}))}(o,"click",i);var u=document.querySelector(e);null!==o&&null!==u&&u.appendChild(o)}function un(e,n){var t=document.querySelector("a[href='"+n+"']"),r=document.querySelector(e);null!==t&&null!==r&&r.removeChild(t)}function cn(){var e=sessionStorage.getItem("current-user"),n=sessionStorage.getItem("current-user-id");null!==e?(on(".header","#novi-recept","header-item","NOVI RECEPT"),on(".header","#profil","header-item","PROFIL"),on(".header","#odjavi-se","header-item","ODJAVI SE"),un(".header","#prijavi-se"),un(".header","#kreiraj-nalog")):(on(".header","#prijavi-se","header-item","PRIJAVI SE"),on(".header","#kreiraj-nalog","header-item","KREIRAJ NALOG"),un(".header","#profil"),un(".header","#odjavi-se"),un(".header","#novi-recept"));var t=document.querySelector("a[href='#kreiraj-nalog']"),r=new pe;null!==t&&t.addEventListener("click",(function(){$e(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("divSignup");var t=document.createElement("div");t.classList.add("divSignupLabels");var r=document.createElement("label");r.innerHTML="Ime:",t.appendChild(r);var i=document.createElement("label");i.innerHTML="Prezime:",t.appendChild(i);var o=document.createElement("label");o.innerHTML="E-mail:",t.appendChild(o);var u=document.createElement("label");u.innerHTML="Lozinka:",t.appendChild(u);var c=document.createElement("label");c.innerHTML="Grad:",t.appendChild(c);var a=document.createElement("label");a.innerHTML="Datum rodjenja:",t.appendChild(a);var l=document.createElement("label");l.innerHTML="Datum rodjenja:",t.appendChild(l),n.appendChild(t);var s=document.createElement("div");s.classList.add("divSignupInput");var d=document.createElement("input");d.id="signup-name",d.type="name",s.appendChild(d);var p=document.createElement("input");p.id="signup-lastname",p.type="name",s.appendChild(p);var f=document.createElement("input");f.id="signup-email",f.type="email",s.appendChild(f);var h=document.createElement("input");h.id="signup-password",h.type="password",s.appendChild(h);var v=document.createElement("input");v.id="signup-city",v.type="name",s.appendChild(v);var m=document.createElement("input");m.id="signup-date",m.type="date",s.appendChild(m);var y=document.createElement("input");y.id="signup-image",y.type="file",s.appendChild(y),n.appendChild(s),e.appendChild(n);var b=document.createElement("div");b.classList.add("divSlikaPreviw");var g=document.createElement("img");g.alt="Image preview",g.width=150,g.height=150,b.appendChild(g),e.appendChild(b);var E=document.createElement("div");E.classList.add("divSignupButton");var w=document.createElement("button");w.classList.add("signupButton"),w.innerHTML="Kreiraj",E.appendChild(w),e.appendChild(E)}(document.querySelector(".middle")),function(e){var n=new Be(null,null,null,null,null,null,null);document.querySelector(".signupButton").disabled=!0;var t=we(document.querySelector("#signup-name"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e)),r=we(document.querySelector("#signup-lastname"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e)),i=we(document.querySelector("#signup-email"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e)),o=we(document.querySelector("#signup-password"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e)),u=we(document.querySelector("#signup-city"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e)),c=we(document.querySelector("#signup-date"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e)),a=function(e){return we(document.querySelector("#signup-image"),"input").pipe(he((function(e){return e.target.files[0]})),Ge((function(n){return Ye(n,e)})),Ie(e))}(e);Ne([t,r,i,o,u,c,a]).pipe(Ie(e)).subscribe((function(e){n.name=e[0],n.last_name=e[1],n.email=e[2],n.password=e[3],n.city=e[4],n.birth_date=e[5],n.picture=e[6],document.querySelector(".signupButton").disabled=!1})),we(document.querySelector(".signupButton"),"click").pipe(Ge((function(){return e=n.email,$(fetch(te+"?email="+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})));var e})),Ve(500)).subscribe((function(t){t.length>0?alert("Korisnik sa ovom email adresom vec postoji.Pokusajte drugu."):null===n.name||null===n.last_name||null===n.email||null===n.password||null===n.city||null===n.birth_date||null===n.picture?alert("Morate da unesete sve podatke"):function(e){return console.log(e),$(fetch(te,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))}(n).subscribe((function(t){!0===t?(alert("Uspesno registrovnje."),e.next("Login complete..."),e.complete(),ue(n.email,n.password).subscribe((function(e){sessionStorage.setItem("current-user-id",e[0].id.toString()),sessionStorage.setItem("current-user",e[0].email),document.location.reload()}))):alert("Doslo je do greske,pokusajte ponovo...")}))}))}(r)}));var i=document.querySelector("a[href='#prijavi-se']"),o=new pe;null!==i&&i.addEventListener("click",(function(){$e(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("divLogin");var t=document.createElement("div");t.classList.add("divLoginLabels");var r=document.createElement("label");r.innerHTML="E-mail:",t.appendChild(r);var i=document.createElement("label");i.innerHTML="Password:",t.appendChild(i),n.appendChild(t);var o=document.createElement("div");o.classList.add("divLoginInput");var u=document.createElement("input");u.id="userEmail",u.type="email",o.appendChild(u);var c=document.createElement("input");c.id="userPass",c.type="password",o.appendChild(c),n.appendChild(o),e.appendChild(n);var a=document.createElement("div");a.classList.add("divLoginButton");var l=document.createElement("button");l.id="btnLogin",l.innerHTML="Uloguj se",a.appendChild(l),e.appendChild(a)}(document.querySelector(".middle")),function(e){var n=new Be(null,null,null,null,null,null,null),t=we(document.querySelector("#userPass"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e));Ne([we(document.querySelector("#userEmail"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e)),t]).pipe(Ie(e)).subscribe((function(e){n.email=e[0],n.password=e[1]})),we(document.querySelector("#btnLogin"),"click").pipe(Ge((function(){return ue(n.email,n.password)})),Ve(500)).subscribe((function(n){0===n.length?alert("Niste uneli ispravne podatke"):(e.next("Login complete..."),e.complete(),sessionStorage.setItem("current-user",n[0].email),sessionStorage.setItem("current-user-id",n[0].id.toString()),document.location.reload())}))}(o)}));var u=document.querySelector("a[href='#odjavi-se']");null!==u&&u.addEventListener("click",(function(){$e(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),sessionStorage.removeItem("current-user"),sessionStorage.removeItem("current-user-id"),document.location.reload()}));var c=document.querySelector("a[href='#profil']");null!==c&&rn(parseInt(n),c)}function an(e,n,t){$e(document.querySelector(".middle"),document.querySelectorAll(".middle > div"));var r=document.createElement("div");r.classList.add("divReceptPage");var i=document.createElement("div");i.classList.add("divReceptPageSlika");var o=document.createElement("img");o.alt="Recept image.",o.src=e.slika,i.appendChild(o),r.appendChild(i);var u=document.createElement("div");u.classList.add("divReceptPageInfo");var c=document.createElement("div");c.classList.add("divReceptPageName");var a=document.createElement("label");a.classList.add("main-label"),a.innerHTML="Naziv recepta: ",c.appendChild(a);var l=document.createElement("label");l.innerHTML=e.naziv,c.appendChild(l),u.appendChild(c);var s=document.createElement("div");s.classList.add("divReceptPageAutor");var d=document.createElement("label");d.innerHTML="Ime autora: ",d.classList.add("main-label"),s.appendChild(d);var p=document.createElement("a");p.href="#autro-link",rn(n.id,p),p.innerHTML=n.name+" "+n.last_name,s.appendChild(p),u.appendChild(s);var f=document.createElement("div");f.classList.add("divRecepPageVrstaJela");var h=document.createElement("label");h.classList.add("main-label"),h.innerHTML="Vrsta jela: ",f.appendChild(h);var v=document.createElement("label");v.innerHTML=t.name,f.appendChild(v),u.appendChild(f);var m=document.createElement("div");m.classList.add("divRecepPageSastojci");var y=document.createElement("label");y.classList.add("main-label"),y.innerHTML="Sastojci: ",m.appendChild(y);var b=document.createElement("label");b.innerHTML=e.sastojci,m.appendChild(b),u.appendChild(m);var g=document.createElement("div");g.classList.add("divRecepPagePriprema");var E=document.createElement("label");E.classList.add("main-label"),E.innerHTML="Priprema: ",g.appendChild(E);var w=document.createElement("div");w.classList.add("divPripremaLabels"),e.priprema.split("\n").forEach((function(e){var n=document.createElement("label");n.innerHTML=e,w.appendChild(n)})),g.appendChild(w),u.appendChild(g),r.appendChild(u),document.querySelector(".middle").appendChild(r)}document.body.onload=function(){cn(),function(){var e=document.querySelector(".middle"),n=document.createElement("div");n.classList.add("divReceptDrawParent"),e.appendChild(n);var t=document.createElement("div");t.classList.add("divReceptMoreButton");var r,i=document.createElement("button");i.id="buttonPrikaziJos",i.innerHTML="Prikazi jos",t.appendChild(i),e.appendChild(t),r=n,le().subscribe((function(e){e.reverse().slice(0,8).forEach((function(e){en(r,e.slika,e.naziv,e.id,e.autor,e.vrsta_jela)}))}));var o=we(i,"click");Xe([o.pipe(he((function(){return 8})),Qe((function(e,n){return e+n}),8)),o.pipe(Ge((function(){return le()})))]).subscribe((function(e){$e(n,document.querySelectorAll(".divRecept")),e[1].reverse().slice(0,e[0]).forEach((function(e){en(n,e.slika,e.naziv,e.id,e.autor,e.vrsta_jela)}))}))}(),document.querySelector("a[href='#pocetna']").addEventListener("click",(function(){document.location.reload()}));var e=document.querySelector("a[href='#recepti']");null!==e&&e.addEventListener("click",(function(){var e=document.querySelectorAll(".dropdown-content-links"),n=document.querySelector(".dropdown-content");e.length>0?e.forEach((function(e){n.removeChild(e)})):ce().subscribe((function(e){e.forEach((function(e){on(".dropdown-content","#"+e.name.toLowerCase().split(" ").reduce((function(e,n){return e+n})),"dropdown-content-links",e.name,e.id)}))}))})),document.querySelector("a[href='#search-input']").onclick=function(){document.querySelector("#search-bar-dropdown-show").classList.toggle("hideDisplay"),tn()},we(document.querySelector("#header-search-input"),"input").pipe(qe(200),he((function(e){return e.target.value})),Fe((function(e){return e.length>=3})),Ge((function(e){return le().pipe(he((function(n){return n.filter((function(n){return n.naziv.toLowerCase().includes(e)}))})))}))).subscribe((function(e){var n=document.querySelector("#search-bar-dropdown-show");tn(),e.forEach((function(e){return function(e,n){var t=document.createElement("div");t.classList.add("divSearchSingleRecept");var r=document.createElement("img");r.src=n.slika,t.appendChild(r);var i=document.createElement("label");i.innerHTML=n.naziv,t.appendChild(i),function(e,n){var t=new Ke,r=new Be(null,null,null,null,null,null,null),i=new Ze(null,null),o=we(e,"click");Xe([o.pipe(Ge((function(){return se(n.id)}))),o.pipe(Ge((function(){return oe(n.autor)}))),o.pipe(Ge((function(){return ae(n.vrsta_jela)})))]).subscribe((function(e){t=e[0],r=e[1],i=e[2],an(t,r,i)}))}(t,n),e.appendChild(t)}(n,e)}))})),window.onclick=function(e){if(!e.target.matches("a[href='recepti']")){var n=document.querySelector(".dropdown-content"),t=document.querySelectorAll(".dropdown-content-links");t.length>0&&t.forEach((function(e){n.removeChild(e)}))}e.target.matches("a[href='#search-input']")||e.target.matches("#header-search-input")||(document.querySelector("#search-bar-dropdown-show").classList.toggle("hideDisplay",!0),tn())};var n=document.querySelector("a[href='#novi-recept']"),t=new pe;null!==n&&n.addEventListener("click",(function(){var e,n,r,i,o,u,c,a=document.querySelectorAll(".middle > div");null!==a&&a.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var n=document.createElement("div");n.classList.add("divReceptParent");var t=document.createElement("div");t.classList.add("divNazivRecepta");var r=document.createElement("label");r.innerHTML="Naziv:",t.appendChild(r);var i=document.createElement("input");i.type="name",i.id="noviReceptName",t.appendChild(i),n.appendChild(t);var o=document.createElement("div");o.classList.add("divVrstaJela");var u=document.createElement("label");u.innerHTML="Vrsta jela:",o.appendChild(u);var c=document.createElement("select");c.classList.add("divVrstaJelaSelect");var a=document.createElement("option");a.innerHTML="",a.value="0",c.appendChild(a),ce().subscribe((function(e){e.forEach((function(e){var n=document.createElement("option");n.innerHTML=e.name,n.value=e.id.toString(),c.appendChild(n)}))})),o.appendChild(c),n.appendChild(o);var l=document.createElement("div");l.classList.add("divSastojci");var s=document.createElement("label");s.innerHTML="Sastojci:",l.appendChild(s);var d=document.createElement("input");d.type="text",d.id="noviReceptSastojci",l.appendChild(d),n.appendChild(l);var p=document.createElement("div");p.classList.add("divPriprema");var f=document.createElement("label");f.innerHTML="Priprema:",p.appendChild(f);var h=document.createElement("textarea");h.id="noviReceptPriprema",h.cols=30,h.rows=15,p.appendChild(h),n.appendChild(p);var v=document.createElement("div");v.classList.add("divSlika");var m=document.createElement("label");m.innerHTML="Dodaj sliku",v.appendChild(m);var y=document.createElement("input");y.id="slikaRecept",y.type="file",v.appendChild(y);var b=document.createElement("img");b.alt="Image preview",b.width=150,b.height=150,v.appendChild(b),n.appendChild(v);var g=document.createElement("div");g.classList.add("divButtonDodajRecept");var E=document.createElement("button");E.innerHTML="Dodaj",E.classList.add("buttonDodajRecept"),E.disabled=!0,g.appendChild(E),n.appendChild(g),e.appendChild(n)}(document.querySelector(".middle")),e=t,n=new Ke,r=function(e){return we(document.querySelector("#noviReceptName"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e))}(e),i=function(e){return we(document.querySelector("select"),"change").pipe(he((function(e){return e.target.value})),Fe((function(e){return parseInt(e)>0})),Ie(e))}(e),o=function(e){return we(document.querySelector("#noviReceptSastojci"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e))}(e),u=function(e){return we(document.querySelector("#noviReceptPriprema"),"input").pipe(qe(200),he((function(e){return e.target.value})),Ie(e))}(e),c=function(e){return we(document.querySelector("#slikaRecept"),"input").pipe(he((function(e){return e.target.files[0]})),Ge((function(n){return Ye(n,e)})),Ie(e))}(e),Ne([r,i,o,u,c]).pipe(Ie(e)).subscribe((function(e){""!==e[0]&&"0"!==e[1]&&""!==e[2]&&""!==e[3]&&""!==e[4]?(n.naziv=e[0],n.vrsta_jela=parseInt(e[1]),n.sastojci=e[2],n.priprema=e[3],n.slika=e[4],n.autor=parseInt(sessionStorage.getItem("current-user-id")),document.querySelector(".buttonDodajRecept").disabled=!1):alert("Morate uneti sve podatke...")})),we(document.querySelector(".buttonDodajRecept"),"click").pipe(Ge((function(){return function(e){return $(fetch(re,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))}(n)}))).subscribe((function(e){if(!0===e){alert("Dodali ste novi recept.");var n=document.querySelectorAll("input"),t=document.querySelector("textarea");document.querySelector("img").src="",n.forEach((function(e){return e.value=""})),t.value=""}else alert("Doslo je do greske,pokusajte ponovo.")}))}))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENtQ3JIMEJta0IsQ0FBY3ZFLEVBQWQsS0FFakI1WixXQUFVLFNBQUFqSixHQUNQLElBQVUsSUFBUEEsRUFBWSxDQUNYMlAsTUFBTSwyQkFDTixJQUFJMFgsRUFBUzlOLFNBQVNpRCxpQkFBaUIsU0FDbkM4SyxFQUFNL04sU0FBU0MsY0FBYyxZQUN2QkQsU0FBU0MsY0FBYyxPQUM3QkYsSUFBSSxHQUNSK04sRUFBTzVkLFNBQVEsU0FBQXZILEdBQUcsT0FBQUEsRUFBRTFCLE1BQU0sRUFBUixJQUNsQjhtQixFQUFJOW1CLE1BQU0sRSxNQUdWbVAsTUFBTSx1Q0FFZCxHV2NBLEdBRVIsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbm5lckZyb20uanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2V4ZWN1dGVTY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbGlmdC5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvb2JzZXJ2ZU9uLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N1YnNjcmliZU9uLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZWQuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVQcm9taXNlLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2UuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL3NyYy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL3NyYy9kYlNlcnZpY2VzLnRzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlSW50ZXJuYWxzLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9tYXBPbmVPck1hbnlBcmdzLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2ludGVydmFsUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlVW50aWwuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0LmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJncy5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvY29tYmluZUxhdGVzdC5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlT2JqZWN0LmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcC5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWxheVdoZW4uanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGwuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwVG8uanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXkuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3RpbWVyLmpzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0RhdGUuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL2NsYXNzZXMvdXNlci50cyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL2NsYXNzZXMvcmVjZXB0LnRzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9zcmMvbmV3UmVjZXB0RXZlbnRzLnRzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW4uanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2NhbkludGVybmFscy5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJnc09yQXJnQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3ppcC5qcyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vY2xhc3Nlcy92cnN0ZUplbGEudHMiLCJ3ZWJwYWNrOi8vcHJvamVrYXQtYXBwcmVjZXB0ZS8uL3NyYy9wb2NldG5hRXZlbnRzLnRzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9zcmMvcHJvZmlsRXZlbnRzLnRzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9zcmMvZHJhd0Z1bmN0aW9ucy50cyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vc3JjL3NpZ251cEV2ZW50cy50cyIsIndlYnBhY2s6Ly9wcm9qZWthdC1hcHByZWNlcHRlLy4vc3JjL2xvZ2luRXZlbnRzLnRzIiwid2VicGFjazovL3Byb2pla2F0LWFwcHJlY2VwdGUvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sICovXG5cbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufVxuXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XG4gIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XG4gICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdDtcbiAgfVxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgfVxuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XG4gIGZ1bmN0aW9uIGFjY2VwdChmKSB7IGlmIChmICE9PSB2b2lkIDAgJiYgdHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGV4cGVjdGVkXCIpOyByZXR1cm4gZjsgfVxuICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xuICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcbiAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9ySW4gfHwgKHRhcmdldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSkgOiB7fSk7XG4gIHZhciBfLCBkb25lID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcbiAgICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoZikgeyBpZiAoZG9uZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgaW5pdGlhbGl6ZXJzIGFmdGVyIGRlY29yYXRpb24gaGFzIGNvbXBsZXRlZFwiKTsgZXh0cmFJbml0aWFsaXplcnMucHVzaChhY2NlcHQoZiB8fCBudWxsKSk7IH07XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcbiAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5zZXQpKSBkZXNjcmlwdG9yLnNldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF8gPSBhY2NlcHQocmVzdWx0KSkge1xuICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcbiAgICAgIH1cbiAgfVxuICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XG4gIGRvbmUgPSB0cnVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcnVuSW5pdGlhbGl6ZXJzKHRoaXNBcmcsIGluaXRpYWxpemVycywgdmFsdWUpIHtcbiAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IHVzZVZhbHVlID8gaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZywgdmFsdWUpIDogaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZyk7XG4gIH1cbiAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiID8geCA6IFwiXCIuY29uY2F0KHgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0RnVuY3Rpb25OYW1lKGYsIG5hbWUsIHByZWZpeCkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcbiAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gIH1cbn1cblxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIG9bazJdID0gbVtrXTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcbiAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xuICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgfVxuICB9O1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xuICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gIGlmICghbSkgcmV0dXJuIG87XG4gIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICB0cnkge1xuICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gIH1cbiAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gIGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgIH1cbiAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICB9XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XG4gIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xuICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgcltrXSA9IGFbal07XG4gIHJldHVybiByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xuICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XG4gIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xuICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XG4gIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xuICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hZGREaXNwb3NhYmxlUmVzb3VyY2UoZW52LCB2YWx1ZSwgYXN5bmMpIHtcbiAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkLlwiKTtcbiAgICB2YXIgZGlzcG9zZTtcbiAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNEaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuYXN5bmNEaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKGRpc3Bvc2UgPT09IHZvaWQgMCkge1xuICAgICAgICBpZiAoIVN5bWJvbC5kaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmRpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmRpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBub3QgZGlzcG9zYWJsZS5cIik7XG4gICAgZW52LnN0YWNrLnB1c2goeyB2YWx1ZTogdmFsdWUsIGRpc3Bvc2U6IGRpc3Bvc2UsIGFzeW5jOiBhc3luYyB9KTtcbiAgfVxuICBlbHNlIGlmIChhc3luYykge1xuICAgIGVudi5zdGFjay5wdXNoKHsgYXN5bmM6IHRydWUgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgX1N1cHByZXNzZWRFcnJvciA9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xuICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2Rpc3Bvc2VSZXNvdXJjZXMoZW52KSB7XG4gIGZ1bmN0aW9uIGZhaWwoZSkge1xuICAgIGVudi5lcnJvciA9IGVudi5oYXNFcnJvciA/IG5ldyBfU3VwcHJlc3NlZEVycm9yKGUsIGVudi5lcnJvciwgXCJBbiBlcnJvciB3YXMgc3VwcHJlc3NlZCBkdXJpbmcgZGlzcG9zYWwuXCIpIDogZTtcbiAgICBlbnYuaGFzRXJyb3IgPSB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgd2hpbGUgKGVudi5zdGFjay5sZW5ndGgpIHtcbiAgICAgIHZhciByZWMgPSBlbnYuc3RhY2sucG9wKCk7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjLmRpc3Bvc2UgJiYgcmVjLmRpc3Bvc2UuY2FsbChyZWMudmFsdWUpO1xuICAgICAgICBpZiAocmVjLmFzeW5jKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihuZXh0LCBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IHJldHVybiBuZXh0KCk7IH0pO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICBmYWlsKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW52Lmhhc0Vycm9yKSB0aHJvdyBlbnYuZXJyb3I7XG4gIH1cbiAgcmV0dXJuIG5leHQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBfX2V4dGVuZHMsXG4gIF9fYXNzaWduLFxuICBfX3Jlc3QsXG4gIF9fZGVjb3JhdGUsXG4gIF9fcGFyYW0sXG4gIF9fbWV0YWRhdGEsXG4gIF9fYXdhaXRlcixcbiAgX19nZW5lcmF0b3IsXG4gIF9fY3JlYXRlQmluZGluZyxcbiAgX19leHBvcnRTdGFyLFxuICBfX3ZhbHVlcyxcbiAgX19yZWFkLFxuICBfX3NwcmVhZCxcbiAgX19zcHJlYWRBcnJheXMsXG4gIF9fc3ByZWFkQXJyYXksXG4gIF9fYXdhaXQsXG4gIF9fYXN5bmNHZW5lcmF0b3IsXG4gIF9fYXN5bmNEZWxlZ2F0b3IsXG4gIF9fYXN5bmNWYWx1ZXMsXG4gIF9fbWFrZVRlbXBsYXRlT2JqZWN0LFxuICBfX2ltcG9ydFN0YXIsXG4gIF9faW1wb3J0RGVmYXVsdCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxuICBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZSxcbiAgX19kaXNwb3NlUmVzb3VyY2VzLFxufTtcbiIsImV4cG9ydCB2YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9pc0Z1bmN0aW9uXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckNsYXNzKGNyZWF0ZUltcGwpIHtcbiAgICB2YXIgX3N1cGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH07XG4gICAgdmFyIGN0b3JGdW5jID0gY3JlYXRlSW1wbChfc3VwZXIpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yRnVuYztcbiAgICByZXR1cm4gY3RvckZ1bmM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xuICAgICAgICAgICAgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJSZW1vdmUuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5LCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgICAgICBpZiAoX3BhcmVudGFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcGFyZW50YWdlXzFfMSAmJiAhX3BhcmVudGFnZV8xXzEuZG9uZSAmJiAoX2EgPSBfcGFyZW50YWdlXzEucmV0dXJuKSkgX2EuY2FsbChfcGFyZW50YWdlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEZpbmFsaXplciA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbEZpbmFsaXplcikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsRmluYWxpemVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZS5lcnJvcnMgOiBbZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgICAgIGlmIChfZmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9maW5hbGl6ZXJzXzEgPSBfX3ZhbHVlcyhfZmluYWxpemVycyksIF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpOyAhX2ZpbmFsaXplcnNfMV8xLmRvbmU7IF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxpemVyID0gX2ZpbmFsaXplcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzXzFfMSAmJiAhX2ZpbmFsaXplcnNfMV8xLmRvbmUgJiYgKF9iID0gX2ZpbmFsaXplcnNfMS5yZXR1cm4pKSBfYi5jYWxsKF9maW5hbGl6ZXJzXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIodGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl9maW5hbGl6ZXJzID0gKF9hID0gdGhpcy5fZmluYWxpemVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIGlmIChfcGFyZW50YWdlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgIF9maW5hbGl6ZXJzICYmIGFyclJlbW92ZShfZmluYWxpemVycywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmaW5hbGl6ZXIpKSB7XG4gICAgICAgIGZpbmFsaXplcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZmluYWxpemVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgdGltZW91dFByb3ZpZGVyID0ge1xuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRUaW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0VGltZW91dC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiZXhwb3J0IHZhciBDT01QTEVURV9OT1RJRklDQVRJT04gPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdDJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpOyB9KSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTm90aWZpY2F0aW9uKGVycm9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHROb3RpZmljYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdOJywgdmFsdWUsIHVuZGVmaW5lZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbnZhciBjb250ZXh0ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvckNvbnRleHQoY2IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgdmFyIGlzUm9vdCA9ICFjb250ZXh0O1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2IoKTtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgdmFyIF9hID0gY29udGV4dCwgZXJyb3JUaHJvd24gPSBfYS5lcnJvclRocm93biwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnIpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgY29udGV4dC5lcnJvciA9IGVycjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckNvbnRleHQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBuZXh0Tm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbiwgQ09NUExFVEVfTk9USUZJQ0FUSU9OIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25GYWN0b3JpZXMnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmltcG9ydCB7IGNhcHR1cmVFcnJvciB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBFTVBUWV9PQlNFUlZFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihlcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVyIH07XG52YXIgX2JpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gX2JpbmQuY2FsbChmbiwgdGhpc0FyZyk7XG59XG52YXIgQ29uc3VtZXJPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5wYXJ0aWFsT2JzZXJ2ZXIgPSBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgfVxuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENvbnN1bWVyT2JzZXJ2ZXI7XG59KCkpO1xudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkgfHwgIW9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgbmV4dDogKG9ic2VydmVyT3JOZXh0ICE9PSBudWxsICYmIG9ic2VydmVyT3JOZXh0ICE9PSB2b2lkIDAgPyBvYnNlcnZlck9yTmV4dCA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUgIT09IG51bGwgJiYgY29tcGxldGUgIT09IHZvaWQgMCA/IGNvbXBsZXRlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzE7XG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiBvYnNlcnZlck9yTmV4dC5uZXh0ICYmIGJpbmQob2JzZXJ2ZXJPck5leHQubmV4dCwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG9ic2VydmVyT3JOZXh0LmVycm9yICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuZXJyb3IsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcik7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuZnVuY3Rpb24gaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgY2FwdHVyZUVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xuICAgIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uICYmIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydCB2YXIgRU1QVFlfT0JTRVJWRVIgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IG5vb3AsXG4gICAgZXJyb3I6IGRlZmF1bHRFcnJvckhhbmRsZXIsXG4gICAgY29tcGxldGU6IG5vb3AsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJleHBvcnQgdmFyIG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIsIFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgb3BlcmF0b3IgPSBfYS5vcGVyYXRvciwgc291cmNlID0gX2Euc291cmNlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3JcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLmNhbGwoc3Vic2NyaWJlciwgc291cmNlKVxuICAgICAgICAgICAgICAgIDogc291cmNlXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU2FmZVN1YnNjcmliZXIoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHJlc29sdmUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5uZXh0KSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXAiLCJpbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBwcm92aWRlZCBcIiArIChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgaW5wdXQgKyBcIidcIikgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBSZWFkYWJsZVN0cmVhbSwgQXJyYXksIEFzeW5jSXRlcmFibGUsIG9yIEl0ZXJhYmxlLlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93VW5vYnNlcnZhYmxlRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcbn1cbmV4cG9ydCB2YXIgaXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwIiwiaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNHZW5lcmF0b3IsIF9fYXdhaXQsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yXzEoKSB7XG4gICAgICAgIHZhciByZWFkZXIsIF9hLCB2YWx1ZSwgZG9uZTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRydWUpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdChyZWFkZXIucmVhZCgpKV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9uZSkgcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHZvaWQgMCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyLCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFs0LCBfX2F3YWl0KHZhbHVlKV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzQsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW1MaWtlKG9iaikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5nZXRSZWFkZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY1ZhbHVlcywgX19hd2FpdGVyLCBfX2dlbmVyYXRvciwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UsIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gaW5uZXJGcm9tKGlucHV0KSB7XG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVByb21pc2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSW50ZXJvcE9ic2VydmFibGUob2JqKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBvYnMgPSBvYmpbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9icy5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21BcnJheUxpa2UoYXJyYXkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGggJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Qcm9taXNlKHByb21pc2UpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIHJlcG9ydFVuaGFuZGxlZEVycm9yKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSXRlcmFibGUoaXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpdGVyYWJsZV8xID0gX192YWx1ZXMoaXRlcmFibGUpLCBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKTsgIWl0ZXJhYmxlXzFfMS5kb25lOyBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmFibGVfMV8xICYmICFpdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBpdGVyYWJsZV8xLnJldHVybikpIF9hLmNhbGwoaXRlcmFibGVfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Bc3luY0l0ZXJhYmxlKGFzeW5jSXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkpO1xufVxuZnVuY3Rpb24gcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIGFzeW5jSXRlcmFibGVfMSwgYXN5bmNJdGVyYWJsZV8xXzE7XG4gICAgdmFyIGVfMiwgX2E7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUsIGVfMl8xO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzAsIDUsIDYsIDExXSk7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jSXRlcmFibGVfMSA9IF9fYXN5bmNWYWx1ZXMoYXN5bmNJdGVyYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCwgYXN5bmNJdGVyYWJsZV8xLm5leHQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSA9IF9iLnNlbnQoKSwgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUpKSByZXR1cm4gWzMsIDRdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFzeW5jSXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFszLCAxXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgZV8yXzEgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFs2LCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xICYmICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGFzeW5jSXRlcmFibGVfMS5yZXR1cm4pKSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfYS5jYWxsKGFzeW5jSXRlcmFibGVfMSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDg7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbm5lckZyb20uanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVTY2hlZHVsZShwYXJlbnRTdWJzY3JpcHRpb24sIHNjaGVkdWxlciwgd29yaywgZGVsYXksIHJlcGVhdCkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIGlmIChyZXBlYXQgPT09IHZvaWQgMCkgeyByZXBlYXQgPSBmYWxzZTsgfVxuICAgIHZhciBzY2hlZHVsZVN1YnNjcmlwdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdvcmsoKTtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZCh0aGlzLnNjaGVkdWxlKG51bGwsIGRlbGF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZVN1YnNjcmlwdGlvbik7XG4gICAgaWYgKCFyZXBlYXQpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlU3Vic2NyaXB0aW9uO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4ZWN1dGVTY2hlZHVsZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlKGluaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQoZnVuY3Rpb24gKGxpZnRlZFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuYWJsZSB0byBsaWZ0IHVua25vd24gT2JzZXJ2YWJsZSB0eXBlJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcbiAgICByZXR1cm4gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKTtcbn1cbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRVbnN1YnNjcmliZSB8fCB0aGlzLnNob3VsZFVuc3Vic2NyaWJlKCkpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgIWNsb3NlZF8xICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvclN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9LCBkZWxheSk7IH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTsgfSwgZGVsYXkpKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVkIH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlZCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSA6IGlubmVyRnJvbShpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vc2NoZWR1bGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlUHJvbWlzZSB9IGZyb20gJy4vc2NoZWR1bGVQcm9taXNlJztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuL3NjaGVkdWxlQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVJdGVyYWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvYnNlcnZlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXJyYXkuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL29ic2VydmVPbic7XG5pbXBvcnQgeyBzdWJzY3JpYmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9zdWJzY3JpYmVPbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gaW5uZXJGcm9tKGlucHV0KS5waXBlKHN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZG9uZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBpdGVyYXRvci5uZXh0KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bmN0aW9uKGl0ZXJhdG9yID09PSBudWxsIHx8IGl0ZXJhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpdGVyYXRvci5yZXR1cm4pICYmIGl0ZXJhdG9yLnJldHVybigpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihpbnB1dCksIHNjaGVkdWxlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5leHBvcnQgZnVuY3Rpb24gZW1wdHkoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikgOiBFTVBUWTtcbn1cbmZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1wdHkuanMubWFwIiwiaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtcHR5JztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2UoY291bnQpIHtcbiAgICByZXR1cm4gY291bnQgPD0gMFxuICAgICAgICA/XG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBFTVBUWTsgfVxuICAgICAgICA6IG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIHNlZW4gPSAwO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCsrc2VlbiA8PSBjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPD0gc2Vlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwIiwiZXhwb3J0IGNvbnN0IHVzZXJzVVJMID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvdXNlcnNcIjtcclxuZXhwb3J0IGNvbnN0IHJlY2VwdGlVUkwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9yZWNlcHRcIjtcclxuZXhwb3J0IGNvbnN0IHZyc3RhX2plbGFVUkw9XCJodHRwOi8vbG9jYWxob3N0OjMwMDAvdnJzdGEtamVsYVwiO1xyXG5leHBvcnQgY29uc3QgbnVtYmVyT2ZUYWtlcyA9IDg7XHJcbmV4cG9ydCBjb25zdCBjaGVja2luZ0ludGVydmFsID0gMzAwMDA7IiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgdGFrZSwgdGFrZUxhc3QsIG1hcCwgdG9BcnJheSwgbWVyZ2VNYXAsIGZpbHRlciB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY2xhc3Nlcy91c2VyXCI7XHJcbmltcG9ydCB7IFZyc3RlSmVsYSB9IGZyb20gXCIuLi9jbGFzc2VzL3Zyc3RlSmVsYVwiO1xyXG5pbXBvcnQgeyBSZWNlcHQgfSBmcm9tIFwiLi4vY2xhc3Nlcy9yZWNlcHRcIjtcclxuaW1wb3J0IHsgcmVjZXB0aVVSTCwgdXNlcnNVUkwsIHZyc3RhX2plbGFVUkwgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwb3N0VXNlcih1c2VyOlVzZXIpIDogT2JzZXJ2YWJsZTxib29sZWFuIHwgdm9pZD57XHJcbiAgICBjb25zb2xlLmxvZyh1c2VyKTtcclxuICAgIGNvbnN0IHJlc3A9ZmV0Y2godXNlcnNVUkwsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOlwiUE9TVFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh1c2VyKVxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuXHJcbiAgICByZXR1cm4gZnJvbShyZXNwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXIoaWQ6bnVtYmVyKSA6IE9ic2VydmFibGU8VXNlcj57XHJcbiAgICBjb25zdCB1c2VyID0gZmV0Y2godXNlcnNVUkwrXCIvXCIraWQse21ldGhvZDpcIkdFVFwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcmVzcG9uc2Uub2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gZnJvbSh1c2VyKS5waXBlKHRha2UoMSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlcldpdGhFbWFpbChlbWFpbDpzdHJpbmcpIDogT2JzZXJ2YWJsZTxVc2VyW10+e1xyXG4gICAgY29uc3QgdXNlciA9IGZldGNoKHVzZXJzVVJMK1wiP2VtYWlsPVwiK2VtYWlsLHttZXRob2Q6XCJHRVRcIn0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2U9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXJlc3BvbnNlLm9rKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZyb20odXNlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQoZW1haWw6c3RyaW5nLHBhc3N3b3JkOnN0cmluZykgOiBPYnNlcnZhYmxlPFVzZXJbXT57XHJcbiAgICBjb25zdCB1c2VyID0gZmV0Y2godXNlcnNVUkwrXCI/ZW1haWw9XCIrZW1haWwrXCImcGFzc3dvcmQ9XCIrcGFzc3dvcmQse21ldGhvZDpcIkdFVFwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcmVzcG9uc2Uub2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gZnJvbSh1c2VyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVVzZXIodXNlciA6IFVzZXIpIDogT2JzZXJ2YWJsZTxib29sZWFuIHwgdm9pZD57XHJcbiAgICBjb25zdCB1c2VyUmVzcCA9IGZldGNoKHVzZXJzVVJMLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6XCJQVVRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXJlc3BvbnNlLm9rKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gZnJvbSh1c2VyUmVzcCk7ICAgICAgICAgICAgICAgICAgXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVVc2VyKGlkOm51bWJlcikgOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCB2b2lkPntcclxuICAgIGNvbnN0IHVzZXJSZXNwID0gZmV0Y2godXNlcnNVUkwrXCIvXCIraWQse21ldGhvZDpcIkRFTEVURVwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcmVzcG9uc2Uub2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcbiAgICBcclxuICAgIHJldHVybiBmcm9tKHVzZXJSZXNwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZyc3RlSmVsYSgpIDogT2JzZXJ2YWJsZTxWcnN0ZUplbGFbXT57XHJcbiAgICBjb25zdCB1c2VyUmVzcCA9IGZldGNoKHZyc3RhX2plbGFVUkwse21ldGhvZDpcIkdFVFwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcmVzcG9uc2Uub2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnI9PmFsZXJ0KGVycikpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gZnJvbSh1c2VyUmVzcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWcnN0ZUplbGFXaXRoSUQoaWQ6bnVtYmVyKSA6IE9ic2VydmFibGU8VnJzdGVKZWxhPntcclxuICAgIGNvbnN0IHVzZXJSZXNwID0gZmV0Y2godnJzdGFfamVsYVVSTCtcIi9cIitpZCx7bWV0aG9kOlwiR0VUXCJ9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGVycj0+YWxlcnQoZXJyKSk7XHJcbiAgICBcclxuICAgIHJldHVybiBmcm9tKHVzZXJSZXNwKS5waXBlKHRha2UoMSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9zdE5ld1JlY2VwdChyZWNlcHQ6UmVjZXB0KSA6IE9ic2VydmFibGU8Ym9vbGVhbiB8IHZvaWQ+e1xyXG4gICAgY29uc3QgcmVzcD1mZXRjaChyZWNlcHRpVVJMLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDpcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVjZXB0KVxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuXHJcbiAgICByZXR1cm4gZnJvbShyZXNwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVJlY2VwdChpZDpudW1iZXIpIDogT2JzZXJ2YWJsZTxib29sZWFuIHwgdm9pZD57XHJcbiAgICBjb25zdCByZXNwID0gZmV0Y2gocmVjZXB0aVVSTCtcIi9cIitpZCx7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOlwiREVMRVRFXCIvKixcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVjZXB0KSovXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlLm9rKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgcmV0dXJuIGZyb20ocmVzcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxSZWNlcHQoKSA6IE9ic2VydmFibGU8UmVjZXB0W10+e1xyXG4gICAgY29uc3QgcmVzcCA9IGZldGNoKHJlY2VwdGlVUkwse21ldGhvZDpcIkdFVFwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcbiAgICByZXR1cm4gZnJvbShyZXNwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlY2VwdEZyb21BdXRvcihhdXRvcl9pZDpudW1iZXIpIDogT2JzZXJ2YWJsZTxSZWNlcHRbXT57XHJcbiAgICBjb25zdCByZXNwID0gZmV0Y2gocmVjZXB0aVVSTCtcIj9hdXRvcj1cIithdXRvcl9pZCx7bWV0aG9kOlwiR0VUXCJ9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlLm9rKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuICAgIHJldHVybiBmcm9tKHJlc3ApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVjZXB0RnJvbVZyc3RhSmVsYSh2cnN0YUplbGFfaWQ6bnVtYmVyKSA6IE9ic2VydmFibGU8UmVjZXB0W10+e1xyXG4gICAgY29uc3QgcmVzcCA9IGZldGNoKHJlY2VwdGlVUkwrXCI/dnJzdGFfamVsYT1cIit2cnN0YUplbGFfaWQse21ldGhvZDpcIkdFVFwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcbiAgICByZXR1cm4gZnJvbShyZXNwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlY2VwdFdpdGhJRChpZDpudW1iZXIpIDogT2JzZXJ2YWJsZTxSZWNlcHQ+e1xyXG4gICAgY29uc3QgcmVzcCA9IGZldGNoKHJlY2VwdGlVUkwrXCIvXCIraWQse21ldGhvZDpcIkdFVFwifSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycj0+Y29uc29sZS5sb2coZXJyKSk7XHJcbiAgICByZXR1cm4gZnJvbShyZXNwKS5waXBlKHRha2UoMSkpO1xyXG59IiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIEVNUFRZX1NVQlNDUklQVElPTiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdGhyb3dJZkNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmN1cnJlbnRPYnNlcnZlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IEFycmF5LmZyb20oX3RoaXMub2JzZXJ2ZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5oYXNFcnJvciA9IF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdWJqZWN0LnByb3RvdHlwZSwgXCJvYnNlcnZlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLm9ic2VydmVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgPiAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3RyeVN1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgdGhpcy5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyhzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyU3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2lubmVyU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkLCBvYnNlcnZlcnMgPSBfYS5vYnNlcnZlcnM7XG4gICAgICAgIGlmIChoYXNFcnJvciB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICAgICAgb2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICAgICAgYXJyUmVtb3ZlKG9ic2VydmVycywgc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQ7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aHJvd25FcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgU3ViamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdDtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgU3ViamVjdCB9O1xudmFyIEFub255bW91c1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmV4dCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHZhbHVlKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlcnIpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogRU1QVFlfU1VCU0NSSVBUSU9OO1xuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEFub255bW91c1N1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBtZXJnZUludGVybmFscyB9IGZyb20gJy4vbWVyZ2VJbnRlcm5hbHMnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIGlmIChpc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIG1hcChmdW5jdGlvbiAoYiwgaWkpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yKGEsIGIsIGksIGlpKTsgfSkoaW5uZXJGcm9tKHByb2plY3QoYSwgaSkpKTsgfSwgY29uY3VycmVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7IHJldHVybiBtZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQpOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwLmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQsIG9uQmVmb3JlTmV4dCwgZXhwYW5kLCBpbm5lclN1YlNjaGVkdWxlciwgYWRkaXRpb25hbEZpbmFsaXplcikge1xuICAgIHZhciBidWZmZXIgPSBbXTtcbiAgICB2YXIgYWN0aXZlID0gMDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc0NvbXBsZXRlICYmICFidWZmZXIubGVuZ3RoICYmICFhY3RpdmUpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIG91dGVyTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKGFjdGl2ZSA8IGNvbmN1cnJlbnQgPyBkb0lubmVyU3ViKHZhbHVlKSA6IGJ1ZmZlci5wdXNoKHZhbHVlKSk7IH07XG4gICAgdmFyIGRvSW5uZXJTdWIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgZXhwYW5kICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIGFjdGl2ZSsrO1xuICAgICAgICB2YXIgaW5uZXJDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICBpbm5lckZyb20ocHJvamVjdCh2YWx1ZSwgaW5kZXgrKykpLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGlubmVyVmFsdWUpIHtcbiAgICAgICAgICAgIG9uQmVmb3JlTmV4dCA9PT0gbnVsbCB8fCBvbkJlZm9yZU5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQmVmb3JlTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIGlmIChleHBhbmQpIHtcbiAgICAgICAgICAgICAgICBvdXRlck5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlubmVyQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpbm5lckNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLS07XG4gICAgICAgICAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlcmVkVmFsdWUgPSBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbm5lclN1YlNjaGVkdWxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBpbm5lclN1YlNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCAmJiBhY3RpdmUgPCBjb25jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG91dGVyTmV4dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgIH0pKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRpdGlvbmFsRmluYWxpemVyID09PSBudWxsIHx8IGFkZGl0aW9uYWxGaW5hbGl6ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxGaW5hbGl6ZXIoKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VJbnRlcm5hbHMuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwiLi4vb3BlcmF0b3JzL21hcFwiO1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gY2FsbE9yQXBwbHkoZm4sIGFyZ3MpIHtcbiAgICByZXR1cm4gaXNBcnJheShhcmdzKSA/IGZuLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSkgOiBmbihhcmdzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXBPbmVPck1hbnlBcmdzKGZuKSB7XG4gICAgcmV0dXJuIG1hcChmdW5jdGlvbiAoYXJncykgeyByZXR1cm4gY2FsbE9yQXBwbHkoZm4sIGFyZ3MpOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcE9uZU9yTWFueUFyZ3MuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBtYXBPbmVPck1hbnlBcmdzIH0gZnJvbSAnLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzJztcbnZhciBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyA9IFsnYWRkTGlzdGVuZXInLCAncmVtb3ZlTGlzdGVuZXInXTtcbnZhciBldmVudFRhcmdldE1ldGhvZHMgPSBbJ2FkZEV2ZW50TGlzdGVuZXInLCAncmVtb3ZlRXZlbnRMaXN0ZW5lciddO1xudmFyIGpxdWVyeU1ldGhvZHMgPSBbJ29uJywgJ29mZiddO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucywgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKS5waXBlKG1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKTtcbiAgICB9XG4gICAgdmFyIF9hID0gX19yZWFkKGlzRXZlbnRUYXJnZXQodGFyZ2V0KVxuICAgICAgICA/IGV2ZW50VGFyZ2V0TWV0aG9kcy5tYXAoZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTsgfTsgfSlcbiAgICAgICAgOlxuICAgICAgICAgICAgaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KVxuICAgICAgICAgICAgICAgID8gbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICA6IGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICA/IGpxdWVyeU1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgOiBbXSwgMiksIGFkZCA9IF9hWzBdLCByZW1vdmUgPSBfYVsxXTtcbiAgICBpZiAoIWFkZCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2UodGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChzdWJUYXJnZXQpIHsgcmV0dXJuIGZyb21FdmVudChzdWJUYXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucyk7IH0pKGlubmVyRnJvbSh0YXJnZXQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFkZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGV2ZW50IHRhcmdldCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5uZXh0KDEgPCBhcmdzLmxlbmd0aCA/IGFyZ3MgOiBhcmdzWzBdKTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkKGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKGhhbmRsZXIpOyB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyKTsgfTsgfTtcbn1cbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlTGlzdGVuZXIpO1xufVxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQub24pICYmIGlzRnVuY3Rpb24odGFyZ2V0Lm9mZik7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG52YXIgQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIGludGVydmFsUHJvdmlkZXIgPSB7XG4gICAgc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0SW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRJbnRlcnZhbC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFySW50ZXJ2YWwpIHx8IGNsZWFySW50ZXJ2YWwpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgeyBpbnRlcnZhbFByb3ZpZGVyIH0gZnJvbSAnLi9pbnRlcnZhbFByb3ZpZGVyJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4uL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBBc3luY0FjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gKF9hID0gdGhpcy5pZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5yZXF1ZXN0QXN5bmNJZChzY2hlZHVsZXIsIHRoaXMuaWQsIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBfaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxQcm92aWRlci5zZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoX3NjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGludGVydmFsUHJvdmlkZXIuY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2V4ZWN1dGluZyBhIGNhbmNlbGxlZCBhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIHRoaXMuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQodGhpcy5zY2hlZHVsZXIsIHRoaXMuaWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIF9kZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9IGUgPyBlIDogbmV3IEVycm9yKCdTY2hlZHVsZWQgYWN0aW9uIHRocmV3IGZhbHN5IGVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLndvcmsgPSB0aGlzLnN0YXRlID0gdGhpcy5zY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcnJSZW1vdmUoYWN0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiZXhwb3J0IHZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB7XG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmRlbGVnYXRlIHx8IERhdGUpLm5vdygpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyJztcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGRhdGVUaW1lc3RhbXBQcm92aWRlci5ub3c7XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgYXN5bmNTY2hlZHVsZXIgPSBuZXcgQXN5bmNTY2hlZHVsZXIoQXN5bmNBY3Rpb24pO1xuZXhwb3J0IHZhciBhc3luYyA9IGFzeW5jU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuLi9TY2hlZHVsZXInO1xudmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBub3cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXN5bmNTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIHZhciBsYXN0VGltZSA9IG51bGw7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gZW1pdFdoZW5JZGxlKCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldFRpbWUgPSBsYXN0VGltZSArIGR1ZVRpbWU7XG4gICAgICAgICAgICB2YXIgbm93ID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgaWYgKG5vdyA8IHRhcmdldFRpbWUpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIHRhcmdldFRpbWUgLSBub3cpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGFjdGl2ZVRhc2spO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgbGFzdFRpbWUgPSBzY2hlZHVsZXIubm93KCk7XG4gICAgICAgICAgICBpZiAoIWFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gc2NoZWR1bGVyLnNjaGVkdWxlKGVtaXRXaGVuSWRsZSwgZHVlVGltZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoYWN0aXZlVGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2VUaW1lLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWwvbm9vcCc7XG5leHBvcnQgZnVuY3Rpb24gdGFrZVVudGlsKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBpbm5lckZyb20obm90aWZpZXIpLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9LCBub29wKSk7XG4gICAgICAgICFzdWJzY3JpYmVyLmNsb3NlZCAmJiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVVudGlsLmpzLm1hcCIsInZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiwgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBnZXRLZXlzID0gT2JqZWN0LmtleXM7XG5leHBvcnQgZnVuY3Rpb24gYXJnc0FyZ0FycmF5T3JPYmplY3QoYXJncykge1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgZmlyc3RfMSA9IGFyZ3NbMF07XG4gICAgICAgIGlmIChpc0FycmF5KGZpcnN0XzEpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBhcmdzOiBmaXJzdF8xLCBrZXlzOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUE9KTyhmaXJzdF8xKSkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRLZXlzKGZpcnN0XzEpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhcmdzOiBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmaXJzdF8xW2tleV07IH0pLFxuICAgICAgICAgICAgICAgIGtleXM6IGtleXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGFyZ3M6IGFyZ3MsIGtleXM6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIGlzUE9KTyhvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIGdldFByb3RvdHlwZU9mKG9iaikgPT09IG9iamVjdFByb3RvO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJnc0FyZ0FycmF5T3JPYmplY3QuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNTY2hlZHVsZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5zY2hlZHVsZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi9pc1NjaGVkdWxlcic7XG5mdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wU2NoZWR1bGVyKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNTY2hlZHVsZXIobGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcE51bWJlcihhcmdzLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGxhc3QoYXJncykgPT09ICdudW1iZXInID8gYXJncy5wb3AoKSA6IGRlZmF1bHRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3MuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXJnc0FyZ0FycmF5T3JPYmplY3QgfSBmcm9tICcuLi91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0JztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xuaW1wb3J0IHsgcG9wUmVzdWx0U2VsZWN0b3IsIHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBjcmVhdGVPYmplY3QgfSBmcm9tICcuLi91dGlsL2NyZWF0ZU9iamVjdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBfYSA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpLCBvYnNlcnZhYmxlcyA9IF9hLmFyZ3MsIGtleXMgPSBfYS5rZXlzO1xuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZyb20oW10sIHNjaGVkdWxlcik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZShjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCBrZXlzXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZXMpIHsgcmV0dXJuIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpOyB9XG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5KSk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0LnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpIDogcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RJbml0KG9ic2VydmFibGVzLCBzY2hlZHVsZXIsIHZhbHVlVHJhbnNmb3JtKSB7XG4gICAgaWYgKHZhbHVlVHJhbnNmb3JtID09PSB2b2lkIDApIHsgdmFsdWVUcmFuc2Zvcm0gPSBpZGVudGl0eTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmUgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nRmlyc3RWYWx1ZXMgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZyb20ob2JzZXJ2YWJsZXNbaV0sIHNjaGVkdWxlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNGaXJzdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0ZpcnN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNGaXJzdFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdGaXJzdFZhbHVlcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1haW5pbmdGaXJzdFZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZVRyYW5zZm9ybSh2YWx1ZXMuc2xpY2UoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSwgc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHN1YnNjcmliZXIpO1xuICAgIH07XG59XG5mdW5jdGlvbiBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZXhlY3V0ZSwgc3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaXB0aW9uLCBzY2hlZHVsZXIsIGV4ZWN1dGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5LCBpKSB7IHJldHVybiAoKHJlc3VsdFtrZXldID0gdmFsdWVzW2ldKSwgcmVzdWx0KTsgfSwge30pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT2JqZWN0LmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNDb21wbGV0ZSAmJiAhaW5uZXJTdWJzY3JpYmVyICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpbm5lclN1YnNjcmliZXIgPT09IG51bGwgfHwgaW5uZXJTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbm5lclN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHZhciBpbm5lckluZGV4ID0gMDtcbiAgICAgICAgICAgIHZhciBvdXRlckluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBvdXRlckluZGV4KSkuc3Vic2NyaWJlKChpbm5lclN1YnNjcmliZXIgPSBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGlubmVyVmFsdWUpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dChyZXN1bHRTZWxlY3RvciA/IHJlc3VsdFNlbGVjdG9yKHZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KyspIDogaW5uZXJWYWx1ZSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbm5lclN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXAuanMubWFwIiwiaW1wb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb25jYXQnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJy4vdGFrZSc7XG5pbXBvcnQgeyBpZ25vcmVFbGVtZW50cyB9IGZyb20gJy4vaWdub3JlRWxlbWVudHMnO1xuaW1wb3J0IHsgbWFwVG8gfSBmcm9tICcuL21hcFRvJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3Rvciwgc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25jYXQoc3Vic2NyaXB0aW9uRGVsYXkucGlwZSh0YWtlKDEpLCBpZ25vcmVFbGVtZW50cygpKSwgc291cmNlLnBpcGUoZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3RvcikpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHsgcmV0dXJuIGlubmVyRnJvbShkZWxheUR1cmF0aW9uU2VsZWN0b3IodmFsdWUsIGluZGV4KSkucGlwZSh0YWtlKDEpLCBtYXBUbyh2YWx1ZSkpOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5V2hlbi5qcy5tYXAiLCJpbXBvcnQgeyBjb25jYXRBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvY29uY2F0QWxsJztcbmltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRBbGwoKShmcm9tKGFyZ3MsIHBvcFNjaGVkdWxlcihhcmdzKSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcCIsImltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4vbWVyZ2VBbGwnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFsbCgpIHtcbiAgICByZXR1cm4gbWVyZ2VBbGwoMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmV4cG9ydCBmdW5jdGlvbiBpZ25vcmVFbGVtZW50cygpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG5vb3ApKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlnbm9yZUVsZW1lbnRzLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmV4cG9ydCBmdW5jdGlvbiBtYXBUbyh2YWx1ZSkge1xuICAgIHJldHVybiBtYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWU7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwVG8uanMubWFwIiwiaW1wb3J0IHsgYXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgZGVsYXlXaGVuIH0gZnJvbSAnLi9kZWxheVdoZW4nO1xuaW1wb3J0IHsgdGltZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlL3RpbWVyJztcbmV4cG9ydCBmdW5jdGlvbiBkZWxheShkdWUsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY1NjaGVkdWxlcjsgfVxuICAgIHZhciBkdXJhdGlvbiA9IHRpbWVyKGR1ZSwgc2NoZWR1bGVyKTtcbiAgICByZXR1cm4gZGVsYXlXaGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGR1cmF0aW9uOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGFzeW5jIGFzIGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5pbXBvcnQgeyBpc1ZhbGlkRGF0ZSB9IGZyb20gJy4uL3V0aWwvaXNEYXRlJztcbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihkdWVUaW1lLCBpbnRlcnZhbE9yU2NoZWR1bGVyLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoZHVlVGltZSA9PT0gdm9pZCAwKSB7IGR1ZVRpbWUgPSAwOyB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jU2NoZWR1bGVyOyB9XG4gICAgdmFyIGludGVydmFsRHVyYXRpb24gPSAtMTtcbiAgICBpZiAoaW50ZXJ2YWxPclNjaGVkdWxlciAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc1NjaGVkdWxlcihpbnRlcnZhbE9yU2NoZWR1bGVyKSkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGludGVydmFsRHVyYXRpb24gPSBpbnRlcnZhbE9yU2NoZWR1bGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZHVlID0gaXNWYWxpZERhdGUoZHVlVGltZSkgPyArZHVlVGltZSAtIHNjaGVkdWxlci5ub3coKSA6IGR1ZVRpbWU7XG4gICAgICAgIGlmIChkdWUgPCAwKSB7XG4gICAgICAgICAgICBkdWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KG4rKyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgPD0gaW50ZXJ2YWxEdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKHVuZGVmaW5lZCwgaW50ZXJ2YWxEdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkdWUpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXIuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWREYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4odmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNEYXRlLmpzLm1hcCIsImV4cG9ydCBjbGFzcyBVc2Vye1xyXG4gICAgaWQ6bnVtYmVyO1xyXG4gICAgbmFtZTpzdHJpbmc7XHJcbiAgICBsYXN0X25hbWU6c3RyaW5nO1xyXG4gICAgZW1haWw6c3RyaW5nO1xyXG4gICAgcGFzc3dvcmQ6c3RyaW5nO1xyXG4gICAgY2l0eTpzdHJpbmc7XHJcbiAgICBiaXJ0aF9kYXRlOnN0cmluZztcclxuICAgIHBpY3R1cmU6c3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlkOm51bWJlcixuYW1lOnN0cmluZyxsYXN0X25hbWU6c3RyaW5nLGVtYWlsOnN0cmluZyxwYXNzd29yZDpzdHJpbmcsY2l0eTpzdHJpbmcsYmlydGhfZGF0ZTpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMuaWQ9aWQ7XHJcbiAgICAgICAgdGhpcy5uYW1lPW5hbWU7XHJcbiAgICAgICAgdGhpcy5sYXN0X25hbWU9bGFzdF9uYW1lO1xyXG4gICAgICAgIHRoaXMuZW1haWw9ZW1haWw7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZD1wYXNzd29yZDtcclxuICAgICAgICB0aGlzLmNpdHk9Y2l0eTtcclxuICAgICAgICB0aGlzLmJpcnRoX2RhdGU9YmlydGhfZGF0ZTtcclxuICAgICAgICB0aGlzLnBpY3R1cmU9bnVsbDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gcHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4KyspICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiLCJpbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4vdXNlclwiO1xyXG5pbXBvcnQgeyBWcnN0ZUplbGEgfSBmcm9tIFwiLi92cnN0ZUplbGFcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBSZWNlcHR7XHJcbiAgICBpZDpudW1iZXI7XHJcbiAgICBuYXppdjpzdHJpbmc7XHJcbiAgICBhdXRvcjpudW1iZXI7XHJcbiAgICB2cnN0YV9qZWxhOm51bWJlcjtcclxuICAgIHNhc3RvamNpOnN0cmluZztcclxuICAgIHByaXByZW1hOnN0cmluZztcclxuICAgIHNsaWthOnN0cmluZztcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLm5heml2PW51bGw7XHJcbiAgICAgICAgdGhpcy5hdXRvcj1udWxsO1xyXG4gICAgICAgIHRoaXMudnJzdGFfamVsYT1udWxsO1xyXG4gICAgICAgIHRoaXMuc2FzdG9qY2k9bnVsbDtcclxuICAgICAgICB0aGlzLnByaXByZW1hPW51bGw7XHJcbiAgICAgICAgdGhpcy5zbGlrYT1udWxsO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgZmlsdGVyLCBmcm9tLCBmcm9tRXZlbnQsIG1hcCwgdGFrZVVudGlsLCBvZiwgc3dpdGNoTWFwLCBkZWJvdW5jZVRpbWUsIGZvcmtKb2luLCBjb21iaW5lTGF0ZXN0LCB6aXAgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBSZWNlcHQgfSBmcm9tIFwiLi4vY2xhc3Nlcy9yZWNlcHRcIjtcclxuaW1wb3J0IHsgcG9zdE5ld1JlY2VwdCB9IGZyb20gXCIuL2RiU2VydmljZXNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGROZXdSZWNlcHQoY29udHJvbCQ6U3ViamVjdDxzdHJpbmc+KXtcclxuXHJcbiAgICBsZXQgcmVjZXB0ID0gbmV3IFJlY2VwdCgpO1xyXG4gICAgY29uc3QgbmFtZSQgPSBhZGROYXppdk9ic2VydmFibGUoY29udHJvbCQpO1xyXG4gICAgY29uc3Qgc2VsZWN0JCA9IGFkZFNlbGVjdE9ic2VydmFibGUoY29udHJvbCQpO1xyXG4gICAgY29uc3QgaW5ncmVkaWVudCQgPSBhZGRTYXN0b2pjaU9ic2VydmFibGUoY29udHJvbCQpO1xyXG4gICAgY29uc3QgcHJpcHJlbWEkID0gYWRkUHJpcHJlbWFPYnNlcnZhYmxlKGNvbnRyb2wkKTtcclxuICAgIGNvbnN0IGltYWdlJCA9IGFkZEltYWdlT2JzZXJ2YWJsZShjb250cm9sJCk7XHJcblxyXG4gICAgY29tYmluZUxhdGVzdChbbmFtZSQsc2VsZWN0JCxpbmdyZWRpZW50JCxwcmlwcmVtYSQsaW1hZ2UkXSlcclxuICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgdGFrZVVudGlsKGNvbnRyb2wkKVxyXG4gICAgICAgIClcclxuICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgaWYobmV4dFswXSE9PScnICYmIG5leHRbMV0hPT0nMCcgJiYgbmV4dFsyXSE9PScnICYmIG5leHRbM10hPT0nJyAmJiBuZXh0WzRdIT09Jycpe1xyXG4gICAgICAgICAgICAgICAgcmVjZXB0Lm5heml2PW5leHRbMF07XHJcbiAgICAgICAgICAgICAgICByZWNlcHQudnJzdGFfamVsYT1wYXJzZUludChuZXh0WzFdKTtcclxuICAgICAgICAgICAgICAgIHJlY2VwdC5zYXN0b2pjaT1uZXh0WzJdO1xyXG4gICAgICAgICAgICAgICAgcmVjZXB0LnByaXByZW1hPW5leHRbM107XHJcbiAgICAgICAgICAgICAgICByZWNlcHQuc2xpa2E9bmV4dFs0XTtcclxuICAgICAgICAgICAgICAgIHJlY2VwdC5hdXRvcj1wYXJzZUludChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiY3VycmVudC11c2VyLWlkXCIpKTtcclxuICAgICAgICAgICAgICAgIGxldCBidG4gPSA8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1dHRvbkRvZGFqUmVjZXB0XCIpO1xyXG4gICAgICAgICAgICAgICAgYnRuLmRpc2FibGVkPWZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBhbGVydChcIk1vcmF0ZSB1bmV0aSBzdmUgcG9kYXRrZS4uLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZyb21FdmVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1dHRvbkRvZGFqUmVjZXB0XCIpLFwiY2xpY2tcIilcclxuICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKCgpPT5wb3N0TmV3UmVjZXB0KHJlY2VwdCkpXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5zdWJzY3JpYmUobmV4dD0+e1xyXG4gICAgICAgICAgICBpZihuZXh0PT09dHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICBhbGVydChcIkRvZGFsaSBzdGUgbm92aSByZWNlcHQuXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKTtcclxuICAgICAgICAgICAgICAgIGxldCB0eHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwidGV4dGFyZWFcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW1nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImltZ1wiKTtcclxuICAgICAgICAgICAgICAgIGltZy5zcmM9XCJcIjtcclxuICAgICAgICAgICAgICAgIGlucHV0cy5mb3JFYWNoKHg9PngudmFsdWU9XCJcIik7XHJcbiAgICAgICAgICAgICAgICB0eHQudmFsdWU9XCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJEb3NsbyBqZSBkbyBncmVza2UscG9rdXNhanRlIHBvbm92by5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkSW1hZ2VPYnNlcnZhYmxlKGNvbnRyb2wkOlN1YmplY3Q8c3RyaW5nPikgOiBPYnNlcnZhYmxlPHN0cmluZz57XHJcbiAgICByZXR1cm4gZnJvbUV2ZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2xpa2FSZWNlcHRcIiksXCJpbnB1dFwiKVxyXG4gICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICBtYXAoKGV2ZW50OiBJbnB1dEV2ZW50KSA9PiAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS5maWxlc1swXSksXHJcbiAgICAgICAgICAgIHN3aXRjaE1hcChmaWxlPT5pbWFnZVJlYWRlcihmaWxlLGNvbnRyb2wkKSksXHJcbiAgICAgICAgICAgIHRha2VVbnRpbChjb250cm9sJClcclxuICAgICAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW1hZ2VSZWFkZXIoZmlsZTpGaWxlLGNvbnRyb2wkOlN1YmplY3Q8c3RyaW5nPikgOiBPYnNlcnZhYmxlPHN0cmluZz57XHJcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICByZXR1cm4gZnJvbUV2ZW50KHJlYWRlcixcImxvYWRcIilcclxuICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICBtYXAoZXZlbnQ9PntcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcmMgPSA8c3RyaW5nPig8RmlsZVJlYWRlcj5ldmVudC50YXJnZXQpLnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICBzZXRJbWFnZVByZXZpZXcoc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3JjO1xyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwoY29udHJvbCQpXHJcbiAgICAgICAgICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRJbWFnZVByZXZpZXcoZmlsZVVSSTpzdHJpbmcpe1xyXG4gICAgY29uc3QgcHJldmlldyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XHJcbiAgICBwcmV2aWV3LnNyYz1maWxlVVJJO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkTmF6aXZPYnNlcnZhYmxlKGNvbnRyb2wkOlN1YmplY3Q8c3RyaW5nPikgOiBPYnNlcnZhYmxlPHN0cmluZz5cclxue1xyXG4gICAgcmV0dXJuIGZyb21FdmVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25vdmlSZWNlcHROYW1lXCIpLFwiaW5wdXRcIikucGlwZShcclxuICAgICAgICBkZWJvdW5jZVRpbWUoMjAwKSxcclxuICAgICAgICBtYXAoKGV2ZW50OiBJbnB1dEV2ZW50KSA9PiAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS52YWx1ZSksXHJcbiAgICAgICAgdGFrZVVudGlsKGNvbnRyb2wkKVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFNlbGVjdE9ic2VydmFibGUoY29udHJvbCQ6U3ViamVjdDxzdHJpbmc+KSA6IE9ic2VydmFibGU8c3RyaW5nPlxyXG57XHJcbiAgICByZXR1cm4gZnJvbUV2ZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzZWxlY3RcIiksXCJjaGFuZ2VcIikucGlwZShcclxuICAgICAgICBtYXAoKGV2ZW50OiBJbnB1dEV2ZW50KSA9PiAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS52YWx1ZSksXHJcbiAgICAgICAgZmlsdGVyKHZhbHVlPT5wYXJzZUludCh2YWx1ZSk+MCksXHJcbiAgICAgICAgdGFrZVVudGlsKGNvbnRyb2wkKVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFNhc3RvamNpT2JzZXJ2YWJsZShjb250cm9sJDpTdWJqZWN0PHN0cmluZz4pIDogT2JzZXJ2YWJsZTxzdHJpbmc+XHJcbntcclxuICAgIHJldHVybiBmcm9tRXZlbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNub3ZpUmVjZXB0U2FzdG9qY2lcIiksXCJpbnB1dFwiKS5waXBlKFxyXG4gICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxyXG4gICAgICAgIG1hcCgoZXZlbnQ6IElucHV0RXZlbnQpID0+ICg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLnZhbHVlKSxcclxuICAgICAgICB0YWtlVW50aWwoY29udHJvbCQpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkUHJpcHJlbWFPYnNlcnZhYmxlKGNvbnRyb2wkOlN1YmplY3Q8c3RyaW5nPikgOiBPYnNlcnZhYmxlPHN0cmluZz5cclxue1xyXG4gICAgcmV0dXJuIGZyb21FdmVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25vdmlSZWNlcHRQcmlwcmVtYVwiKSxcImlucHV0XCIpLnBpcGUoXHJcbiAgICAgICAgZGVib3VuY2VUaW1lKDIwMCksXHJcbiAgICAgICAgbWFwKChldmVudDogSW5wdXRFdmVudCkgPT4gKDxIVE1MSW5wdXRFbGVtZW50PmV2ZW50LnRhcmdldCkudmFsdWUpLFxyXG4gICAgICAgIHRha2VVbnRpbChjb250cm9sJClcclxuICAgICk7XHJcbn0iLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IHNjYW5JbnRlcm5hbHMgfSBmcm9tICcuL3NjYW5JbnRlcm5hbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW4oYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShzY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBhcmd1bWVudHMubGVuZ3RoID49IDIsIHRydWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW4uanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW5JbnRlcm5hbHMoYWNjdW11bGF0b3IsIHNlZWQsIGhhc1NlZWQsIGVtaXRPbk5leHQsIGVtaXRCZWZvcmVDb21wbGV0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNTdGF0ZSA9IGhhc1NlZWQ7XG4gICAgICAgIHZhciBzdGF0ZSA9IHNlZWQ7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGkgPSBpbmRleCsrO1xuICAgICAgICAgICAgc3RhdGUgPSBoYXNTdGF0ZVxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3Ioc3RhdGUsIHZhbHVlLCBpKVxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgKChoYXNTdGF0ZSA9IHRydWUpLCB2YWx1ZSk7XG4gICAgICAgICAgICBlbWl0T25OZXh0ICYmIHN1YnNjcmliZXIubmV4dChzdGF0ZSk7XG4gICAgICAgIH0sIGVtaXRCZWZvcmVDb21wbGV0ZSAmJlxuICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBoYXNTdGF0ZSAmJiBzdWJzY3JpYmVyLm5leHQoc3RhdGUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW5JbnRlcm5hbHMuanMubWFwIiwidmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuZXhwb3J0IGZ1bmN0aW9uIGFyZ3NPckFyZ0FycmF5KGFyZ3MpIHtcbiAgICByZXR1cm4gYXJncy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShhcmdzWzBdKSA/IGFyZ3NbMF0gOiBhcmdzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJnc09yQXJnQXJyYXkuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBhcmdzT3JBcmdBcnJheSB9IGZyb20gJy4uL3V0aWwvYXJnc09yQXJnQXJyYXknO1xuaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuL2VtcHR5JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4uL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgcG9wUmVzdWx0U2VsZWN0b3IgfSBmcm9tICcuLi91dGlsL2FyZ3MnO1xuZXhwb3J0IGZ1bmN0aW9uIHppcCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gcG9wUmVzdWx0U2VsZWN0b3IoYXJncyk7XG4gICAgdmFyIHNvdXJjZXMgPSBhcmdzT3JBcmdBcnJheShhcmdzKTtcbiAgICByZXR1cm4gc291cmNlcy5sZW5ndGhcbiAgICAgICAgPyBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlcnMgPSBzb3VyY2VzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSk7XG4gICAgICAgICAgICB2YXIgY29tcGxldGVkID0gc291cmNlcy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0pO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMgPSBjb21wbGV0ZWQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChzb3VyY2VJbmRleCkge1xuICAgICAgICAgICAgICAgIGlubmVyRnJvbShzb3VyY2VzW3NvdXJjZUluZGV4XSkuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyc1tzb3VyY2VJbmRleF0ucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJzLmV2ZXJ5KGZ1bmN0aW9uIChidWZmZXIpIHsgcmV0dXJuIGJ1ZmZlci5sZW5ndGg7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYnVmZmVycy5tYXAoZnVuY3Rpb24gKGJ1ZmZlcikgeyByZXR1cm4gYnVmZmVyLnNoaWZ0KCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQocmVzdWx0KSkpIDogcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJzLnNvbWUoZnVuY3Rpb24gKGJ1ZmZlciwgaSkgeyByZXR1cm4gIWJ1ZmZlci5sZW5ndGggJiYgY29tcGxldGVkW2ldOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkW3NvdXJjZUluZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICFidWZmZXJzW3NvdXJjZUluZGV4XS5sZW5ndGggJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBzb3VyY2VJbmRleCA9IDA7ICFzdWJzY3JpYmVyLmNsb3NlZCAmJiBzb3VyY2VJbmRleCA8IHNvdXJjZXMubGVuZ3RoOyBzb3VyY2VJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgX2xvb3BfMShzb3VyY2VJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMgPSBjb21wbGV0ZWQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgICAgOiBFTVBUWTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcC5qcy5tYXAiLCJleHBvcnQgY2xhc3MgVnJzdGVKZWxhe1xyXG4gICAgaWQ6bnVtYmVyO1xyXG4gICAgbmFtZTpzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoaWQ6bnVtYmVyLG5hbWU6c3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pZD1pZDtcclxuICAgICAgICB0aGlzLm5hbWU9bmFtZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IGZyb21FdmVudCwgbWFwLCBzd2l0Y2hNYXAsIHNjYW4sIHRha2UsIE9ic2VydmFibGUsemlwLCBmcm9tLCBTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCB0YWtlVW50aWwsIGZvcmtKb2luLCBkZWxheSwgZmlsdGVyLCBkZWJvdW5jZVRpbWUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBudW1iZXJPZlRha2VzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IGdldEFsbFJlY2VwdCwgZ2V0UmVjZXB0RnJvbVZyc3RhSmVsYSwgZ2V0UmVjZXB0V2l0aElELCBnZXRVc2VyLCBnZXRWcnN0ZUplbGEsIGdldFZyc3RlSmVsYVdpdGhJRCB9IGZyb20gXCIuL2RiU2VydmljZXNcIjtcclxuaW1wb3J0IHsgUmVjZXB0IH0gZnJvbSBcIi4uL2NsYXNzZXMvcmVjZXB0XCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY2xhc3Nlcy91c2VyXCI7XHJcbmltcG9ydCB7IFZyc3RlSmVsYSB9IGZyb20gXCIuLi9jbGFzc2VzL3Zyc3RlSmVsYVwiO1xyXG5pbXBvcnQgeyBkcmF3UmVjZXB0UGFnZSwgZHJhd1NlYXJjaFJlY2VwdCB9IGZyb20gXCIuL2RyYXdGdW5jdGlvbnNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB2aWV3UmVjZXB0KCl7XHJcbiAgICBcclxuICAgIGxldCBwYXJlbnRfbm9kZSA9IDxIVE1MRWxlbWVudD4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIik7XHJcblxyXG4gICAgbGV0IGRpdlJlY2VwdFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZSZWNlcHRQYXJlbnQuY2xhc3NMaXN0LmFkZChcImRpdlJlY2VwdERyYXdQYXJlbnRcIik7XHJcbiAgICBwYXJlbnRfbm9kZS5hcHBlbmRDaGlsZChkaXZSZWNlcHRQYXJlbnQpO1xyXG4gICAgXHJcbiAgICBsZXQgZGl2UmVjZXB0TW9yZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZSZWNlcHRNb3JlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJkaXZSZWNlcHRNb3JlQnV0dG9uXCIpO1xyXG5cclxuICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgYnV0dG9uLmlkPVwiYnV0dG9uUHJpa2F6aUpvc1wiO1xyXG4gICAgYnV0dG9uLmlubmVySFRNTD1cIlByaWthemkgam9zXCI7XHJcbiAgICBkaXZSZWNlcHRNb3JlQnV0dG9uLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICBwYXJlbnRfbm9kZS5hcHBlbmRDaGlsZChkaXZSZWNlcHRNb3JlQnV0dG9uKTtcclxuXHJcbiAgICBhZGRGaXJzdFJlY2VwdChkaXZSZWNlcHRQYXJlbnQpO1xyXG5cclxuICAgIGNvbnN0IGNsaWNrJCA9IGZyb21FdmVudChidXR0b24sXCJjbGlja1wiKTtcclxuXHJcbiAgICBjb25zdCB0YWtpbmdWYWx1ZSQgPSBjbGljayQucGlwZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAoKCk9Pm51bWJlck9mVGFrZXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYW4oKGFjYyxjdXJyZW50KT0+YWNjK2N1cnJlbnQsbnVtYmVyT2ZUYWtlcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgIGNvbnN0IHJlY2VwdCQgPSBjbGljayQucGlwZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKT0+Z2V0QWxsUmVjZXB0KCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgIHppcChbdGFraW5nVmFsdWUkLHJlY2VwdCRdKVxyXG4gICAgICAgIC5zdWJzY3JpYmUobmV4dD0+e1xyXG4gICAgICAgICAgICByZW1vdmVDaGlsZHJlbihkaXZSZWNlcHRQYXJlbnQsZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5kaXZSZWNlcHRcIikpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG5peiA9IG5leHRbMV0ucmV2ZXJzZSgpLnNsaWNlKDAsbmV4dFswXSk7XHJcbiAgICAgICAgICAgIG5pei5mb3JFYWNoKHg9PntcclxuICAgICAgICAgICAgICAgIGRyYXdSZWNlcHRlKGRpdlJlY2VwdFBhcmVudCx4LnNsaWthLHgubmF6aXYseC5pZCx4LmF1dG9yLHgudnJzdGFfamVsYSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNoaWxkcmVuKHBhcmVudDpOb2RlLGNoaWxkOk5vZGVMaXN0T2Y8RWxlbWVudD4pe1xyXG4gICAgaWYoY2hpbGQhPT1udWxsKXtcclxuICAgICAgICBjaGlsZC5mb3JFYWNoKHg9PntcclxuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRGaXJzdFJlY2VwdChwYXJlbnQ6SFRNTEVsZW1lbnQpe1xyXG4gICAgZ2V0QWxsUmVjZXB0KClcclxuICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgbmV4dC5yZXZlcnNlKCkuc2xpY2UoMCxudW1iZXJPZlRha2VzKS5mb3JFYWNoKHg9PntcclxuICAgICAgICAgICAgICAgIGRyYXdSZWNlcHRlKHBhcmVudCx4LnNsaWthLHgubmF6aXYseC5pZCx4LmF1dG9yLHgudnJzdGFfamVsYSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3UmVjZXB0ZShwYXJlbnRfbm9kZTpIVE1MRWxlbWVudCxzbGlrYVNyYzpzdHJpbmcsbmF6aXZSZWNlcHRhOnN0cmluZyxpZF92YWx1ZTpudW1iZXIsaWRfYXV0b3I6bnVtYmVyLGlkX3Zyc3RhSmVsYTpudW1iZXIpIDogdm9pZHtcclxuXHJcbiAgICBsZXQgZGl2UmVjZXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlJlY2VwdC5jbGFzc0xpc3QuYWRkKFwiZGl2UmVjZXB0XCIpO1xyXG5cclxuICAgIGxldCBkaXZSZWNlcHRTbGlrYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZSZWNlcHRTbGlrYS5jbGFzc0xpc3QuYWRkKFwiZGl2UmVjZXB0U2xpa2FcIik7XHJcbiAgICBsZXQgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgaW1hZ2Uuc3JjPXNsaWthU3JjO1xyXG4gICAgaW1hZ2UuYWx0PVwiSW1hZ2VcIjtcclxuICAgIGRpdlJlY2VwdFNsaWthLmFwcGVuZENoaWxkKGltYWdlKTtcclxuICAgIGRpdlJlY2VwdC5hcHBlbmRDaGlsZChkaXZSZWNlcHRTbGlrYSk7XHJcblxyXG4gICAgbGV0IGRpdlJlY2VwdE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2UmVjZXB0TmFtZS5jbGFzc0xpc3QuYWRkKFwiZGl2UmVjZXB0TmFtZVwiKTtcclxuICAgIGxldCBsYWJlbE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbE5hbWUuY2xhc3NMaXN0LmFkZChcImRpdlJlY2VwdExhYmVsTmFtZVwiKTtcclxuICAgIGxhYmVsTmFtZS5pbm5lckhUTUw9bmF6aXZSZWNlcHRhO1xyXG4gICAgZGl2UmVjZXB0TmFtZS5hcHBlbmRDaGlsZChsYWJlbE5hbWUpO1xyXG4gICAgZGl2UmVjZXB0LmFwcGVuZENoaWxkKGRpdlJlY2VwdE5hbWUpO1xyXG5cclxuICAgIGxldCBsb2NhbF9yZWNlcHQgPSBuZXcgUmVjZXB0KCk7XHJcbiAgICBsZXQgbG9jYWxfYXV0b3IgPSBuZXcgVXNlcihudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsKTtcclxuICAgIGxldCBsb2NhbF92cnN0YUplbGEgPSBuZXcgVnJzdGVKZWxhKG51bGwsbnVsbCk7XHJcblxyXG4gICAgY29uc3QgcmVjZXB0JCA9IGdldE9ic2VydmFibGVGcm9tUmVjZXB0Q2xpY2soZGl2UmVjZXB0KVxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKT0+Z2V0UmVjZXB0V2l0aElEKGlkX3ZhbHVlKSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICBjb25zdCBhdXRvciQgPSBnZXRPYnNlcnZhYmxlRnJvbVJlY2VwdENsaWNrKGRpdlJlY2VwdClcclxuICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKCk9PmdldFVzZXIoaWRfYXV0b3IpKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgY29uc3QgdnJzdGVKZWxhJCA9IGdldE9ic2VydmFibGVGcm9tUmVjZXB0Q2xpY2soZGl2UmVjZXB0KVxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKT0+Z2V0VnJzdGVKZWxhV2l0aElEKGlkX3Zyc3RhSmVsYSkpXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgemlwKFtyZWNlcHQkLGF1dG9yJCx2cnN0ZUplbGEkXSlcclxuICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgbG9jYWxfcmVjZXB0PW5leHRbMF07XHJcbiAgICAgICAgICAgIGxvY2FsX2F1dG9yPW5leHRbMV07XHJcbiAgICAgICAgICAgIGxvY2FsX3Zyc3RhSmVsYT1uZXh0WzJdO1xyXG4gICAgICAgICAgICBkcmF3UmVjZXB0UGFnZShsb2NhbF9yZWNlcHQsbG9jYWxfYXV0b3IsbG9jYWxfdnJzdGFKZWxhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICBwYXJlbnRfbm9kZS5hcHBlbmRDaGlsZChkaXZSZWNlcHQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkT2JzZXJ2YWJsZVRvVnJzdGVSZWNlcHRhKGxpbmtfZWxlbWVudDpIVE1MRWxlbWVudCxldmVudDpzdHJpbmcsaWRfdmFsdWU6bnVtYmVyKSA6IHZvaWR7XHJcbiAgICBmcm9tRXZlbnQobGlua19lbGVtZW50LGV2ZW50KVxyXG4gICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKCk9PmdldFJlY2VwdEZyb21WcnN0YUplbGEoaWRfdmFsdWUpKVxyXG4gICAgICAgIClcclxuICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIiksZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5taWRkbGUgPiBkaXZcIikpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGRpdlJlY2VwdEZyb21WcnN0YUplbGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBkaXZSZWNlcHRGcm9tVnJzdGFKZWxhLmNsYXNzTGlzdC5hZGQoXCJkaXZSZWNlcHRGcm9tVnJzdGFKZWxhXCIpO1xyXG4gICAgICAgICAgICBuZXh0LmZvckVhY2goZWw9PntcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVsKTtcclxuICAgICAgICAgICAgICAgIGRyYXdSZWNlcHRlKGRpdlJlY2VwdEZyb21WcnN0YUplbGEsZWwuc2xpa2EsZWwubmF6aXYsZWwuaWQsZWwuYXV0b3IsZWwudnJzdGFfamVsYSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1pZGRsZVwiKS5hcHBlbmRDaGlsZChkaXZSZWNlcHRGcm9tVnJzdGFKZWxhKTtcclxuICAgICAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRPYnNlcnZhYmxlRnJvbVJlY2VwdENsaWNrKGVsZW1lbnQ6SFRNTEVsZW1lbnQpIDogT2JzZXJ2YWJsZTxhbnk+e1xyXG4gICAgcmV0dXJuIGZyb21FdmVudChlbGVtZW50LFwiY2xpY2tcIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVTZWFyY2hCYXIoKXtcclxuICAgIGxldCBsaW5rID0gPEhUTUxMaW5rRWxlbWVudD4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFbaHJlZj0nI3NlYXJjaC1pbnB1dCddXCIpO1xyXG4gICAgbGluay5vbmNsaWNrPSgpPT57XHJcbiAgICAgICAgbGV0IGRpdiA9IDxIVE1MRGl2RWxlbWVudD4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2gtYmFyLWRyb3Bkb3duLXNob3dcIik7XHJcbiAgICAgICAgZGl2LmNsYXNzTGlzdC50b2dnbGUoXCJoaWRlRGlzcGxheVwiKTtcclxuICAgICAgICByZW1vdmVTZWFyY2hCYXJSZWNlcHRzKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoaWRlU2VhcmNoQmFyKCl7XHJcbiAgICBsZXQgZGl2ID0gPEhUTUxEaXZFbGVtZW50PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NlYXJjaC1iYXItZHJvcGRvd24tc2hvd1wiKTtcclxuICAgIGRpdi5jbGFzc0xpc3QudG9nZ2xlKFwiaGlkZURpc3BsYXlcIix0cnVlKTtcclxuICAgIHJlbW92ZVNlYXJjaEJhclJlY2VwdHMoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZE9ic2VydmFibGVGb3JTZWFyY2goKSB7XHJcbiAgICBmcm9tRXZlbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNoZWFkZXItc2VhcmNoLWlucHV0XCIpLFwiaW5wdXRcIilcclxuICAgICAgICAgICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoZXZlbnQ6IElucHV0RXZlbnQpID0+ICg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLnZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIodGV4dD0+dGV4dC5sZW5ndGg+PTMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCh2YWx1ZT0+Z2V0QWxsUmVjZXB0KCkucGlwZShtYXAoYXJyYXk9PmFycmF5LmZpbHRlcih4PT54Lm5heml2LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModmFsdWUpKSkpKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShuZXh0PT57XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2VhcmNoLWJhci1kcm9wZG93bi1zaG93XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVNlYXJjaEJhclJlY2VwdHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0LmZvckVhY2gocmVjcGV0PT5kcmF3U2VhcmNoUmVjZXB0KHBhcmVudCxyZWNwZXQpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlU2VhcmNoQmFyUmVjZXB0cygpe1xyXG4gICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2VhcmNoLWJhci1kcm9wZG93bi1zaG93XCIpO1xyXG4gICAgbGV0IGNoaWxkcmVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5kaXZTZWFyY2hTaW5nbGVSZWNlcHRcIik7XHJcbiAgICBpZihjaGlsZHJlbi5sZW5ndGg+MCl7XHJcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChjaGlsZD0+cGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKSk7XHJcbiAgICB9IFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkT2JzZXJ2YWJsZVRvU2VhcmNoQ2xpY2soZWxlbWVudDpIVE1MRWxlbWVudCxyZWNlcHQ6UmVjZXB0KSA6IHZvaWR7XHJcbiAgICBsZXQgbG9jYWxfcmVjZXB0ID0gbmV3IFJlY2VwdCgpO1xyXG4gICAgbGV0IGxvY2FsX2F1dG9yID0gbmV3IFVzZXIobnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCk7XHJcbiAgICBsZXQgbG9jYWxfdnJzdGFKZWxhID0gbmV3IFZyc3RlSmVsYShudWxsLG51bGwpO1xyXG5cclxuICAgIGNvbnN0IGV2ZW50Q2xpY2skID0gZnJvbUV2ZW50KGVsZW1lbnQsXCJjbGlja1wiKTtcclxuICAgIGNvbnN0IHJlY2VwdCQgPSBldmVudENsaWNrJFxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKT0+Z2V0UmVjZXB0V2l0aElEKHJlY2VwdC5pZCkpXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgY29uc3QgYXV0b3IkID0gZXZlbnRDbGljayRcclxuICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKCk9PmdldFVzZXIocmVjZXB0LmF1dG9yKSlcclxuICAgICAgICAgICAgKTtcclxuICAgIGNvbnN0IHZyc3RlSmVsYSQgPSBldmVudENsaWNrJFxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKT0+Z2V0VnJzdGVKZWxhV2l0aElEKHJlY2VwdC52cnN0YV9qZWxhKSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICB6aXAoW3JlY2VwdCQsYXV0b3IkLHZyc3RlSmVsYSRdKVxyXG4gICAgICAgIC5zdWJzY3JpYmUobmV4dD0+e1xyXG4gICAgICAgICAgICBsb2NhbF9yZWNlcHQ9bmV4dFswXTtcclxuICAgICAgICAgICAgbG9jYWxfYXV0b3I9bmV4dFsxXTtcclxuICAgICAgICAgICAgbG9jYWxfdnJzdGFKZWxhPW5leHRbMl07XHJcbiAgICAgICAgICAgIGRyYXdSZWNlcHRQYWdlKGxvY2FsX3JlY2VwdCxsb2NhbF9hdXRvcixsb2NhbF92cnN0YUplbGEpO1xyXG4gICAgICAgIH0pO1xyXG59IiwiaW1wb3J0IHsgZnJvbUV2ZW50LCBzd2l0Y2hNYXAsIHppcCB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGdldFJlY2VwdEZyb21BdXRvciwgZ2V0VXNlciB9IGZyb20gXCIuL2RiU2VydmljZXNcIjtcclxuaW1wb3J0IHsgZHJhd1VzZXJQcm9maWxlIH0gZnJvbSBcIi4vZHJhd0Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQgeyBkcmF3UmVjZXB0ZSwgcmVtb3ZlQ2hpbGRyZW4gfSBmcm9tIFwiLi9wb2NldG5hRXZlbnRzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmlld1VzZXJQcm9maWxlKHVzZXJfaWQ6bnVtYmVyLGV2ZW50OkhUTUxFbGVtZW50KSA6IHZvaWR7XHJcbiAgICBjb25zdCB1c2VyJCA9IGZyb21FdmVudChldmVudCxcImNsaWNrXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKT0+Z2V0VXNlcih1c2VyX2lkKSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgY29uc3QgcmVjZXB0JCA9IGZyb21FdmVudChldmVudCxcImNsaWNrXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKT0+Z2V0UmVjZXB0RnJvbUF1dG9yKHVzZXJfaWQpKVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICBcclxuICAgIGNvbnN0IHVzZXIgPSB6aXAoW3VzZXIkLHJlY2VwdCRdKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUobmV4dD0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDaGlsZHJlbihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1pZGRsZVwiKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1pZGRsZSA+IGRpdlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1c2VyVmFsdWUgPSBuZXh0WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXNlclJlY2VwdGkgPSBuZXh0WzFdLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpdlJlY2VwdERyYXcgPSBkcmF3VXNlclByb2ZpbGUodXNlclZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlclJlY2VwdGkuZm9yRWFjaCh4PT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmF3UmVjZXB0ZShkaXZSZWNlcHREcmF3LHguc2xpa2EseC5uYXppdix4LmlkLHVzZXJWYWx1ZS5pZCx4LnZyc3RhX2plbGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG5cclxufSIsImltcG9ydCB7IGdldFVzZXJXaXRoRW1haWwsIGdldFVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCwgZ2V0VnJzdGVKZWxhLCBwb3N0VXNlciB9IGZyb20gXCIuL2RiU2VydmljZXNcIjtcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9jbGFzc2VzL3VzZXJcIjtcclxuaW1wb3J0IHsgZmlsdGVyLFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBzZXRVcExvZ2luIH0gZnJvbSBcIi4vbG9naW5FdmVudHNcIjtcclxuaW1wb3J0IHsgc2V0VXBTaWduaW4gfSBmcm9tIFwiLi9zaWdudXBFdmVudHNcIjtcclxuaW1wb3J0IHsgYWRkT2JzZXJ2YWJsZVRvU2VhcmNoQ2xpY2ssIGFkZE9ic2VydmFibGVUb1Zyc3RlUmVjZXB0YSwgcmVtb3ZlQ2hpbGRyZW4gfSBmcm9tIFwiLi9wb2NldG5hRXZlbnRzXCI7XHJcbmltcG9ydCB7IFJlY2VwdCB9IGZyb20gXCIuLi9jbGFzc2VzL3JlY2VwdFwiO1xyXG5pbXBvcnQgeyBWcnN0ZUplbGEgfSBmcm9tIFwiLi4vY2xhc3Nlcy92cnN0ZUplbGFcIjtcclxuaW1wb3J0IHsgdmlld1VzZXJQcm9maWxlIH0gZnJvbSBcIi4vcHJvZmlsRXZlbnRzXCI7XHJcblxyXG5mdW5jdGlvbiBhZGRMaW5rVG9DbGFzc0VsZW1lbnQoY2xhc3NfZWxlbWVudDpzdHJpbmcsaHJlZjpzdHJpbmcsY2xhc3NfbmFtZTpzdHJpbmcsdGV4dDpzdHJpbmcsaWRfdmFsdWU6bnVtYmVyPTApIDogdm9pZHtcclxuICAgIGNvbnN0IGxpbms9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICBsaW5rLmhyZWY9aHJlZjtcclxuICAgIGxpbmsuY2xhc3NMaXN0LmFkZChjbGFzc19uYW1lKTtcclxuICAgIGxpbmsuaW5uZXJIVE1MPXRleHQ7XHJcblxyXG4gICAgaWYoY2xhc3NfbmFtZT09PVwiZHJvcGRvd24tY29udGVudC1saW5rc1wiKXtcclxuICAgICAgICBhZGRPYnNlcnZhYmxlVG9WcnN0ZVJlY2VwdGEobGluayxcImNsaWNrXCIsaWRfdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNsYXNzX2VsZW1lbnQpO1xyXG4gICAgaWYobGluayE9PW51bGwgJiYgZWxlbWVudCE9PW51bGwpe1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobGluayk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUxpbmtGcm9tQ2xhc3NFbGVtZW50KGNsYXNzX2VsZW1lbnQ6c3RyaW5nLGxpbmtfaHJlZjpzdHJpbmcpIDogdm9pZHtcclxuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYVtocmVmPSdcIitsaW5rX2hyZWYrXCInXVwiKTtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNsYXNzX2VsZW1lbnQpO1xyXG4gICAgaWYobGluayE9PW51bGwgJiYgZWxlbWVudCE9PW51bGwpe1xyXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQobGluayk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZXJGaWx0ZXIoKXtcclxuICAgIGxldCBjdXJyZW50VXNlciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJjdXJyZW50LXVzZXJcIik7XHJcbiAgICBsZXQgY3VycmVudFVzZXJJRCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJjdXJyZW50LXVzZXItaWRcIik7XHJcblxyXG4gICAgaWYoY3VycmVudFVzZXIhPT1udWxsKXtcclxuICAgICAgICBhZGRMaW5rVG9DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjbm92aS1yZWNlcHRcIixcImhlYWRlci1pdGVtXCIsXCJOT1ZJIFJFQ0VQVFwiKTtcclxuICAgICAgICBhZGRMaW5rVG9DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjcHJvZmlsXCIsXCJoZWFkZXItaXRlbVwiLFwiUFJPRklMXCIpO1xyXG4gICAgICAgIGFkZExpbmtUb0NsYXNzRWxlbWVudChcIi5oZWFkZXJcIixcIiNvZGphdmktc2VcIixcImhlYWRlci1pdGVtXCIsXCJPREpBVkkgU0VcIik7XHJcbiAgICAgICAgcmVtb3ZlTGlua0Zyb21DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjcHJpamF2aS1zZVwiKTtcclxuICAgICAgICByZW1vdmVMaW5rRnJvbUNsYXNzRWxlbWVudChcIi5oZWFkZXJcIixcIiNrcmVpcmFqLW5hbG9nXCIpO1xyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICBhZGRMaW5rVG9DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjcHJpamF2aS1zZVwiLFwiaGVhZGVyLWl0ZW1cIixcIlBSSUpBVkkgU0VcIik7XHJcbiAgICAgICAgYWRkTGlua1RvQ2xhc3NFbGVtZW50KFwiLmhlYWRlclwiLFwiI2tyZWlyYWotbmFsb2dcIixcImhlYWRlci1pdGVtXCIsXCJLUkVJUkFKIE5BTE9HXCIpO1xyXG4gICAgICAgIHJlbW92ZUxpbmtGcm9tQ2xhc3NFbGVtZW50KFwiLmhlYWRlclwiLFwiI3Byb2ZpbFwiKTtcclxuICAgICAgICByZW1vdmVMaW5rRnJvbUNsYXNzRWxlbWVudChcIi5oZWFkZXJcIixcIiNvZGphdmktc2VcIik7XHJcbiAgICAgICAgcmVtb3ZlTGlua0Zyb21DbGFzc0VsZW1lbnQoXCIuaGVhZGVyXCIsXCIjbm92aS1yZWNlcHRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qga3JlaXJhal9uYWxvZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNrcmVpcmFqLW5hbG9nJ11cIik7XHJcbiAgICBjb25zdCBjb250cm9sJCA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcclxuICAgIGlmKGtyZWlyYWpfbmFsb2chPT1udWxsKXtcclxuXHJcbiAgICAgICAga3JlaXJhal9uYWxvZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e1xyXG4gICAgICAgICAgICByZW1vdmVDaGlsZHJlbihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1pZGRsZVwiKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1pZGRsZSA+IGRpdlwiKSk7XHJcbiAgICAgICAgICAgIGRyYXdTaWdudXAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIikpO1xyXG4gICAgICAgICAgICBzZXRVcFNpZ25pbihjb250cm9sJCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcHJpamF2aV9zZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNwcmlqYXZpLXNlJ11cIik7XHJcbiAgICBjb25zdCBsb2dpbiQgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XHJcbiAgICBpZihwcmlqYXZpX3NlIT09bnVsbCl7XHJcblxyXG4gICAgICAgIHByaWphdmlfc2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntcclxuICAgICAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIiksZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5taWRkbGUgPiBkaXZcIikpO1xyXG4gICAgICAgICAgICBkcmF3TG9naW4oZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIikpO1xyXG4gICAgICAgICAgICBzZXRVcExvZ2luKGxvZ2luJCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb2RqYXZpX3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFbaHJlZj0nI29kamF2aS1zZSddXCIpO1xyXG4gICAgaWYob2RqYXZpX3NlIT09bnVsbCl7XHJcblxyXG4gICAgICAgIG9kamF2aV9zZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e1xyXG4gICAgICAgICAgICByZW1vdmVDaGlsZHJlbihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1pZGRsZVwiKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1pZGRsZSA+IGRpdlwiKSk7XHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJjdXJyZW50LXVzZXJcIik7XHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJjdXJyZW50LXVzZXItaWRcIik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJvZmlsID0gPEhUTUxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNwcm9maWwnXVwiKTtcclxuICAgIGlmKHByb2ZpbCE9PW51bGwpe1xyXG4gICAgICAgIHZpZXdVc2VyUHJvZmlsZShwYXJzZUludChjdXJyZW50VXNlcklEKSxwcm9maWwpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd1NpZ251cChwYXJlbnRfbm9kZTpIVE1MRWxlbWVudCl7XHJcbiAgICBjb25zdCBkaXZTaWdudXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2U2lnbnVwLmNsYXNzTGlzdC5hZGQoXCJkaXZTaWdudXBcIik7XHJcblxyXG4gICAgLy9kaXZTaWdudXAgbGFiZWxlXHJcbiAgICBjb25zdCBkaXZTaWdudXBMYWJlbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2U2lnbnVwTGFiZWxzLmNsYXNzTGlzdC5hZGQoXCJkaXZTaWdudXBMYWJlbHNcIik7XHJcblxyXG4gICAgbGV0IG5hbWVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIG5hbWVMYWJlbC5pbm5lckhUTUw9XCJJbWU6XCI7XHJcbiAgICBkaXZTaWdudXBMYWJlbHMuYXBwZW5kQ2hpbGQobmFtZUxhYmVsKTtcclxuXHJcbiAgICBsZXQgbG5hbWVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxuYW1lTGFiZWwuaW5uZXJIVE1MPVwiUHJlemltZTpcIjtcclxuICAgIGRpdlNpZ251cExhYmVscy5hcHBlbmRDaGlsZChsbmFtZUxhYmVsKTtcclxuXHJcbiAgICBsZXQgZW1haWxMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGVtYWlsTGFiZWwuaW5uZXJIVE1MPVwiRS1tYWlsOlwiO1xyXG4gICAgZGl2U2lnbnVwTGFiZWxzLmFwcGVuZENoaWxkKGVtYWlsTGFiZWwpO1xyXG5cclxuICAgIGxldCBwYXNzd29yZExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgcGFzc3dvcmRMYWJlbC5pbm5lckhUTUw9XCJMb3ppbmthOlwiO1xyXG4gICAgZGl2U2lnbnVwTGFiZWxzLmFwcGVuZENoaWxkKHBhc3N3b3JkTGFiZWwpO1xyXG5cclxuICAgIGxldCBjaXR5TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBjaXR5TGFiZWwuaW5uZXJIVE1MPVwiR3JhZDpcIjtcclxuICAgIGRpdlNpZ251cExhYmVscy5hcHBlbmRDaGlsZChjaXR5TGFiZWwpO1xyXG5cclxuICAgIGxldCBkYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBkYXRlTGFiZWwuaW5uZXJIVE1MPVwiRGF0dW0gcm9kamVuamE6XCI7XHJcbiAgICBkaXZTaWdudXBMYWJlbHMuYXBwZW5kQ2hpbGQoZGF0ZUxhYmVsKTtcclxuXHJcbiAgICBsZXQgc2xpa2FMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIHNsaWthTGFiZWwuaW5uZXJIVE1MPVwiRGF0dW0gcm9kamVuamE6XCI7XHJcbiAgICBkaXZTaWdudXBMYWJlbHMuYXBwZW5kQ2hpbGQoc2xpa2FMYWJlbCk7XHJcblxyXG4gICAgZGl2U2lnbnVwLmFwcGVuZENoaWxkKGRpdlNpZ251cExhYmVscyk7XHJcblxyXG4gICAgLy9kaXZTaWdudXAgaW5wdXRzXHJcblxyXG4gICAgbGV0IGRpdlNpZ251cElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNpZ251cElucHV0LmNsYXNzTGlzdC5hZGQoXCJkaXZTaWdudXBJbnB1dFwiKTtcclxuXHJcbiAgICBsZXQgbmFtZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgbmFtZUlucHV0LmlkPVwic2lnbnVwLW5hbWVcIjtcclxuICAgIG5hbWVJbnB1dC50eXBlID0gXCJuYW1lXCI7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5hcHBlbmRDaGlsZChuYW1lSW5wdXQpO1xyXG5cclxuICAgIGxldCBsbmFtZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgbG5hbWVJbnB1dC5pZD1cInNpZ251cC1sYXN0bmFtZVwiO1xyXG4gICAgbG5hbWVJbnB1dC50eXBlID0gXCJuYW1lXCI7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5hcHBlbmRDaGlsZChsbmFtZUlucHV0KTtcclxuXHJcbiAgICBsZXQgZW1haWxJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGVtYWlsSW5wdXQuaWQ9XCJzaWdudXAtZW1haWxcIjtcclxuICAgIGVtYWlsSW5wdXQudHlwZSA9IFwiZW1haWxcIjtcclxuICAgIGRpdlNpZ251cElucHV0LmFwcGVuZENoaWxkKGVtYWlsSW5wdXQpO1xyXG5cclxuICAgIGxldCBwYXNzd29yZElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgcGFzc3dvcmRJbnB1dC5pZD1cInNpZ251cC1wYXNzd29yZFwiO1xyXG4gICAgcGFzc3dvcmRJbnB1dC50eXBlID0gXCJwYXNzd29yZFwiO1xyXG4gICAgZGl2U2lnbnVwSW5wdXQuYXBwZW5kQ2hpbGQocGFzc3dvcmRJbnB1dCk7XHJcblxyXG4gICAgbGV0IGNpdHlJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGNpdHlJbnB1dC5pZD1cInNpZ251cC1jaXR5XCI7XHJcbiAgICBjaXR5SW5wdXQudHlwZSA9IFwibmFtZVwiO1xyXG4gICAgZGl2U2lnbnVwSW5wdXQuYXBwZW5kQ2hpbGQoY2l0eUlucHV0KTtcclxuXHJcbiAgICBsZXQgZGF0ZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgZGF0ZUlucHV0LmlkPVwic2lnbnVwLWRhdGVcIjtcclxuICAgIGRhdGVJbnB1dC50eXBlID0gXCJkYXRlXCI7XHJcbiAgICBkaXZTaWdudXBJbnB1dC5hcHBlbmRDaGlsZChkYXRlSW5wdXQpO1xyXG5cclxuICAgIGxldCBzbGlrYUZpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBzbGlrYUZpbGUuaWQ9XCJzaWdudXAtaW1hZ2VcIjtcclxuICAgIHNsaWthRmlsZS50eXBlPVwiZmlsZVwiO1xyXG4gICAgZGl2U2lnbnVwSW5wdXQuYXBwZW5kQ2hpbGQoc2xpa2FGaWxlKTtcclxuXHJcbiAgICBkaXZTaWdudXAuYXBwZW5kQ2hpbGQoZGl2U2lnbnVwSW5wdXQpO1xyXG5cclxuICAgIHBhcmVudF9ub2RlLmFwcGVuZENoaWxkKGRpdlNpZ251cCk7XHJcblxyXG4gICAgbGV0IGRpdlNsaWthUHJldml3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNsaWthUHJldml3LmNsYXNzTGlzdC5hZGQoXCJkaXZTbGlrYVByZXZpd1wiKTtcclxuXHJcbiAgICBsZXQgc2xpa2FQcmV2aWV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgIHNsaWthUHJldmlldy5hbHQ9XCJJbWFnZSBwcmV2aWV3XCI7XHJcbiAgICBzbGlrYVByZXZpZXcud2lkdGg9MTUwO1xyXG4gICAgc2xpa2FQcmV2aWV3LmhlaWdodD0xNTA7XHJcbiAgICBkaXZTbGlrYVByZXZpdy5hcHBlbmRDaGlsZChzbGlrYVByZXZpZXcpO1xyXG4gICAgcGFyZW50X25vZGUuYXBwZW5kQ2hpbGQoZGl2U2xpa2FQcmV2aXcpO1xyXG5cclxuICAgIGxldCBkaXZTaWdudXBCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2U2lnbnVwQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJkaXZTaWdudXBCdXR0b25cIik7XHJcblxyXG4gICAgLy9vZHZvaml0aSB1IGxvZ2luRXZlbnRzLnRzIGkgZG9kYXRpIGV2ZW50IG5hIGJ1dHRvblxyXG4gICAgbGV0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZChcInNpZ251cEJ1dHRvblwiKTtcclxuICAgIGJ1dHRvbi5pbm5lckhUTUw9XCJLcmVpcmFqXCI7XHJcbiAgICBkaXZTaWdudXBCdXR0b24uYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuXHJcbiAgICBwYXJlbnRfbm9kZS5hcHBlbmRDaGlsZChkaXZTaWdudXBCdXR0b24pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0xvZ2luKHBhcmVudF9ub2RlOkhUTUxFbGVtZW50KXtcclxuXHJcbiAgICBsZXQgZGl2TG9naW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2TG9naW4uY2xhc3NMaXN0LmFkZChcImRpdkxvZ2luXCIpO1xyXG4gICAgXHJcbiAgICAvL2xvZ2luIGxhYmVsc1xyXG4gICAgbGV0IGRpdkxvZ2luTGFiZWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdkxvZ2luTGFiZWxzLmNsYXNzTGlzdC5hZGQoXCJkaXZMb2dpbkxhYmVsc1wiKTtcclxuXHJcbiAgICBsZXQgZW1haWxMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGVtYWlsTGFiZWwuaW5uZXJIVE1MPVwiRS1tYWlsOlwiO1xyXG4gICAgZGl2TG9naW5MYWJlbHMuYXBwZW5kQ2hpbGQoZW1haWxMYWJlbCk7XHJcblxyXG4gICAgbGV0IHBhc3N3b3JkTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBwYXNzd29yZExhYmVsLmlubmVySFRNTD1cIlBhc3N3b3JkOlwiO1xyXG4gICAgZGl2TG9naW5MYWJlbHMuYXBwZW5kQ2hpbGQocGFzc3dvcmRMYWJlbCk7XHJcblxyXG4gICAgZGl2TG9naW4uYXBwZW5kQ2hpbGQoZGl2TG9naW5MYWJlbHMpO1xyXG5cclxuICAgIC8vbG9naW4gaW5wdXRzXHJcblxyXG4gICAgbGV0IGRpdkxvZ2luSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2TG9naW5JbnB1dC5jbGFzc0xpc3QuYWRkKFwiZGl2TG9naW5JbnB1dFwiKTtcclxuXHJcbiAgICBsZXQgZW1haWxJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGVtYWlsSW5wdXQuaWQ9XCJ1c2VyRW1haWxcIjtcclxuICAgIGVtYWlsSW5wdXQudHlwZSA9IFwiZW1haWxcIjtcclxuICAgIGRpdkxvZ2luSW5wdXQuYXBwZW5kQ2hpbGQoZW1haWxJbnB1dCk7XHJcblxyXG4gICAgbGV0IHBhc3N3b3JkSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBwYXNzd29yZElucHV0LmlkPVwidXNlclBhc3NcIjtcclxuICAgIHBhc3N3b3JkSW5wdXQudHlwZSA9IFwicGFzc3dvcmRcIjtcclxuICAgIGRpdkxvZ2luSW5wdXQuYXBwZW5kQ2hpbGQocGFzc3dvcmRJbnB1dCk7XHJcblxyXG4gICAgZGl2TG9naW4uYXBwZW5kQ2hpbGQoZGl2TG9naW5JbnB1dCk7XHJcblxyXG4gICAgcGFyZW50X25vZGUuYXBwZW5kQ2hpbGQoZGl2TG9naW4pO1xyXG5cclxuICAgIGxldCBkaXZMb2dpbkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZMb2dpbkJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZGl2TG9naW5CdXR0b25cIik7XHJcblxyXG4gICAgbGV0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICBidXR0b24uaWQ9XCJidG5Mb2dpblwiO1xyXG4gICAgYnV0dG9uLmlubmVySFRNTD1cIlVsb2d1aiBzZVwiO1xyXG4gICAgZGl2TG9naW5CdXR0b24uYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuXHJcbiAgICBwYXJlbnRfbm9kZS5hcHBlbmRDaGlsZChkaXZMb2dpbkJ1dHRvbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3RHJvcGRvd25MaXN0KCkgOiB2b2lke1xyXG4gICAgZ2V0VnJzdGVKZWxhKCkuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICBuZXh0LmZvckVhY2godmFsdWU9PntcclxuICAgICAgICAgICAgYWRkTGlua1RvQ2xhc3NFbGVtZW50KFwiLmRyb3Bkb3duLWNvbnRlbnRcIixcIiNcIit2YWx1ZS5uYW1lLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCIgXCIpLnJlZHVjZSgoYWNjLGN1cnIpPT5hY2MrY3VyciksXCJkcm9wZG93bi1jb250ZW50LWxpbmtzXCIsdmFsdWUubmFtZSx2YWx1ZS5pZCk7XHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3Tm92aVJlY2VwdChwYXJlbnRfbm9kZTpIVE1MRWxlbWVudCkgOiB2b2lke1xyXG4gICAgbGV0IGRpdlJlY2VwdFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZSZWNlcHRQYXJlbnQuY2xhc3NMaXN0LmFkZChcImRpdlJlY2VwdFBhcmVudFwiKTtcclxuXHJcbiAgICBsZXQgZGl2TmF6aXZSZWNlcHRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdk5heml2UmVjZXB0YS5jbGFzc0xpc3QuYWRkKFwiZGl2TmF6aXZSZWNlcHRhXCIpO1xyXG5cclxuICAgIGxldCBsYWJlbE5heml2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWxOYXppdi5pbm5lckhUTUw9XCJOYXppdjpcIjtcclxuICAgIGRpdk5heml2UmVjZXB0YS5hcHBlbmRDaGlsZChsYWJlbE5heml2KTtcclxuXHJcbiAgICBsZXQgaW5wdXROYXppdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGlucHV0TmF6aXYudHlwZT1cIm5hbWVcIjtcclxuICAgIGlucHV0TmF6aXYuaWQ9XCJub3ZpUmVjZXB0TmFtZVwiO1xyXG4gICAgZGl2TmF6aXZSZWNlcHRhLmFwcGVuZENoaWxkKGlucHV0TmF6aXYpO1xyXG5cclxuICAgIGRpdlJlY2VwdFBhcmVudC5hcHBlbmRDaGlsZChkaXZOYXppdlJlY2VwdGEpO1xyXG5cclxuICAgIGxldCBkaXZWcnN0YUplbGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2VnJzdGFKZWxhLmNsYXNzTGlzdC5hZGQoXCJkaXZWcnN0YUplbGFcIik7XHJcblxyXG4gICAgbGV0IGxhYmVsVnJzdGFKZWxhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWxWcnN0YUplbGEuaW5uZXJIVE1MPVwiVnJzdGEgamVsYTpcIjtcclxuICAgIGRpdlZyc3RhSmVsYS5hcHBlbmRDaGlsZChsYWJlbFZyc3RhSmVsYSk7XHJcblxyXG4gICAgbGV0IHNlbGVjdFZyc3RhSmVsYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XHJcbiAgICBzZWxlY3RWcnN0YUplbGEuY2xhc3NMaXN0LmFkZChcImRpdlZyc3RhSmVsYVNlbGVjdFwiKTtcclxuICAgIGxldCBzZWxlY3RPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgc2VsZWN0T3B0aW9uLmlubmVySFRNTD1cIlwiO1xyXG4gICAgc2VsZWN0T3B0aW9uLnZhbHVlPVwiMFwiO1xyXG4gICAgc2VsZWN0VnJzdGFKZWxhLmFwcGVuZENoaWxkKHNlbGVjdE9wdGlvbik7XHJcbiAgICBnZXRWcnN0ZUplbGEoKS5zdWJzY3JpYmUobmV4dD0+e1xyXG4gICAgICAgIG5leHQuZm9yRWFjaCh4PT57XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3RPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgICAgICAgICBzZWxlY3RPcHRpb24uaW5uZXJIVE1MPXgubmFtZTtcclxuICAgICAgICAgICAgc2VsZWN0T3B0aW9uLnZhbHVlPXguaWQudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgc2VsZWN0VnJzdGFKZWxhLmFwcGVuZENoaWxkKHNlbGVjdE9wdGlvbik7XHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG4gICAgZGl2VnJzdGFKZWxhLmFwcGVuZENoaWxkKHNlbGVjdFZyc3RhSmVsYSk7XHJcbiAgICBkaXZSZWNlcHRQYXJlbnQuYXBwZW5kQ2hpbGQoZGl2VnJzdGFKZWxhKTtcclxuXHJcbiAgICBsZXQgZGl2U2FzdG9qY2kgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2U2FzdG9qY2kuY2xhc3NMaXN0LmFkZChcImRpdlNhc3RvamNpXCIpO1xyXG5cclxuICAgIGxldCBsYWJlbFNhc3RvamNpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWxTYXN0b2pjaS5pbm5lckhUTUw9XCJTYXN0b2pjaTpcIjtcclxuICAgIGRpdlNhc3RvamNpLmFwcGVuZENoaWxkKGxhYmVsU2FzdG9qY2kpO1xyXG5cclxuICAgIGxldCBpbnB1dFNhc3RvamNpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgaW5wdXRTYXN0b2pjaS50eXBlPVwidGV4dFwiO1xyXG4gICAgaW5wdXRTYXN0b2pjaS5pZD1cIm5vdmlSZWNlcHRTYXN0b2pjaVwiO1xyXG4gICAgZGl2U2FzdG9qY2kuYXBwZW5kQ2hpbGQoaW5wdXRTYXN0b2pjaSk7XHJcbiAgICBkaXZSZWNlcHRQYXJlbnQuYXBwZW5kQ2hpbGQoZGl2U2FzdG9qY2kpO1xyXG5cclxuICAgIGxldCBkaXZQcmlwcmVtYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZQcmlwcmVtYS5jbGFzc0xpc3QuYWRkKFwiZGl2UHJpcHJlbWFcIik7XHJcblxyXG4gICAgbGV0IGxhYmVsUHJpcHJlbWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbFByaXByZW1hLmlubmVySFRNTD1cIlByaXByZW1hOlwiO1xyXG4gICAgZGl2UHJpcHJlbWEuYXBwZW5kQ2hpbGQobGFiZWxQcmlwcmVtYSk7XHJcblxyXG4gICAgbGV0IGlucHV0UHJpcHJlbWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XHJcbiAgICBpbnB1dFByaXByZW1hLmlkPVwibm92aVJlY2VwdFByaXByZW1hXCI7XHJcbiAgICBpbnB1dFByaXByZW1hLmNvbHM9MzA7XHJcbiAgICBpbnB1dFByaXByZW1hLnJvd3M9MTU7XHJcbiAgICBkaXZQcmlwcmVtYS5hcHBlbmRDaGlsZChpbnB1dFByaXByZW1hKTtcclxuICAgIGRpdlJlY2VwdFBhcmVudC5hcHBlbmRDaGlsZChkaXZQcmlwcmVtYSk7XHJcblxyXG4gICAgbGV0IGRpdlNsaWthID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNsaWthLmNsYXNzTGlzdC5hZGQoXCJkaXZTbGlrYVwiKTtcclxuXHJcbiAgICBsZXQgbGFiZWxTbGlrYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsU2xpa2EuaW5uZXJIVE1MPVwiRG9kYWogc2xpa3VcIjtcclxuICAgIGRpdlNsaWthLmFwcGVuZENoaWxkKGxhYmVsU2xpa2EpO1xyXG4gICAgXHJcbiAgICBsZXQgc2xpa2FGaWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgc2xpa2FGaWxlLmlkPVwic2xpa2FSZWNlcHRcIjtcclxuICAgIHNsaWthRmlsZS50eXBlPVwiZmlsZVwiO1xyXG4gICAgZGl2U2xpa2EuYXBwZW5kQ2hpbGQoc2xpa2FGaWxlKTtcclxuXHJcbiAgICBsZXQgc2xpa2FQcmV2aWV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgIHNsaWthUHJldmlldy5hbHQ9XCJJbWFnZSBwcmV2aWV3XCI7XHJcbiAgICBzbGlrYVByZXZpZXcud2lkdGg9MTUwO1xyXG4gICAgc2xpa2FQcmV2aWV3LmhlaWdodD0xNTA7XHJcbiAgICBkaXZTbGlrYS5hcHBlbmRDaGlsZChzbGlrYVByZXZpZXcpO1xyXG4gICAgZGl2UmVjZXB0UGFyZW50LmFwcGVuZENoaWxkKGRpdlNsaWthKTtcclxuXHJcbiAgICBsZXQgZGl2QnV0dG9uRG9kYWpSZWNlcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2QnV0dG9uRG9kYWpSZWNlcHQuY2xhc3NMaXN0LmFkZChcImRpdkJ1dHRvbkRvZGFqUmVjZXB0XCIpO1xyXG5cclxuICAgIGxldCBidG5Eb2RhalJlY2VwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICBidG5Eb2RhalJlY2VwdC5pbm5lckhUTUw9XCJEb2RhalwiO1xyXG4gICAgYnRuRG9kYWpSZWNlcHQuY2xhc3NMaXN0LmFkZChcImJ1dHRvbkRvZGFqUmVjZXB0XCIpO1xyXG4gICAgYnRuRG9kYWpSZWNlcHQuZGlzYWJsZWQ9dHJ1ZTtcclxuICAgIGRpdkJ1dHRvbkRvZGFqUmVjZXB0LmFwcGVuZENoaWxkKGJ0bkRvZGFqUmVjZXB0KTtcclxuICAgIGRpdlJlY2VwdFBhcmVudC5hcHBlbmRDaGlsZChkaXZCdXR0b25Eb2RhalJlY2VwdCk7XHJcblxyXG4gICAgcGFyZW50X25vZGUuYXBwZW5kQ2hpbGQoZGl2UmVjZXB0UGFyZW50KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdSZWNlcHRQYWdlKHJlY2VwdDpSZWNlcHQsYXV0b3I6VXNlcix2cnN0YV9qZWxhOlZyc3RlSmVsYSkgOiB2b2lke1xyXG4gICAgcmVtb3ZlQ2hpbGRyZW4oZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIiksZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5taWRkbGUgPiBkaXZcIikpO1xyXG4gICAgbGV0IGRpdlJlY2VwdFBhZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2UmVjZXB0UGFnZS5jbGFzc0xpc3QuYWRkKFwiZGl2UmVjZXB0UGFnZVwiKTtcclxuXHJcbiAgICBsZXQgZGl2UmVjZXB0UGFnZVNsaWthID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlJlY2VwdFBhZ2VTbGlrYS5jbGFzc0xpc3QuYWRkKFwiZGl2UmVjZXB0UGFnZVNsaWthXCIpO1xyXG5cclxuICAgIGxldCByZWNlcHRTbGlrYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICByZWNlcHRTbGlrYS5hbHQgPSBcIlJlY2VwdCBpbWFnZS5cIjtcclxuICAgIHJlY2VwdFNsaWthLnNyYyA9IHJlY2VwdC5zbGlrYTtcclxuXHJcbiAgICBkaXZSZWNlcHRQYWdlU2xpa2EuYXBwZW5kQ2hpbGQocmVjZXB0U2xpa2EpO1xyXG4gICAgZGl2UmVjZXB0UGFnZS5hcHBlbmRDaGlsZChkaXZSZWNlcHRQYWdlU2xpa2EpO1xyXG5cclxuICAgIGxldCBkaXZSZWNlcHRQYWdlSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZSZWNlcHRQYWdlSW5mby5jbGFzc0xpc3QuYWRkKFwiZGl2UmVjZXB0UGFnZUluZm9cIik7XHJcblxyXG4gICAgLy9uYXppdiByZWNlcHRhXHJcbiAgICBsZXQgZGl2UmVjZXBQYWdlTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZSZWNlcFBhZ2VOYW1lLmNsYXNzTGlzdC5hZGQoXCJkaXZSZWNlcHRQYWdlTmFtZVwiKTtcclxuICAgIGxldCBsYWJlbG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbG5hbWUuY2xhc3NMaXN0LmFkZChcIm1haW4tbGFiZWxcIik7XHJcbiAgICBsYWJlbG5hbWUuaW5uZXJIVE1MPVwiTmF6aXYgcmVjZXB0YTogXCI7XHJcbiAgICBkaXZSZWNlcFBhZ2VOYW1lLmFwcGVuZENoaWxkKGxhYmVsbmFtZSk7XHJcblxyXG4gICAgbGV0IGxhYmVsbmFtZVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWxuYW1lVmFsdWUuaW5uZXJIVE1MPXJlY2VwdC5uYXppdjtcclxuICAgIGRpdlJlY2VwUGFnZU5hbWUuYXBwZW5kQ2hpbGQobGFiZWxuYW1lVmFsdWUpO1xyXG4gICAgZGl2UmVjZXB0UGFnZUluZm8uYXBwZW5kQ2hpbGQoZGl2UmVjZXBQYWdlTmFtZSk7XHJcblxyXG4gICAgLy9pbWUgYXV0b3JhXHJcbiAgICBsZXQgZGl2UmVjZXBQYWdlQXV0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2UmVjZXBQYWdlQXV0b3IuY2xhc3NMaXN0LmFkZChcImRpdlJlY2VwdFBhZ2VBdXRvclwiKTtcclxuICAgIGxldCBsYWJlbGF1dG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWxhdXRvci5pbm5lckhUTUw9XCJJbWUgYXV0b3JhOiBcIjtcclxuICAgIGxhYmVsYXV0b3IuY2xhc3NMaXN0LmFkZChcIm1haW4tbGFiZWxcIik7XHJcbiAgICBkaXZSZWNlcFBhZ2VBdXRvci5hcHBlbmRDaGlsZChsYWJlbGF1dG9yKTtcclxuXHJcbiAgICBsZXQgbGlua2F1dG9yVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgIGxpbmthdXRvclZhbHVlLmhyZWY9XCIjYXV0cm8tbGlua1wiO1xyXG4gICAgdmlld1VzZXJQcm9maWxlKGF1dG9yLmlkLGxpbmthdXRvclZhbHVlKTtcclxuICAgIGxpbmthdXRvclZhbHVlLmlubmVySFRNTD1hdXRvci5uYW1lK1wiIFwiK2F1dG9yLmxhc3RfbmFtZTtcclxuICAgIGRpdlJlY2VwUGFnZUF1dG9yLmFwcGVuZENoaWxkKGxpbmthdXRvclZhbHVlKTtcclxuICAgIGRpdlJlY2VwdFBhZ2VJbmZvLmFwcGVuZENoaWxkKGRpdlJlY2VwUGFnZUF1dG9yKTtcclxuXHJcbiAgICBsZXQgZGl2UmVjZXBQYWdlVnJzdGFKZWxhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlJlY2VwUGFnZVZyc3RhSmVsYS5jbGFzc0xpc3QuYWRkKFwiZGl2UmVjZXBQYWdlVnJzdGFKZWxhXCIpO1xyXG4gICAgbGV0IGxhYmVsdnJzdGFKZWxhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWx2cnN0YUplbGEuY2xhc3NMaXN0LmFkZChcIm1haW4tbGFiZWxcIik7XHJcbiAgICBsYWJlbHZyc3RhSmVsYS5pbm5lckhUTUw9XCJWcnN0YSBqZWxhOiBcIjtcclxuICAgIGRpdlJlY2VwUGFnZVZyc3RhSmVsYS5hcHBlbmRDaGlsZChsYWJlbHZyc3RhSmVsYSk7XHJcblxyXG4gICAgbGV0IGxhYmVsdnJzdGFKZWxhVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbHZyc3RhSmVsYVZhbHVlLmlubmVySFRNTD12cnN0YV9qZWxhLm5hbWU7XHJcbiAgICBkaXZSZWNlcFBhZ2VWcnN0YUplbGEuYXBwZW5kQ2hpbGQobGFiZWx2cnN0YUplbGFWYWx1ZSk7XHJcbiAgICBkaXZSZWNlcHRQYWdlSW5mby5hcHBlbmRDaGlsZChkaXZSZWNlcFBhZ2VWcnN0YUplbGEpO1xyXG5cclxuICAgIGxldCBkaXZSZWNlcFBhZ2VTYXN0b2pjaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZSZWNlcFBhZ2VTYXN0b2pjaS5jbGFzc0xpc3QuYWRkKFwiZGl2UmVjZXBQYWdlU2FzdG9qY2lcIik7XHJcbiAgICBsZXQgbGFiZWxTYXN0b2pjaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsU2FzdG9qY2kuY2xhc3NMaXN0LmFkZChcIm1haW4tbGFiZWxcIik7XHJcbiAgICBsYWJlbFNhc3RvamNpLmlubmVySFRNTD1cIlNhc3RvamNpOiBcIjtcclxuICAgIGRpdlJlY2VwUGFnZVNhc3RvamNpLmFwcGVuZENoaWxkKGxhYmVsU2FzdG9qY2kpO1xyXG5cclxuICAgIGxldCBsYWJlbFNhc3RvamNpVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbFNhc3RvamNpVmFsdWUuaW5uZXJIVE1MPXJlY2VwdC5zYXN0b2pjaTtcclxuICAgIGRpdlJlY2VwUGFnZVNhc3RvamNpLmFwcGVuZENoaWxkKGxhYmVsU2FzdG9qY2lWYWx1ZSk7XHJcbiAgICBkaXZSZWNlcHRQYWdlSW5mby5hcHBlbmRDaGlsZChkaXZSZWNlcFBhZ2VTYXN0b2pjaSk7XHJcblxyXG4gICAgbGV0IGRpdlJlY2VwUGFnZVByaXByZW1hID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlJlY2VwUGFnZVByaXByZW1hLmNsYXNzTGlzdC5hZGQoXCJkaXZSZWNlcFBhZ2VQcmlwcmVtYVwiKTtcclxuICAgIGxldCBsYWJlbFByaXByZW1hID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWxQcmlwcmVtYS5jbGFzc0xpc3QuYWRkKFwibWFpbi1sYWJlbFwiKTtcclxuICAgIGxhYmVsUHJpcHJlbWEuaW5uZXJIVE1MPVwiUHJpcHJlbWE6IFwiO1xyXG4gICAgZGl2UmVjZXBQYWdlUHJpcHJlbWEuYXBwZW5kQ2hpbGQobGFiZWxQcmlwcmVtYSk7XHJcblxyXG4gICAgbGV0IGRpdlByaXByZW1hTGFiZWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlByaXByZW1hTGFiZWxzLmNsYXNzTGlzdC5hZGQoXCJkaXZQcmlwcmVtYUxhYmVsc1wiKTtcclxuICAgIHJlY2VwdC5wcmlwcmVtYS5zcGxpdChcIlxcblwiKS5mb3JFYWNoKHZhbHVlPT57XHJcbiAgICAgICAgbGV0IHByaXByZW1hTGFiZWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgICAgIHByaXByZW1hTGFiZWwuaW5uZXJIVE1MPXZhbHVlO1xyXG4gICAgICAgIGRpdlByaXByZW1hTGFiZWxzLmFwcGVuZENoaWxkKHByaXByZW1hTGFiZWwpO1xyXG4gICAgfSlcclxuICAgIGRpdlJlY2VwUGFnZVByaXByZW1hLmFwcGVuZENoaWxkKGRpdlByaXByZW1hTGFiZWxzKTtcclxuICAgIGRpdlJlY2VwdFBhZ2VJbmZvLmFwcGVuZENoaWxkKGRpdlJlY2VwUGFnZVByaXByZW1hKTtcclxuICAgIFxyXG5cclxuICAgIGRpdlJlY2VwdFBhZ2UuYXBwZW5kQ2hpbGQoZGl2UmVjZXB0UGFnZUluZm8pO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVcIikuYXBwZW5kQ2hpbGQoZGl2UmVjZXB0UGFnZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3VXNlclByb2ZpbGUodXNlcjpVc2VyKSA6IEhUTUxEaXZFbGVtZW50e1xyXG4gICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWlkZGxlXCIpO1xyXG4gICAgbGV0IGRpdlVzZXJQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlVzZXJQcm9maWxlLmNsYXNzTGlzdC5hZGQoXCJkaXZVc2VyUHJvZmlsZVwiKTtcclxuXHJcbiAgICBsZXQgdXNlckluZm9OYXNsb3YgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XHJcbiAgICB1c2VySW5mb05hc2xvdi5jbGFzc0xpc3QuYWRkKFwidXNlckluZm9OYXNsb3ZcIik7XHJcbiAgICBpZihzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiY3VycmVudC11c2VyLWlkXCIpPT09dXNlci5pZC50b1N0cmluZygpKXtcclxuICAgICAgICB1c2VySW5mb05hc2xvdi5pbm5lckhUTUw9XCJWYXMgcHJvZmlsXCI7XHJcbiAgICB9XHJcbiAgICBlbHNle1xyXG4gICAgICAgIHVzZXJJbmZvTmFzbG92LmlubmVySFRNTD1cIktvcmlzbmlrXCI7XHJcbiAgICB9XHJcbiAgICBkaXZVc2VyUHJvZmlsZS5hcHBlbmRDaGlsZCh1c2VySW5mb05hc2xvdik7XHJcblxyXG4gICAgbGV0IGRpdlVzZXJQcm9maWxlSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZVc2VyUHJvZmlsZUluZm8uY2xhc3NMaXN0LmFkZChcImRpdlVzZXJQcm9maWxlSW5mb1wiKTtcclxuXHJcbiAgICBsZXQgZGl2VXNlclByb2ZpbGVJbmZvU2xpa2EgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvU2xpa2EuY2xhc3NMaXN0LmFkZChcImRpdlVzZXJQcm9maWxlSW5mb1NsaWthXCIpO1xyXG4gICAgLy9zbGlrYVxyXG4gICAgbGV0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICBpbWcuYWx0ID0gXCJVc2VyIGltYWdlLi4uXCI7XHJcbiAgICBpbWcuc3JjID0gdXNlci5waWN0dXJlO1xyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvU2xpa2EuYXBwZW5kQ2hpbGQoaW1nKTtcclxuICAgIGRpdlVzZXJQcm9maWxlSW5mby5hcHBlbmRDaGlsZChkaXZVc2VyUHJvZmlsZUluZm9TbGlrYSk7XHJcblxyXG4gICAgbGV0IGRpdlVzZXJQcm9maWxlSW5mb0RhdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvRGF0YS5jbGFzc0xpc3QuYWRkKFwiZGl2VXNlclByb2ZpbGVJbmZvRGF0YVwiKTtcclxuICAgIC8vcG9kYWNpXHJcbiAgICBsZXQgZGl2VXNlck5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGV0IGxhYmVsTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsTmFtZS5jbGFzc0xpc3QuYWRkKFwibWFpbi1sYWJlbFwiKTtcclxuICAgIGxhYmVsTmFtZS5pbm5lckhUTUw9XCJJbWU6IFwiO1xyXG4gICAgZGl2VXNlck5hbWUuYXBwZW5kQ2hpbGQobGFiZWxOYW1lKTtcclxuICAgIGxldCBsYWJlbE5hbWVWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBsYWJlbE5hbWVWYWx1ZS5pbm5lckhUTUw9dXNlci5uYW1lK1wiIFwiK3VzZXIubGFzdF9uYW1lO1xyXG4gICAgZGl2VXNlck5hbWUuYXBwZW5kQ2hpbGQobGFiZWxOYW1lVmFsdWUpOyBcclxuICAgIGRpdlVzZXJQcm9maWxlSW5mb0RhdGEuYXBwZW5kQ2hpbGQoZGl2VXNlck5hbWUpO1xyXG5cclxuICAgIGxldCBkaXZVc2VyRW1haWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGV0IGxhYmVsRW1haWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbEVtYWlsLmNsYXNzTGlzdC5hZGQoXCJtYWluLWxhYmVsXCIpO1xyXG4gICAgbGFiZWxFbWFpbC5pbm5lckhUTUw9XCJFbWFpbDogXCI7XHJcbiAgICBkaXZVc2VyRW1haWwuYXBwZW5kQ2hpbGQobGFiZWxFbWFpbCk7XHJcbiAgICBsZXQgbGFiZWxFbWFpbFZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGxhYmVsRW1haWxWYWx1ZS5pbm5lckhUTUw9dXNlci5lbWFpbDtcclxuICAgIGRpdlVzZXJFbWFpbC5hcHBlbmRDaGlsZChsYWJlbEVtYWlsVmFsdWUpOyBcclxuICAgIGRpdlVzZXJQcm9maWxlSW5mb0RhdGEuYXBwZW5kQ2hpbGQoZGl2VXNlckVtYWlsKTtcclxuXHJcbiAgICBsZXQgZGl2VXNlckNpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGV0IGxhYmVsQ2l0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsQ2l0eS5jbGFzc0xpc3QuYWRkKFwibWFpbi1sYWJlbFwiKTtcclxuICAgIGxhYmVsQ2l0eS5pbm5lckhUTUw9XCJHcmFkOiBcIjtcclxuICAgIGRpdlVzZXJDaXR5LmFwcGVuZENoaWxkKGxhYmVsQ2l0eSk7XHJcbiAgICBsZXQgbGFiZWxDaXR5VmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGFiZWxDaXR5VmFsdWUuaW5uZXJIVE1MPXVzZXIuY2l0eTtcclxuICAgIGRpdlVzZXJDaXR5LmFwcGVuZENoaWxkKGxhYmVsQ2l0eVZhbHVlKTsgXHJcbiAgICBkaXZVc2VyUHJvZmlsZUluZm9EYXRhLmFwcGVuZENoaWxkKGRpdlVzZXJDaXR5KTtcclxuXHJcbiAgICBsZXQgZGl2VXNlckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGV0IGxhYmVsRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsRGF0ZS5jbGFzc0xpc3QuYWRkKFwibWFpbi1sYWJlbFwiKTtcclxuICAgIGxhYmVsRGF0ZS5pbm5lckhUTUw9XCJEYXR1bSByb2RqZW5qYTogXCI7XHJcbiAgICBkaXZVc2VyRGF0ZS5hcHBlbmRDaGlsZChsYWJlbERhdGUpO1xyXG4gICAgbGV0IGxhYmVsRGF0ZVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGxhYmVsRGF0ZVZhbHVlLmlubmVySFRNTD11c2VyLmJpcnRoX2RhdGU7XHJcbiAgICBkaXZVc2VyRGF0ZS5hcHBlbmRDaGlsZChsYWJlbERhdGVWYWx1ZSk7IFxyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvRGF0YS5hcHBlbmRDaGlsZChkaXZVc2VyRGF0ZSk7XHJcblxyXG4gICAgZGl2VXNlclByb2ZpbGVJbmZvLmFwcGVuZENoaWxkKGRpdlVzZXJQcm9maWxlSW5mb0RhdGEpO1xyXG4gICAgZGl2VXNlclByb2ZpbGUuYXBwZW5kQ2hpbGQoZGl2VXNlclByb2ZpbGVJbmZvKTtcclxuXHJcbiAgICBsZXQgdXNlclJlY2VwdGlOYXNsb3YgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XHJcbiAgICB1c2VyUmVjZXB0aU5hc2xvdi5jbGFzc0xpc3QuYWRkKFwidXNlclJlY2VwdGlOYXNsb3ZcIik7XHJcbiAgICB1c2VyUmVjZXB0aU5hc2xvdi5pbm5lckhUTUw9XCJSZWNlcHRpXCI7XHJcbiAgICBkaXZVc2VyUHJvZmlsZS5hcHBlbmRDaGlsZCh1c2VyUmVjZXB0aU5hc2xvdik7XHJcblxyXG4gICAgbGV0IGRpdlVzZXJQcm9maWxlUmVjZXB0aSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZVc2VyUHJvZmlsZVJlY2VwdGkuY2xhc3NMaXN0LmFkZChcImRpdlVzZXJQcm9maWxlUmVjZXB0aVwiKTtcclxuICAgIGRpdlVzZXJQcm9maWxlLmFwcGVuZENoaWxkKGRpdlVzZXJQcm9maWxlUmVjZXB0aSk7XHJcblxyXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGRpdlVzZXJQcm9maWxlKTtcclxuICAgIHJldHVybiBkaXZVc2VyUHJvZmlsZVJlY2VwdGk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3U2VhcmNoUmVjZXB0KHBhcmVudDpOb2RlLHJlY2VwdDpSZWNlcHQpIDogdm9pZHtcclxuICAgIGxldCBkaXZTZWFyY2hTaW5nbGVSZWNlcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2U2VhcmNoU2luZ2xlUmVjZXB0LmNsYXNzTGlzdC5hZGQoXCJkaXZTZWFyY2hTaW5nbGVSZWNlcHRcIik7XHJcblxyXG4gICAgbGV0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICBpbWcuc3JjPXJlY2VwdC5zbGlrYTtcclxuICAgIGRpdlNlYXJjaFNpbmdsZVJlY2VwdC5hcHBlbmRDaGlsZChpbWcpO1xyXG5cclxuICAgIGxldCBsYWJlbE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbE5hbWUuaW5uZXJIVE1MID0gcmVjZXB0Lm5heml2O1xyXG4gICAgZGl2U2VhcmNoU2luZ2xlUmVjZXB0LmFwcGVuZENoaWxkKGxhYmVsTmFtZSk7XHJcblxyXG4gICAgYWRkT2JzZXJ2YWJsZVRvU2VhcmNoQ2xpY2soZGl2U2VhcmNoU2luZ2xlUmVjZXB0LHJlY2VwdCk7XHJcblxyXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGRpdlNlYXJjaFNpbmdsZVJlY2VwdCk7XHJcbn0iLCJpbXBvcnQgeyBTdWJqZWN0LCBmcm9tRXZlbnQsIGRlYm91bmNlVGltZSwgbWFwLCB0YWtlVW50aWwsIGNvbWJpbmVMYXRlc3QsIGZyb20sIHN3aXRjaE1hcCwgZGVsYXksIE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NsYXNzZXMvdXNlclwiO1xyXG5pbXBvcnQgeyBnZXRVc2VyV2l0aEVtYWlsLCBnZXRVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQsIHBvc3RVc2VyIH0gZnJvbSBcIi4vZGJTZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBpbWFnZVJlYWRlciB9IGZyb20gXCIuL25ld1JlY2VwdEV2ZW50c1wiO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRVcFNpZ25pbihjb250cm9sJDpTdWJqZWN0PHN0cmluZz4pe1xyXG5cclxuICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcihudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsKTtcclxuICAgIGRpc2FibGVTaWdudXAoKTtcclxuICAgIGNvbnN0IG5hbWUkID0gZnJvbUV2ZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2lnbnVwLW5hbWVcIiksXCJpbnB1dFwiKS5waXBlKFxyXG4gICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxyXG4gICAgICAgIG1hcCgoZXZlbnQ6IElucHV0RXZlbnQpID0+ICg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLnZhbHVlKSxcclxuICAgICAgICB0YWtlVW50aWwoY29udHJvbCQpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGxhc3RuYW1lJCA9IGZyb21FdmVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NpZ251cC1sYXN0bmFtZVwiKSxcImlucHV0XCIpLnBpcGUoXHJcbiAgICAgICAgZGVib3VuY2VUaW1lKDIwMCksXHJcbiAgICAgICAgbWFwKChldmVudDogSW5wdXRFdmVudCkgPT4gKDxIVE1MSW5wdXRFbGVtZW50PmV2ZW50LnRhcmdldCkudmFsdWUpLFxyXG4gICAgICAgIHRha2VVbnRpbChjb250cm9sJClcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgZW1haWwkID0gZnJvbUV2ZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2lnbnVwLWVtYWlsXCIpLFwiaW5wdXRcIikucGlwZShcclxuICAgICAgICBkZWJvdW5jZVRpbWUoMjAwKSxcclxuICAgICAgICBtYXAoKGV2ZW50OiBJbnB1dEV2ZW50KSA9PiAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS52YWx1ZSksXHJcbiAgICAgICAgdGFrZVVudGlsKGNvbnRyb2wkKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBwYXNzd29yZCQgPSBmcm9tRXZlbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzaWdudXAtcGFzc3dvcmRcIiksXCJpbnB1dFwiKS5waXBlKFxyXG4gICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxyXG4gICAgICAgIG1hcCgoZXZlbnQ6IElucHV0RXZlbnQpID0+ICg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLnZhbHVlKSxcclxuICAgICAgICB0YWtlVW50aWwoY29udHJvbCQpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGNpdHkkID0gZnJvbUV2ZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2lnbnVwLWNpdHlcIiksXCJpbnB1dFwiKS5waXBlKFxyXG4gICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxyXG4gICAgICAgIG1hcCgoZXZlbnQ6IElucHV0RXZlbnQpID0+ICg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLnZhbHVlKSxcclxuICAgICAgICB0YWtlVW50aWwoY29udHJvbCQpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGRhdGUkID0gZnJvbUV2ZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2lnbnVwLWRhdGVcIiksXCJpbnB1dFwiKS5waXBlKFxyXG4gICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxyXG4gICAgICAgIG1hcCgoZXZlbnQ6IElucHV0RXZlbnQpID0+ICg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLnZhbHVlKSxcclxuICAgICAgICB0YWtlVW50aWwoY29udHJvbCQpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGltYWdlJCA9IGFkZEltYWdlT2JzZXJ2YWJsZShjb250cm9sJCk7XHJcblxyXG4gICAgY29uc3QgY29tYmluZVZhbHVlJCA9IGNvbWJpbmVMYXRlc3QoW25hbWUkLGxhc3RuYW1lJCxlbWFpbCQscGFzc3dvcmQkLGNpdHkkLGRhdGUkLGltYWdlJF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlVW50aWwoY29udHJvbCQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLm5hbWU9bmV4dFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmxhc3RfbmFtZT1uZXh0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIuZW1haWw9bmV4dFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLnBhc3N3b3JkPW5leHRbM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5jaXR5PW5leHRbNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5iaXJ0aF9kYXRlPW5leHRbNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5waWN0dXJlPW5leHRbNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlU2lnbnVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgZnJvbUV2ZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2lnbnVwQnV0dG9uXCIpLFwiY2xpY2tcIilcclxuICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKCgpPT5nZXRVc2VyV2l0aEVtYWlsKHVzZXIuZW1haWwpKSxcclxuICAgICAgICAgICAgZGVsYXkoNTAwKVxyXG4gICAgICAgIClcclxuICAgICAgICAuc3Vic2NyaWJlKG5leHQ9PntcclxuICAgICAgICAgICAgaWYobmV4dC5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgICAgICBhbGVydChcIktvcmlzbmlrIHNhIG92b20gZW1haWwgYWRyZXNvbSB2ZWMgcG9zdG9qaS5Qb2t1c2FqdGUgZHJ1Z3UuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBpZih1c2VyLm5hbWU9PT1udWxsIHx8IHVzZXIubGFzdF9uYW1lPT09bnVsbCB8fCB1c2VyLmVtYWlsPT09bnVsbCB8fCB1c2VyLnBhc3N3b3JkPT09bnVsbCB8fCB1c2VyLmNpdHk9PT1udWxsIHx8IHVzZXIuYmlydGhfZGF0ZT09PW51bGwgfHwgdXNlci5waWN0dXJlPT09bnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJNb3JhdGUgZGEgdW5lc2V0ZSBzdmUgcG9kYXRrZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zdFVzZXIodXNlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZShuZXdVc2VyPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihuZXdVc2VyPT09dHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJVc3Blc25vIHJlZ2lzdHJvdm5qZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbCQubmV4dChcIkxvZ2luIGNvbXBsZXRlLi4uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wkLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0VXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKHVzZXIuZW1haWwsdXNlci5wYXNzd29yZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSh2YWx1ZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnQtdXNlci1pZFwiLHZhbHVlWzBdLmlkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnQtdXNlclwiLHZhbHVlWzBdLmVtYWlsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJEb3NsbyBqZSBkbyBncmVza2UscG9rdXNhanRlIHBvbm92by4uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZEltYWdlT2JzZXJ2YWJsZShjb250cm9sJDpTdWJqZWN0PHN0cmluZz4pIDogT2JzZXJ2YWJsZTxzdHJpbmc+e1xyXG4gICAgcmV0dXJuIGZyb21FdmVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NpZ251cC1pbWFnZVwiKSxcImlucHV0XCIpXHJcbiAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoZXZlbnQ6IElucHV0RXZlbnQpID0+ICg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLmZpbGVzWzBdKSxcclxuICAgICAgICAgICAgc3dpdGNoTWFwKGZpbGU9PmltYWdlUmVhZGVyKGZpbGUsY29udHJvbCQpKSxcclxuICAgICAgICAgICAgdGFrZVVudGlsKGNvbnRyb2wkKVxyXG4gICAgICAgICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpc2FibGVTaWdudXAoKXtcclxuICAgIGxldCBidG4gPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaWdudXBCdXR0b25cIik7XHJcbiAgICBidG4uZGlzYWJsZWQ9dHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5hYmxlU2lnbnVwKCl7XHJcbiAgICBsZXQgYnRuID0gPEhUTUxCdXR0b25FbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2lnbnVwQnV0dG9uXCIpO1xyXG4gICAgYnRuLmRpc2FibGVkPWZhbHNlO1xyXG59IiwiaW1wb3J0IHsgU3ViamVjdCwgYXVkaXRUaW1lLCBjb21iaW5lTGF0ZXN0LCBkZWJvdW5jZVRpbWUsIGRlbGF5LCBmcm9tRXZlbnQsIGludGVydmFsLCBtYXAsIHNhbXBsZVRpbWUsIHN3aXRjaE1hcCwgdGFrZSwgdGFrZUxhc3QsIHRha2VVbnRpbCB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGdldFVzZXIsIGdldFVzZXJXaXRoRW1haWwsIGdldFVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCwgZ2V0VnJzdGVKZWxhIH0gZnJvbSBcIi4vZGJTZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NsYXNzZXMvdXNlclwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFVwTG9naW4oY29udHJvbCQ6U3ViamVjdDxzdHJpbmc+KXtcclxuICAgIC8vbXVzdCBiZSBzZXQgdXAgd2hlbiAjcHJpamF2aS1zZSBpcyBjbGlja2VkXHJcbiAgICAvL3NlcGFyYXRlIGluIGFub3RoZXIgZmlsZVxyXG4gICAgY29uc3QgdXNlcjpVc2VyPW5ldyBVc2VyKG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwpO1xyXG5cclxuICAgIGNvbnN0IHBhc3N3b3JkJCA9IGZyb21FdmVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3VzZXJQYXNzXCIpLFwiaW5wdXRcIikucGlwZShcclxuICAgICAgICBkZWJvdW5jZVRpbWUoMjAwKSxcclxuICAgICAgICBtYXAoKGV2ZW50OiBJbnB1dEV2ZW50KSA9PiAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS52YWx1ZSksXHJcbiAgICAgICAgdGFrZVVudGlsKGNvbnRyb2wkKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBlbWFpbCQgPSBmcm9tRXZlbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN1c2VyRW1haWxcIiksXCJpbnB1dFwiKS5waXBlKFxyXG4gICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxyXG4gICAgICAgIG1hcCgoZXZlbnQ6IElucHV0RXZlbnQpID0+ICg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLnZhbHVlKSxcclxuICAgICAgICB0YWtlVW50aWwoY29udHJvbCQpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGxvZ2luJD1jb21iaW5lTGF0ZXN0KFtlbWFpbCQscGFzc3dvcmQkXSlcclxuICAgICAgICAucGlwZSh0YWtlVW50aWwoY29udHJvbCQpKVxyXG4gICAgICAgIC5zdWJzY3JpYmUobmV4dD0+e1xyXG4gICAgICAgICAgICB1c2VyLmVtYWlsPW5leHRbMF07XHJcbiAgICAgICAgICAgIHVzZXIucGFzc3dvcmQ9bmV4dFsxXTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICBmcm9tRXZlbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNidG5Mb2dpblwiKSxcImNsaWNrXCIpXHJcbiAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgIHN3aXRjaE1hcCgoKT0+Z2V0VXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKHVzZXIuZW1haWwsdXNlci5wYXNzd29yZCkpLFxyXG4gICAgICAgICAgICBkZWxheSg1MDApXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5zdWJzY3JpYmUobmV4dD0+e1xyXG4gICAgICAgICAgICBpZihuZXh0Lmxlbmd0aD09PTApe1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJOaXN0ZSB1bmVsaSBpc3ByYXZuZSBwb2RhdGtlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sJC5uZXh0KFwiTG9naW4gY29tcGxldGUuLi5cIik7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sJC5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnQtdXNlclwiLG5leHRbMF0uZW1haWwpO1xyXG4gICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnQtdXNlci1pZFwiLG5leHRbMF0uaWQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG59IiwiaW1wb3J0IHsgc2V0VXBMb2dpbiB9IGZyb20gXCIuL2xvZ2luRXZlbnRzXCI7XHJcbmltcG9ydCB7IGRyYXdMb2dpbiwgZHJhd1NpZ251cCwgdXNlckZpbHRlciwgZHJhd0Ryb3Bkb3duTGlzdCwgZHJhd05vdmlSZWNlcHQgfSBmcm9tIFwiLi9kcmF3RnVuY3Rpb25zXCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY2xhc3Nlcy91c2VyXCI7XHJcbmltcG9ydCB7IFN1YmplY3QsIGludGVydmFsLCBzd2l0Y2hNYXAsIHRha2VMYXN0LCB0aW1lciB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGFkZE5ld1JlY2VwdCB9IGZyb20gXCIuL25ld1JlY2VwdEV2ZW50c1wiO1xyXG5pbXBvcnQgeyBhZGRPYnNlcnZhYmxlRm9yU2VhcmNoLCBoaWRlU2VhcmNoQmFyLCB0b2dnbGVTZWFyY2hCYXIsIHZpZXdSZWNlcHQgfSBmcm9tIFwiLi9wb2NldG5hRXZlbnRzXCI7XHJcblxyXG5kb2N1bWVudC5ib2R5Lm9ubG9hZD0oKT0+e1xyXG4gICAgdXNlckZpbHRlcigpO1xyXG4gICAgdmlld1JlY2VwdCgpO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNwb2NldG5hJ11cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntcclxuICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlY2VwdGkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYVtocmVmPScjcmVjZXB0aSddXCIpO1xyXG4gICAgaWYocmVjZXB0aSE9PW51bGwpe1xyXG4gICAgICAgIHJlY2VwdGkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntcclxuICAgICAgICAgICAgY29uc3QgZHJvcGRvd25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5kcm9wZG93bi1jb250ZW50LWxpbmtzXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBkcm9wZG93bl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRyb3Bkb3duLWNvbnRlbnRcIik7XHJcbiAgICAgICAgICAgIGlmKGRyb3Bkb3ducy5sZW5ndGggPiAwKXtcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3ducy5mb3JFYWNoKHZhbHVlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd25fY29udGFpbmVyLnJlbW92ZUNoaWxkKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBkcmF3RHJvcGRvd25MaXN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVTZWFyY2hCYXIoKTtcclxuICAgIGFkZE9ic2VydmFibGVGb3JTZWFyY2goKTtcclxuICAgIC8vIENsb3NlIHRoZSBkcm9wZG93biBpZiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSBvZiBpdFxyXG4gICAgd2luZG93Lm9uY2xpY2sgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIGlmICghKGV2ZW50LnRhcmdldCBhcyBFbGVtZW50KS5tYXRjaGVzKFwiYVtocmVmPSdyZWNlcHRpJ11cIikpIHtcclxuICAgICAgICAgICAgY29uc3QgZHJvcGRvd25fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kcm9wZG93bi1jb250ZW50XCIpO1xyXG4gICAgICAgICAgICBjb25zdCBkcm9wZG93bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmRyb3Bkb3duLWNvbnRlbnQtbGlua3NcIik7XHJcbiAgICAgICAgICAgIGlmKGRyb3Bkb3ducy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bnMuZm9yRWFjaCh2YWx1ZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duX2NvbnRhaW5lci5yZW1vdmVDaGlsZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZighKGV2ZW50LnRhcmdldCBhcyBFbGVtZW50KS5tYXRjaGVzKFwiYVtocmVmPScjc2VhcmNoLWlucHV0J11cIikgJiYgIShldmVudC50YXJnZXQgYXMgRWxlbWVudCkubWF0Y2hlcyhcIiNoZWFkZXItc2VhcmNoLWlucHV0XCIpLyogJiYgIShldmVudC50YXJnZXQgYXMgRWxlbWVudCkubWF0Y2hlcyhcIiNzZWFyY2gtYmFyLWJ1dHRvblwiKSovKXtcclxuICAgICAgICAgICAgaGlkZVNlYXJjaEJhcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBub3ZpX3JlY2VwdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhW2hyZWY9JyNub3ZpLXJlY2VwdCddXCIpO1xyXG4gICAgY29uc3QgcmVjZXB0Q29udHJvbCQgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XHJcbiAgICBpZihub3ZpX3JlY2VwdCE9PW51bGwpe1xyXG5cclxuICAgICAgICBub3ZpX3JlY2VwdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e1xyXG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1pZGRsZSA+IGRpdlwiKTtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhjaGlsZCk7XHJcbiAgICAgICAgICAgIGlmKGNoaWxkIT09bnVsbCl7XHJcbiAgICAgICAgICAgICAgICBjaGlsZC5mb3JFYWNoKHg9PntcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1pZGRsZVwiKS5yZW1vdmVDaGlsZCh4KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRyYXdOb3ZpUmVjZXB0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWlkZGxlXCIpKTtcclxuICAgICAgICAgICAgYWRkTmV3UmVjZXB0KHJlY2VwdENvbnRyb2wkKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdLCJuYW1lcyI6WyJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fZXh0ZW5kcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19nZW5lcmF0b3IiLCJ0aGlzQXJnIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIm5leHQiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwidiIsIm9wIiwiZG9uZSIsInZhbHVlIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImUiLCJzdGVwIiwiX192YWx1ZXMiLCJvIiwicyIsIm0iLCJpIiwiX19yZWFkIiwiciIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImwiLCJzbGljZSIsImNvbmNhdCIsIl9fYXdhaXQiLCJTdXBwcmVzc2VkRXJyb3IiLCJpc0FycmF5TGlrZSIsIngiLCJpc0Z1bmN0aW9uIiwiaXNQcm9taXNlIiwidGhlbiIsImNyZWF0ZUVycm9yQ2xhc3MiLCJjcmVhdGVJbXBsIiwiY3RvckZ1bmMiLCJpbnN0YW5jZSIsIkVycm9yIiwic3RhY2siLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiX3N1cGVyIiwiZXJyb3JzIiwibWVzc2FnZSIsIm1hcCIsImVyciIsInRvU3RyaW5nIiwiam9pbiIsIm5hbWUiLCJhcnJSZW1vdmUiLCJhcnIiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiU3Vic2NyaXB0aW9uIiwiaW5pdGlhbFRlYXJkb3duIiwiY2xvc2VkIiwiX3BhcmVudGFnZSIsIl9maW5hbGl6ZXJzIiwidW5zdWJzY3JpYmUiLCJlXzEiLCJfYSIsImVfMiIsIl9iIiwiaXNBcnJheSIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwicmVtb3ZlIiwiZV8xXzEiLCJyZXR1cm4iLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnNfMSIsIl9maW5hbGl6ZXJzXzFfMSIsImZpbmFsaXplciIsImV4ZWNGaW5hbGl6ZXIiLCJlXzJfMSIsImFkZCIsInRlYXJkb3duIiwiX2hhc1BhcmVudCIsIl9hZGRQYXJlbnQiLCJwYXJlbnQiLCJpbmNsdWRlcyIsIl9yZW1vdmVQYXJlbnQiLCJFTVBUWSIsImVtcHR5IiwiRU1QVFlfU1VCU0NSSVBUSU9OIiwiaXNTdWJzY3JpcHRpb24iLCJjb25maWciLCJvblVuaGFuZGxlZEVycm9yIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwiUHJvbWlzZSIsInVuZGVmaW5lZCIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJ1c2VEZXByZWNhdGVkTmV4dENvbnRleHQiLCJ0aW1lb3V0UHJvdmlkZXIiLCJzZXRUaW1lb3V0IiwiaGFuZGxlciIsInRpbWVvdXQiLCJhcmdzIiwiX2kiLCJkZWxlZ2F0ZSIsImFwcGx5IiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlIiwicmVwb3J0VW5oYW5kbGVkRXJyb3IiLCJub29wIiwiQ09NUExFVEVfTk9USUZJQ0FUSU9OIiwiY3JlYXRlTm90aWZpY2F0aW9uIiwia2luZCIsImNvbnRleHQiLCJlcnJvckNvbnRleHQiLCJjYiIsImlzUm9vdCIsImVycm9yVGhyb3duIiwiU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uIiwiX3RoaXMiLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJGdW5jdGlvbiIsImJpbmQiLCJmbiIsIkNvbnN1bWVyT2JzZXJ2ZXIiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJoYW5kbGVVbmhhbmRsZWRFcnJvciIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwibm90aWZpY2F0aW9uIiwic3Vic2NyaWJlciIsIm9ic2VydmFibGUiLCJpZGVudGl0eSIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwic291cmNlIiwiaXNPYnNlcnZlciIsIl90cnlTdWJzY3JpYmUiLCJzaW5rIiwiZm9yRWFjaCIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJyZXNvbHZlIiwicmVqZWN0IiwicGlwZSIsIm9wZXJhdGlvbnMiLCJmbnMiLCJpbnB1dCIsInJlZHVjZSIsInByZXYiLCJ0b1Byb21pc2UiLCJpc0ludGVyb3BPYnNlcnZhYmxlIiwiaXNBc3luY0l0ZXJhYmxlIiwib2JqIiwiYXN5bmNJdGVyYXRvciIsImNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIiwiaXNJdGVyYWJsZSIsInJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IiLCJyZWFkYWJsZVN0cmVhbSIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJxIiwiYSIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJzaGlmdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWFkIiwicmVsZWFzZUxvY2siLCJpc1JlYWRhYmxlU3RyZWFtTGlrZSIsImlubmVyRnJvbSIsIm9icyIsImFycmF5IiwicHJvbWlzZSIsImZyb21Bc3luY0l0ZXJhYmxlIiwiaXRlcmFibGUiLCJpdGVyYWJsZV8xIiwiaXRlcmFibGVfMV8xIiwiYXN5bmNJdGVyYWJsZSIsImFzeW5jSXRlcmFibGVfMSIsImFzeW5jSXRlcmFibGVfMV8xIiwiUCIsIl9fYXN5bmNWYWx1ZXMiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3VsdCIsInByb2Nlc3MiLCJjYXRjaCIsImV4ZWN1dGVTY2hlZHVsZSIsInBhcmVudFN1YnNjcmlwdGlvbiIsInNjaGVkdWxlciIsIndvcmsiLCJkZWxheSIsInJlcGVhdCIsInNjaGVkdWxlU3Vic2NyaXB0aW9uIiwic2NoZWR1bGUiLCJvcGVyYXRlIiwiaW5pdCIsImhhc0xpZnQiLCJsaWZ0ZWRTb3VyY2UiLCJjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIiLCJvbk5leHQiLCJvbkNvbXBsZXRlIiwib25FcnJvciIsIm9uRmluYWxpemUiLCJPcGVyYXRvclN1YnNjcmliZXIiLCJzaG91bGRVbnN1YnNjcmliZSIsImNsb3NlZF8xIiwib2JzZXJ2ZU9uIiwic3Vic2NyaWJlT24iLCJzY2hlZHVsZUFzeW5jSXRlcmFibGUiLCJzY2hlZHVsZU9ic2VydmFibGUiLCJzY2hlZHVsZUFycmF5Iiwic2NoZWR1bGVQcm9taXNlIiwic2NoZWR1bGVJdGVyYWJsZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVkIiwidGFrZSIsImNvdW50Iiwic2VlbiIsInZyc3RhX2plbGFVUkwiLCJnZXRVc2VyIiwiaWQiLCJmZXRjaCIsIm1ldGhvZCIsInJlc3BvbnNlIiwib2siLCJqc29uIiwiY29uc29sZSIsImxvZyIsImdldFVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCIsImVtYWlsIiwicGFzc3dvcmQiLCJnZXRWcnN0ZUplbGEiLCJhbGVydCIsImdldFZyc3RlSmVsYVdpdGhJRCIsImdldEFsbFJlY2VwdCIsImdldFJlY2VwdFdpdGhJRCIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yIiwiU3ViamVjdCIsImN1cnJlbnRPYnNlcnZlcnMiLCJvYnNlcnZlcnMiLCJoYXNFcnJvciIsInRocm93bkVycm9yIiwic3ViamVjdCIsIkFub255bW91c1N1YmplY3QiLCJfdGhyb3dJZkNsb3NlZCIsIl9jIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiX2NoZWNrRmluYWxpemVkU3RhdHVzZXMiLCJfaW5uZXJTdWJzY3JpYmUiLCJhc09ic2VydmFibGUiLCJwcm9qZWN0IiwibWVyZ2VNYXAiLCJyZXN1bHRTZWxlY3RvciIsImNvbmN1cnJlbnQiLCJJbmZpbml0eSIsImlpIiwib25CZWZvcmVOZXh0IiwiZXhwYW5kIiwiaW5uZXJTdWJTY2hlZHVsZXIiLCJhZGRpdGlvbmFsRmluYWxpemVyIiwiYnVmZmVyIiwiYWN0aXZlIiwiaXNDb21wbGV0ZSIsImNoZWNrQ29tcGxldGUiLCJvdXRlck5leHQiLCJkb0lubmVyU3ViIiwiaW5uZXJDb21wbGV0ZSIsImlubmVyVmFsdWUiLCJidWZmZXJlZFZhbHVlIiwibWVyZ2VJbnRlcm5hbHMiLCJtYXBPbmVPck1hbnlBcmdzIiwiY2FsbE9yQXBwbHkiLCJub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyIsImV2ZW50VGFyZ2V0TWV0aG9kcyIsImpxdWVyeU1ldGhvZHMiLCJmcm9tRXZlbnQiLCJ0YXJnZXQiLCJldmVudE5hbWUiLCJvcHRpb25zIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0V2ZW50VGFyZ2V0IiwibWV0aG9kTmFtZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5Iiwib24iLCJvZmYiLCJpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyIiwic3ViVGFyZ2V0IiwiQWN0aW9uIiwic3RhdGUiLCJpbnRlcnZhbFByb3ZpZGVyIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiQXN5bmNBY3Rpb24iLCJwZW5kaW5nIiwicmVjeWNsZUFzeW5jSWQiLCJyZXF1ZXN0QXN5bmNJZCIsIl9pZCIsImZsdXNoIiwiX3NjaGVkdWxlciIsImV4ZWN1dGUiLCJfZXhlY3V0ZSIsIl9kZWxheSIsImVycm9yVmFsdWUiLCJlcnJvcmVkIiwiYWN0aW9ucyIsImRhdGVUaW1lc3RhbXBQcm92aWRlciIsIm5vdyIsIkRhdGUiLCJTY2hlZHVsZXIiLCJzY2hlZHVsZXJBY3Rpb25DdG9yIiwiYXN5bmNTY2hlZHVsZXIiLCJBc3luY1NjaGVkdWxlciIsIlNjaGVkdWxlckFjdGlvbiIsIl9hY3RpdmUiLCJhY3Rpb24iLCJkZWJvdW5jZVRpbWUiLCJkdWVUaW1lIiwiYWN0aXZlVGFzayIsImxhc3RWYWx1ZSIsImxhc3RUaW1lIiwiZW1pdCIsImVtaXRXaGVuSWRsZSIsInRhcmdldFRpbWUiLCJ0YWtlVW50aWwiLCJub3RpZmllciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG8iLCJnZXRLZXlzIiwia2V5cyIsImlzU2NoZWR1bGVyIiwibGFzdCIsInBvcFJlc3VsdFNlbGVjdG9yIiwicG9wU2NoZWR1bGVyIiwiY29tYmluZUxhdGVzdCIsImZpcnN0XzEiLCJrZXkiLCJhcmdzQXJnQXJyYXlPck9iamVjdCIsIm9ic2VydmFibGVzIiwidmFsdWVUcmFuc2Zvcm0iLCJtYXliZVNjaGVkdWxlIiwidmFsdWVzIiwicmVtYWluaW5nRmlyc3RWYWx1ZXMiLCJfbG9vcF8xIiwiaGFzRmlyc3RWYWx1ZSIsImNvbWJpbmVMYXRlc3RJbml0IiwiY3JlYXRlT2JqZWN0Iiwic3Vic2NyaXB0aW9uIiwic3dpdGNoTWFwIiwiaW5uZXJTdWJzY3JpYmVyIiwiaW5uZXJJbmRleCIsIm91dGVySW5kZXgiLCJkZWxheVdoZW4iLCJkZWxheUR1cmF0aW9uU2VsZWN0b3IiLCJzdWJzY3JpcHRpb25EZWxheSIsIm1hcFRvIiwiZHVlIiwiZHVyYXRpb24iLCJpbnRlcnZhbE9yU2NoZWR1bGVyIiwiaW50ZXJ2YWxEdXJhdGlvbiIsImlzTmFOIiwidGltZXIiLCJsYXN0X25hbWUiLCJjaXR5IiwiYmlydGhfZGF0ZSIsInBpY3R1cmUiLCJmaWx0ZXIiLCJwcmVkaWNhdGUiLCJuYXppdiIsImF1dG9yIiwidnJzdGFfamVsYSIsInNhc3RvamNpIiwicHJpcHJlbWEiLCJzbGlrYSIsImltYWdlUmVhZGVyIiwiZmlsZSIsImNvbnRyb2wkIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJldmVudCIsImZpbGVVUkkiLCJzcmMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzY2FuIiwiYWNjdW11bGF0b3IiLCJzZWVkIiwiaGFzU2VlZCIsImVtaXRPbk5leHQiLCJlbWl0QmVmb3JlQ29tcGxldGUiLCJoYXNTdGF0ZSIsInNjYW5JbnRlcm5hbHMiLCJ6aXAiLCJzb3VyY2VzIiwiYXJnc09yQXJnQXJyYXkiLCJidWZmZXJzIiwiY29tcGxldGVkIiwic291cmNlSW5kZXgiLCJldmVyeSIsInNvbWUiLCJyZW1vdmVDaGlsZHJlbiIsImNoaWxkIiwicmVtb3ZlQ2hpbGQiLCJkcmF3UmVjZXB0ZSIsInBhcmVudF9ub2RlIiwic2xpa2FTcmMiLCJuYXppdlJlY2VwdGEiLCJpZF92YWx1ZSIsImlkX2F1dG9yIiwiaWRfdnJzdGFKZWxhIiwiZGl2UmVjZXB0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImRpdlJlY2VwdFNsaWthIiwiaW1hZ2UiLCJhbHQiLCJhcHBlbmRDaGlsZCIsImRpdlJlY2VwdE5hbWUiLCJsYWJlbE5hbWUiLCJpbm5lckhUTUwiLCJsb2NhbF9yZWNlcHQiLCJSZWNlcHQiLCJsb2NhbF9hdXRvciIsIlVzZXIiLCJsb2NhbF92cnN0YUplbGEiLCJWcnN0ZUplbGEiLCJnZXRPYnNlcnZhYmxlRnJvbVJlY2VwdENsaWNrIiwiZHJhd1JlY2VwdFBhZ2UiLCJlbGVtZW50IiwicmVtb3ZlU2VhcmNoQmFyUmVjZXB0cyIsImNoaWxkcmVuIiwicXVlcnlTZWxlY3RvckFsbCIsInZpZXdVc2VyUHJvZmlsZSIsInVzZXJfaWQiLCJ1c2VyVmFsdWUiLCJ1c2VyUmVjZXB0aSIsInJldmVyc2UiLCJkaXZSZWNlcHREcmF3IiwidXNlciIsImRpdlVzZXJQcm9maWxlIiwidXNlckluZm9OYXNsb3YiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJkaXZVc2VyUHJvZmlsZUluZm8iLCJkaXZVc2VyUHJvZmlsZUluZm9TbGlrYSIsImltZyIsImRpdlVzZXJQcm9maWxlSW5mb0RhdGEiLCJkaXZVc2VyTmFtZSIsImxhYmVsTmFtZVZhbHVlIiwiZGl2VXNlckVtYWlsIiwibGFiZWxFbWFpbCIsImxhYmVsRW1haWxWYWx1ZSIsImRpdlVzZXJDaXR5IiwibGFiZWxDaXR5IiwibGFiZWxDaXR5VmFsdWUiLCJkaXZVc2VyRGF0ZSIsImxhYmVsRGF0ZSIsImxhYmVsRGF0ZVZhbHVlIiwidXNlclJlY2VwdGlOYXNsb3YiLCJkaXZVc2VyUHJvZmlsZVJlY2VwdGkiLCJkcmF3VXNlclByb2ZpbGUiLCJhZGRMaW5rVG9DbGFzc0VsZW1lbnQiLCJjbGFzc19lbGVtZW50IiwiaHJlZiIsImNsYXNzX25hbWUiLCJ0ZXh0IiwibGluayIsImxpbmtfZWxlbWVudCIsImRpdlJlY2VwdEZyb21WcnN0YUplbGEiLCJlbCIsImFkZE9ic2VydmFibGVUb1Zyc3RlUmVjZXB0YSIsInJlbW92ZUxpbmtGcm9tQ2xhc3NFbGVtZW50IiwibGlua19ocmVmIiwidXNlckZpbHRlciIsImN1cnJlbnRVc2VyIiwiY3VycmVudFVzZXJJRCIsImtyZWlyYWpfbmFsb2ciLCJkaXZTaWdudXAiLCJkaXZTaWdudXBMYWJlbHMiLCJuYW1lTGFiZWwiLCJsbmFtZUxhYmVsIiwiZW1haWxMYWJlbCIsInBhc3N3b3JkTGFiZWwiLCJjaXR5TGFiZWwiLCJkYXRlTGFiZWwiLCJzbGlrYUxhYmVsIiwiZGl2U2lnbnVwSW5wdXQiLCJuYW1lSW5wdXQiLCJ0eXBlIiwibG5hbWVJbnB1dCIsImVtYWlsSW5wdXQiLCJwYXNzd29yZElucHV0IiwiY2l0eUlucHV0IiwiZGF0ZUlucHV0Iiwic2xpa2FGaWxlIiwiZGl2U2xpa2FQcmV2aXciLCJzbGlrYVByZXZpZXciLCJ3aWR0aCIsImhlaWdodCIsImRpdlNpZ251cEJ1dHRvbiIsImJ1dHRvbiIsImRyYXdTaWdudXAiLCJkaXNhYmxlZCIsIm5hbWUkIiwibGFzdG5hbWUkIiwiZW1haWwkIiwicGFzc3dvcmQkIiwiY2l0eSQiLCJkYXRlJCIsImltYWdlJCIsImZpbGVzIiwiaGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJwb3N0VXNlciIsIm5ld1VzZXIiLCJzZXRJdGVtIiwibG9jYXRpb24iLCJyZWxvYWQiLCJzZXRVcFNpZ25pbiIsInByaWphdmlfc2UiLCJsb2dpbiQiLCJkaXZMb2dpbiIsImRpdkxvZ2luTGFiZWxzIiwiZGl2TG9naW5JbnB1dCIsImRpdkxvZ2luQnV0dG9uIiwiZHJhd0xvZ2luIiwic2V0VXBMb2dpbiIsIm9kamF2aV9zZSIsInJlbW92ZUl0ZW0iLCJwcm9maWwiLCJwYXJzZUludCIsInJlY2VwdCIsImRpdlJlY2VwdFBhZ2UiLCJkaXZSZWNlcHRQYWdlU2xpa2EiLCJyZWNlcHRTbGlrYSIsImRpdlJlY2VwdFBhZ2VJbmZvIiwiZGl2UmVjZXBQYWdlTmFtZSIsImxhYmVsbmFtZSIsImxhYmVsbmFtZVZhbHVlIiwiZGl2UmVjZXBQYWdlQXV0b3IiLCJsYWJlbGF1dG9yIiwibGlua2F1dG9yVmFsdWUiLCJkaXZSZWNlcFBhZ2VWcnN0YUplbGEiLCJsYWJlbHZyc3RhSmVsYSIsImxhYmVsdnJzdGFKZWxhVmFsdWUiLCJkaXZSZWNlcFBhZ2VTYXN0b2pjaSIsImxhYmVsU2FzdG9qY2kiLCJsYWJlbFNhc3RvamNpVmFsdWUiLCJkaXZSZWNlcFBhZ2VQcmlwcmVtYSIsImxhYmVsUHJpcHJlbWEiLCJkaXZQcmlwcmVtYUxhYmVscyIsInNwbGl0IiwicHJpcHJlbWFMYWJlbCIsIm9ubG9hZCIsImRpdlJlY2VwdFBhcmVudCIsImRpdlJlY2VwdE1vcmVCdXR0b24iLCJjbGljayQiLCJhY2MiLCJjdXJyZW50Iiwidmlld1JlY2VwdCIsInJlY2VwdGkiLCJkcm9wZG93bnMiLCJkcm9wZG93bl9jb250YWluZXIiLCJ0b0xvd2VyQ2FzZSIsImN1cnIiLCJvbmNsaWNrIiwidG9nZ2xlIiwicmVjcGV0IiwiZGl2U2VhcmNoU2luZ2xlUmVjZXB0IiwiZXZlbnRDbGljayQiLCJhZGRPYnNlcnZhYmxlVG9TZWFyY2hDbGljayIsImRyYXdTZWFyY2hSZWNlcHQiLCJ3aW5kb3ciLCJtYXRjaGVzIiwibm92aV9yZWNlcHQiLCJyZWNlcHRDb250cm9sJCIsInNlbGVjdCQiLCJpbmdyZWRpZW50JCIsInByaXByZW1hJCIsImRpdk5heml2UmVjZXB0YSIsImxhYmVsTmF6aXYiLCJpbnB1dE5heml2IiwiZGl2VnJzdGFKZWxhIiwibGFiZWxWcnN0YUplbGEiLCJzZWxlY3RWcnN0YUplbGEiLCJzZWxlY3RPcHRpb24iLCJkaXZTYXN0b2pjaSIsImlucHV0U2FzdG9qY2kiLCJkaXZQcmlwcmVtYSIsImlucHV0UHJpcHJlbWEiLCJjb2xzIiwicm93cyIsImRpdlNsaWthIiwibGFiZWxTbGlrYSIsImRpdkJ1dHRvbkRvZGFqUmVjZXB0IiwiYnRuRG9kYWpSZWNlcHQiLCJkcmF3Tm92aVJlY2VwdCIsImFkZE5heml2T2JzZXJ2YWJsZSIsImFkZFNlbGVjdE9ic2VydmFibGUiLCJhZGRTYXN0b2pjaU9ic2VydmFibGUiLCJhZGRQcmlwcmVtYU9ic2VydmFibGUiLCJhZGRJbWFnZU9ic2VydmFibGUiLCJwb3N0TmV3UmVjZXB0IiwiaW5wdXRzIiwidHh0Il0sInNvdXJjZVJvb3QiOiIifQ==