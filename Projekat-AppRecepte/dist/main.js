(()=>{"use strict";var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},e(n,t)};function n(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function t(e,n){var t,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(a){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,c[0]&&(u=0)),u;)try{if(t=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){u.label=c[1];break}if(6===c[0]&&u.label<i[1]){u.label=i[1],i=c;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(c);break}i[2]&&u.ops.pop(),u.trys.pop();continue}c=n.call(e,u)}catch(e){c=[6,e],r=0}finally{t=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function r(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,i,o=t.call(e),u=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(i)throw i.error}}return u}function o(e,n,t){if(t||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return e.concat(r||Array.prototype.slice.call(n))}function u(e){return this instanceof u?(this.v=e,this):new u(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function a(e){return"function"==typeof e}function l(e){return a(null==e?void 0:e.then)}function s(e){var n=e((function(e){Error.call(e),e.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var d=s((function(e){return function(n){e(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(e,n){return n+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function p(e,n){if(e){var t=e.indexOf(n);0<=t&&e.splice(t,1)}}var f=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,n,t,u,c;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var s=r(l),p=s.next();!p.done;p=s.next())p.value.remove(this)}catch(n){e={error:n}}finally{try{p&&!p.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}else l.remove(this);var f=this.initialTeardown;if(a(f))try{f()}catch(e){c=e instanceof d?e.errors:[e]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var h=r(v),y=h.next();!y.done;y=h.next()){var b=y.value;try{m(b)}catch(e){c=null!=c?c:[],e instanceof d?c=o(o([],i(c)),i(e.errors)):c.push(e)}}}catch(e){t={error:e}}finally{try{y&&!y.done&&(u=h.return)&&u.call(h)}finally{if(t)throw t.error}}}if(c)throw new d(c)}},e.prototype.add=function(n){var t;if(n&&n!==this)if(this.closed)m(n);else{if(n instanceof e){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(n)}},e.prototype._hasParent=function(e){var n=this._parentage;return n===e||Array.isArray(n)&&n.includes(e)},e.prototype._addParent=function(e){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(e),n):n?[n,e]:e},e.prototype._removeParent=function(e){var n=this._parentage;n===e?this._parentage=null:Array.isArray(n)&&p(n,e)},e.prototype.remove=function(n){var t=this._finalizers;t&&p(t,n),n instanceof e&&n._removeParent(this)},e.EMPTY=((n=new e).closed=!0,n),e;var n}(),v=f.EMPTY;function h(e){return e instanceof f||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function m(e){a(e)?e():e.unsubscribe()}var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var u=b.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,o([e,n],i(t))):setTimeout.apply(void 0,o([e,n],i(t)))},clearTimeout:function(e){var n=b.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(e)},delegate:void 0};function g(e){b.setTimeout((function(){var n=y.onUnhandledError;if(!n)throw e;n(e)}))}function E(){}var S=w("C",void 0,void 0);function w(e,n,t){return{kind:e,value:n,error:t}}var L=null;function C(e){if(y.useDeprecatedSynchronousErrorHandling){var n=!L;if(n&&(L={errorThrown:!1,error:null}),e(),n){var t=L,r=t.errorThrown,i=t.error;if(L=null,r)throw i}}else e()}var T=function(e){function t(n){var t=e.call(this)||this;return t.isStopped=!1,n?(t.destination=n,h(n)&&n.add(t)):t.destination=P,t}return n(t,e),t.create=function(e,n,t){return new x(e,n,t)},t.prototype.next=function(e){this.isStopped?I(function(e){return w("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?I(w("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?I(S,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(f),k=Function.prototype.bind;function _(e,n){return k.call(e,n)}var j=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var n=this.partialObserver;if(n.next)try{n.next(e)}catch(e){q(e)}},e.prototype.error=function(e){var n=this.partialObserver;if(n.error)try{n.error(e)}catch(e){q(e)}else q(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){q(e)}},e}(),x=function(e){function t(n,t,r){var i,o,u=e.call(this)||this;return a(n)||!n?i={next:null!=n?n:void 0,error:null!=t?t:void 0,complete:null!=r?r:void 0}:u&&y.useDeprecatedNextContext?((o=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},i={next:n.next&&_(n.next,o),error:n.error&&_(n.error,o),complete:n.complete&&_(n.complete,o)}):i=n,u.destination=new j(i),u}return n(t,e),t}(T);function q(e){var n;y.useDeprecatedSynchronousErrorHandling?(n=e,y.useDeprecatedSynchronousErrorHandling&&L&&(L.errorThrown=!0,L.error=n)):g(e)}function I(e,n){var t=y.onStoppedNotification;t&&b.setTimeout((function(){return t(e,n)}))}var P={closed:!0,next:E,error:function(e){throw e},complete:E},M="function"==typeof Symbol&&Symbol.observable||"@@observable";function H(e){return e}var A=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(n){var t=new e;return t.source=this,t.operator=n,t},e.prototype.subscribe=function(e,n,t){var r,i=this,o=(r=e)&&r instanceof T||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&h(r)?e:new x(e,n,t);return C((function(){var e=i,n=e.operator,t=e.source;o.add(n?n.call(o,t):t?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(n){e.error(n)}},e.prototype.forEach=function(e,n){var t=this;return new(n=R(n))((function(n,r){var i=new x({next:function(n){try{e(n)}catch(e){r(e),i.unsubscribe()}},error:r,complete:n});t.subscribe(i)}))},e.prototype._subscribe=function(e){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(e)},e.prototype[M]=function(){return this},e.prototype.pipe=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return(0===(t=e).length?H:1===t.length?t[0]:function(e){return t.reduce((function(e,n){return n(e)}),e)})(this);var t},e.prototype.toPromise=function(e){var n=this;return new(e=R(e))((function(e,t){var r;n.subscribe((function(e){return r=e}),(function(e){return t(e)}),(function(){return e(r)}))}))},e.create=function(n){return new e(n)},e}();function R(e){var n;return null!==(n=null!=e?e:y.Promise)&&void 0!==n?n:Promise}function O(e){return a(e[M])}function z(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function D(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var N="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function U(e){return a(null==e?void 0:e[N])}function G(e){return function(e,n,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=t.apply(e,n||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){i[e]&&(r[e]=function(n){return new Promise((function(t,r){o.push([e,n,t,r])>1||a(e,n)}))})}function a(e,n){try{(t=i[e](n)).value instanceof u?Promise.resolve(t.value.v).then(l,s):d(o[0][2],t)}catch(e){d(o[0][3],e)}var t}function l(e){a("next",e)}function s(e){a("throw",e)}function d(e,n){e(n),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var n,r,i;return t(this,(function(t){switch(t.label){case 0:n=e.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,u(n.read())];case 3:return r=t.sent(),i=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,u(i)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function J(e){return a(null==e?void 0:e.getReader)}function V(e){if(e instanceof A)return e;if(null!=e){if(O(e))return o=e,new A((function(e){var n=o[M]();if(a(n.subscribe))return n.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return i=e,new A((function(e){for(var n=0;n<i.length&&!e.closed;n++)e.next(i[n]);e.complete()}));if(l(e))return t=e,new A((function(e){t.then((function(n){e.closed||(e.next(n),e.complete())}),(function(n){return e.error(n)})).then(null,g)}));if(z(e))return B(e);if(U(e))return n=e,new A((function(e){var t,i;try{for(var o=r(n),u=o.next();!u.done;u=o.next()){var c=u.value;if(e.next(c),e.closed)return}}catch(e){t={error:e}}finally{try{u&&!u.done&&(i=o.return)&&i.call(o)}finally{if(t)throw t.error}}e.complete()}));if(J(e))return B(G(e))}var n,t,i,o;throw D(e)}function B(e){return new A((function(n){(function(e,n){var i,o,u,c,a,l,s,d;return a=this,l=void 0,d=function(){var a,l;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,t=e[Symbol.asyncIterator];return t?t.call(e):(e=r(e),n={},i("next"),i("throw"),i("return"),n[Symbol.asyncIterator]=function(){return this},n);function i(t){n[t]=e[t]&&function(n){return new Promise((function(r,i){!function(e,n,t,r){Promise.resolve(r).then((function(n){e({value:n,done:t})}),n)}(r,i,(n=e[t](n)).done,n.value)}))}}}(e),t.label=1;case 1:return[4,i.next()];case 2:if((o=t.sent()).done)return[3,4];if(a=o.value,n.next(a),n.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=t.sent(),u={error:l},[3,11];case 6:return t.trys.push([6,,9,10]),o&&!o.done&&(c=i.return)?[4,c.call(i)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,n){function t(e){try{i(d.next(e))}catch(e){n(e)}}function r(e){try{i(d.throw(e))}catch(e){n(e)}}function i(n){var i;n.done?e(n.value):(i=n.value,i instanceof s?i:new s((function(e){e(i)}))).then(t,r)}i((d=d.apply(a,l||[])).next())}))})(e,n).catch((function(e){return n.error(e)}))}))}function F(e,n,t,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=n.schedule((function(){t(),i?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(o),!i)return o}function K(e){return function(n){if(function(e){return a(null==e?void 0:e.lift)}(n))return n.lift((function(n){try{return e(n,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Y(e,n,t,r,i){return new Q(e,n,t,r,i)}var Q=function(e){function t(n,t,r,i,o,u){var c=e.call(this,n)||this;return c.onFinalize=o,c.shouldUnsubscribe=u,c._next=t?function(e){try{t(e)}catch(e){n.error(e)}}:e.prototype._next,c._error=i?function(e){try{i(e)}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return n(t,e),t.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;e.prototype.unsubscribe.call(this),!t&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},t}(T);function W(e,n){return void 0===n&&(n=0),K((function(t,r){t.subscribe(Y(r,(function(t){return F(r,e,(function(){return r.next(t)}),n)}),(function(){return F(r,e,(function(){return r.complete()}),n)}),(function(t){return F(r,e,(function(){return r.error(t)}),n)})))}))}function X(e,n){return void 0===n&&(n=0),K((function(t,r){r.add(e.schedule((function(){return t.subscribe(r)}),n))}))}function Z(e,n){if(!e)throw new Error("Iterable cannot be null");return new A((function(t){F(t,n,(function(){var r=e[Symbol.asyncIterator]();F(t,n,(function(){r.next().then((function(e){e.done?t.complete():t.next(e.value)}))}),0,!0)}))}))}function $(e,n){return n?function(e,n){if(null!=e){if(O(e))return function(e,n){return V(e).pipe(X(n),W(n))}(e,n);if(c(e))return function(e,n){return new A((function(t){var r=0;return n.schedule((function(){r===e.length?t.complete():(t.next(e[r++]),t.closed||this.schedule())}))}))}(e,n);if(l(e))return function(e,n){return V(e).pipe(X(n),W(n))}(e,n);if(z(e))return Z(e,n);if(U(e))return function(e,n){return new A((function(t){var r;return F(t,n,(function(){r=e[N](),F(t,n,(function(){var e,n,i;try{n=(e=r.next()).value,i=e.done}catch(e){return void t.error(e)}i?t.complete():t.next(n)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,n);if(J(e))return function(e,n){return Z(G(e),n)}(e,n)}throw D(e)}(e,n):V(e)}var ee=new A((function(e){return e.complete()}));function ne(e){return e<=0?function(){return ee}:K((function(n,t){var r=0;n.subscribe(Y(t,(function(n){++r<=e&&(t.next(n),e<=r&&t.complete())})))}))}var te="http://localhost:3000/users",re="http://localhost:3000/recept",ie="http://localhost:3000/vrsta-jela";function oe(e,n){return K((function(t,r){var i=0;t.subscribe(Y(r,(function(t){r.next(e.call(n,t,i++))})))}))}function ue(e,n,t){return void 0===t&&(t=1/0),a(n)?ue((function(t,r){return oe((function(e,i){return n(t,e,r,i)}))(V(e(t,r)))}),t):("number"==typeof n&&(t=n),K((function(n,r){return function(e,n,t,r,i,o,u,c){var a=[],l=0,s=0,d=!1,p=function(){!d||a.length||l||n.complete()},f=function(e){return l<r?v(e):a.push(e)},v=function(e){l++;var i=!1;V(t(e,s++)).subscribe(Y(n,(function(e){n.next(e)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(;a.length&&l<r;)e=void 0,e=a.shift(),v(e);p()}catch(e){n.error(e)}var e})))};return e.subscribe(Y(n,f,(function(){d=!0,p()}))),function(){}}(n,r,e,t)})))}var ce=Array.isArray;function ae(e){return oe((function(n){return function(e,n){return ce(n)?e.apply(void 0,o([],i(n))):e(n)}(e,n)}))}var le=["addListener","removeListener"],se=["addEventListener","removeEventListener"],de=["on","off"];function pe(e,n,t,r){if(a(t)&&(r=t,t=void 0),r)return pe(e,n,t).pipe(ae(r));var o=i(function(e){return a(e.addEventListener)&&a(e.removeEventListener)}(e)?se.map((function(r){return function(i){return e[r](n,i,t)}})):function(e){return a(e.addListener)&&a(e.removeListener)}(e)?le.map(fe(e,n)):function(e){return a(e.on)&&a(e.off)}(e)?de.map(fe(e,n)):[],2),u=o[0],l=o[1];if(!u&&c(e))return ue((function(e){return pe(e,n,t)}))(V(e));if(!u)throw new TypeError("Invalid event target");return new A((function(e){var n=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return e.next(1<n.length?n:n[0])};return u(n),function(){return l(n)}}))}function fe(e,n){return function(t){return function(r){return e[t](n,r)}}}function ve(e,n){return K(function(e,n,t,r,i){return function(r,i){var o=t,u=n,c=0;r.subscribe(Y(i,(function(n){var t=c++;u=o?e(u,n,t):(o=!0,n),i.next(u)}),undefined))}}(e,n,arguments.length>=2))}function he(e,n){return K((function(t,r){var i=null,o=0,u=!1,c=function(){return u&&!i&&r.complete()};t.subscribe(Y(r,(function(t){null==i||i.unsubscribe();var u=0,a=o++;V(e(t,a)).subscribe(i=Y(r,(function(e){return r.next(n?n(t,e,a,u++):e)}),(function(){i=null,c()})))}),(function(){u=!0,c()})))}))}var me=Array.isArray;function ye(e){return e&&a(e.schedule)}function be(e){return e[e.length-1]}function ge(e){return a(be(e))?e.pop():void 0}function Ee(e){return ye(be(e))?e.pop():void 0}function Se(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=ge(e),r=function(e){return 1===e.length&&me(e[0])?e[0]:e}(e);return r.length?new A((function(e){var n=r.map((function(){return[]})),u=r.map((function(){return!1}));e.add((function(){n=u=null}));for(var c=function(c){V(r[c]).subscribe(Y(e,(function(r){if(n[c].push(r),n.every((function(e){return e.length}))){var a=n.map((function(e){return e.shift()}));e.next(t?t.apply(void 0,o([],i(a))):a),n.some((function(e,n){return!e.length&&u[n]}))&&e.complete()}}),(function(){u[c]=!0,!n[c].length&&e.complete()})))},a=0;!e.closed&&a<r.length;a++)c(a);return function(){n=u=null}})):ee}var we=function(e){function t(n,t){return e.call(this)||this}return n(t,e),t.prototype.schedule=function(e,n){return void 0===n&&(n=0),this},t}(f),Le={setInterval:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var u=Le.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,o([e,n],i(t))):setInterval.apply(void 0,o([e,n],i(t)))},clearInterval:function(e){var n=Le.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(e)},delegate:void 0},Ce=function(e){function t(n,t){var r=e.call(this,n,t)||this;return r.scheduler=n,r.work=t,r.pending=!1,r}return n(t,e),t.prototype.schedule=function(e,n){var t;if(void 0===n&&(n=0),this.closed)return this;this.state=e;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,n)),this.pending=!0,this.delay=n,this.id=null!==(t=this.id)&&void 0!==t?t:this.requestAsyncId(i,this.id,n),this},t.prototype.requestAsyncId=function(e,n,t){return void 0===t&&(t=0),Le.setInterval(e.flush.bind(e,this),t)},t.prototype.recycleAsyncId=function(e,n,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return n;null!=n&&Le.clearInterval(n)},t.prototype.execute=function(e,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(e,n);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,n){var t,r=!1;try{this.work(e)}catch(e){r=!0,t=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),t},t.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,t=this.scheduler,r=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=n&&(this.id=this.recycleAsyncId(t,n,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(we),Te={now:function(){return(Te.delegate||Date).now()},delegate:void 0},ke=function(){function e(n,t){void 0===t&&(t=e.now),this.schedulerActionCtor=n,this.now=t}return e.prototype.schedule=function(e,n,t){return void 0===n&&(n=0),new this.schedulerActionCtor(this,e).schedule(t,n)},e.now=Te.now,e}(),_e=new(function(e){function t(n,t){void 0===t&&(t=ke.now);var r=e.call(this,n,t)||this;return r.actions=[],r._active=!1,r}return n(t,e),t.prototype.flush=function(e){var n=this.actions;if(this._active)n.push(e);else{var t;this._active=!0;do{if(t=e.execute(e.state,e.delay))break}while(e=n.shift());if(this._active=!1,t){for(;e=n.shift();)e.unsubscribe();throw t}}},t}(ke))(Ce),je=_e;function xe(e,n){return void 0===n&&(n=_e),K((function(t,r){var i=null,o=null,u=null,c=function(){if(i){i.unsubscribe(),i=null;var e=o;o=null,r.next(e)}};function a(){var t=u+e,o=n.now();if(o<t)return i=this.schedule(void 0,t-o),void r.add(i);c()}t.subscribe(Y(r,(function(t){o=t,u=n.now(),i||(i=n.schedule(a,e),r.add(i))}),(function(){c(),r.complete()}),void 0,(function(){o=i=null})))}))}function qe(e,n){return K((function(t,r){var i=0;t.subscribe(Y(r,(function(t){return e.call(n,t,i++)&&r.next(t)})))}))}var Ie=function(){this.naziv=null,this.autor=null,this.vrsta_jela=null,this.sastojci=null,this.priprema=null,this.slika=null},Pe=function(e,n,t,r,i,o,u){this.id=e,this.name=n,this.last_name=t,this.email=r,this.password=i,this.city=o,this.birth_date=u,this.picture=null},Me=function(e,n){this.id=e,this.name=n};function He(e,n){null!==n&&n.forEach((function(n){e.removeChild(n)}))}function Ae(e,n,t,r,i,o){var u=document.createElement("div");u.classList.add("divRecept");var c=document.createElement("div");c.classList.add("divReceptSlika");var a=document.createElement("img");a.src=n,a.alt="Image",c.appendChild(a),u.appendChild(c);var l=document.createElement("div");l.classList.add("divReceptName");var s=document.createElement("label");s.classList.add("divReceptLabelName"),s.innerHTML=t,l.appendChild(s),u.appendChild(l);var d=new Ie,p=new Pe(null,null,null,null,null,null,null),f=new Me(null,null);Se([Re(u).pipe(he((function(){return Je(r)}))),Re(u).pipe(he((function(){return ze(i)}))),Re(u).pipe(he((function(){return Ue(o)})))]).subscribe((function(e){d=e[0],p=e[1],f=e[2],an(d,p,f)})),e.appendChild(u)}function Re(e){return pe(e,"click")}function Oe(){var e=document.querySelector("#search-bar-dropdown-show"),n=document.querySelectorAll(".divSearchSingleRecept");n.length>0&&n.forEach((function(n){return e.removeChild(n)}))}function ze(e){return $(fetch(te+"/"+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)}))).pipe(ne(1))}function De(e,n){return $(fetch(te+"?email="+e+"&password="+n,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))}function Ne(){return $(fetch(ie,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return alert(e)})))}function Ue(e){return $(fetch(ie+"/"+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return alert(e)}))).pipe(ne(1))}function Ge(){return $(fetch(re,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return function(e){var n=document.querySelector(".middle");He(n,document.querySelectorAll(".middle > div"));var t=document.createElement("div");t.classList.add("divError");var r=document.createElement("label");r.style.fontSize="larger",r.innerHTML=e.toString(),r.innerHTML=r.innerHTML.concat(". Error 404."),t.appendChild(r),n.appendChild(t)}(e)})))}function Je(e){return $(fetch(re+"/"+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)}))).pipe(ne(1))}var Ve=s((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Be=function(e){function t(){var n=e.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return n(t,e),t.prototype.lift=function(e){var n=new Fe(this,this);return n.operator=e,n},t.prototype._throwIfClosed=function(){if(this.closed)throw new Ve},t.prototype.next=function(e){var n=this;C((function(){var t,i;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var o=r(n.currentObservers),u=o.next();!u.done;u=o.next())u.value.next(e)}catch(e){t={error:e}}finally{try{u&&!u.done&&(i=o.return)&&i.call(o)}finally{if(t)throw t.error}}}}))},t.prototype.error=function(e){var n=this;C((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=e;for(var t=n.observers;t.length;)t.shift().error(e)}}))},t.prototype.complete=function(){var e=this;C((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var n=e.observers;n.length;)n.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(n){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,n)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var n=this,t=this,r=t.hasError,i=t.isStopped,o=t.observers;return r||i?v:(this.currentObservers=null,o.push(e),new f((function(){n.currentObservers=null,p(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var n=this,t=n.hasError,r=n.thrownError,i=n.isStopped;t?e.error(r):i&&e.complete()},t.prototype.asObservable=function(){var e=new A;return e.source=this,e},t.create=function(e,n){return new Fe(e,n)},t}(A),Fe=function(e){function t(n,t){var r=e.call(this)||this;return r.destination=n,r.source=t,r}return n(t,e),t.prototype.next=function(e){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===t||t.call(n,e)},t.prototype.error=function(e){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===t||t.call(n,e)},t.prototype.complete=function(){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===n||n.call(e)},t.prototype._subscribe=function(e){var n,t;return null!==(t=null===(n=this.source)||void 0===n?void 0:n.subscribe(e))&&void 0!==t?t:v},t}(Be);function Ke(e){return K((function(n,t){V(e).subscribe(Y(t,(function(){return t.complete()}),E)),!t.closed&&n.subscribe(t)}))}var Ye=Array.isArray,Qe=Object.getPrototypeOf,We=Object.prototype,Xe=Object.keys;function Ze(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=Ee(e),r=ge(e),i=function(e){if(1===e.length){var n=e[0];if(Ye(n))return{args:n,keys:null};if((r=n)&&"object"==typeof r&&Qe(r)===We){var t=Xe(n);return{args:t.map((function(e){return n[e]})),keys:t}}}var r;return{args:e,keys:null}}(e),o=i.args,u=i.keys;if(0===o.length)return $([],t);var c=new A(function(e,n,t){return void 0===t&&(t=H),function(r){$e(n,(function(){for(var i=e.length,o=new Array(i),u=i,c=i,a=function(i){$e(n,(function(){var a=$(e[i],n),l=!1;a.subscribe(Y(r,(function(e){o[i]=e,l||(l=!0,c--),c||r.next(t(o.slice()))}),(function(){--u||r.complete()})))}),r)},l=0;l<i;l++)a(l)}),r)}}(o,t,u?function(e){return function(e,n){return e.reduce((function(e,t,r){return e[t]=n[r],e}),{})}(u,e)}:H));return r?c.pipe(ae(r)):c}function $e(e,n,t){e?F(t,e,n):n()}function en(e,n){return n?function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return(void 0===(t=1)&&(t=1/0),ue(H,t))($(e,Ee(e)));var t}(n.pipe(ne(1),K((function(e,n){e.subscribe(Y(n,E))}))),t.pipe(en(e)))}:ue((function(n,t){return V(e(n,t)).pipe(ne(1),function(e){return oe((function(){return e}))}(n))}))}function nn(e,n){void 0===n&&(n=_e);var t=function(e,n,t){void 0===e&&(e=0),void 0===t&&(t=je);var r=-1;return null!=n&&(ye(n)?t=n:r=n),new A((function(n){var i,o=(i=e)instanceof Date&&!isNaN(i)?+e-t.now():e;o<0&&(o=0);var u=0;return t.schedule((function(){n.closed||(n.next(u++),0<=r?this.schedule(void 0,r):n.complete())}),o)}))}(e,n);return en((function(){return t}))}function tn(e,n){var t=new FileReader;return t.readAsDataURL(e),pe(t,"load").pipe(oe((function(e){var n,t=e.target.result;return n=t,document.querySelector("img").src=n,t})),Ke(n))}function rn(e,n){Se([pe(n,"click").pipe(he((function(){return ze(e)}))),pe(n,"click").pipe(he((function(){return $(fetch(re+"?autor="+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))})))]).subscribe((function(e){He(document.querySelector(".middle"),document.querySelectorAll(".middle > div"));var n=e[0],t=e[1].reverse(),r=function(e){var n=document.querySelector(".middle"),t=document.createElement("div");t.classList.add("divUserProfile");var r=document.createElement("h2");r.classList.add("userInfoNaslov"),sessionStorage.getItem("current-user-id")===e.id.toString()?r.innerHTML="Vas profil":r.innerHTML="Korisnik",t.appendChild(r);var i=document.createElement("div");i.classList.add("divUserProfileInfo");var o=document.createElement("div");o.classList.add("divUserProfileInfoSlika");var u=document.createElement("img");u.alt="User image...",u.src=e.picture,o.appendChild(u),i.appendChild(o);var c=document.createElement("div");c.classList.add("divUserProfileInfoData");var a=document.createElement("div"),l=document.createElement("label");l.classList.add("main-label"),l.innerHTML="Ime: ",a.appendChild(l);var s=document.createElement("div");s.innerHTML=e.name+" "+e.last_name,a.appendChild(s),c.appendChild(a);var d=document.createElement("div"),p=document.createElement("label");p.classList.add("main-label"),p.innerHTML="Email: ",d.appendChild(p);var f=document.createElement("div");f.innerHTML=e.email,d.appendChild(f),c.appendChild(d);var v=document.createElement("div"),h=document.createElement("label");h.classList.add("main-label"),h.innerHTML="Grad: ",v.appendChild(h);var m=document.createElement("div");m.innerHTML=e.city,v.appendChild(m),c.appendChild(v);var y=document.createElement("div"),b=document.createElement("label");b.classList.add("main-label"),b.innerHTML="Datum rodjenja: ",y.appendChild(b);var g=document.createElement("div");g.innerHTML=e.birth_date,y.appendChild(g),c.appendChild(y),i.appendChild(c),t.appendChild(i);var E=document.createElement("h2");E.classList.add("userReceptiNaslov"),E.innerHTML="Recepti",t.appendChild(E);var S=document.createElement("div");return S.classList.add("divUserProfileRecepti"),t.appendChild(S),n.appendChild(t),S}(n);t.forEach((function(e){Ae(r,e.slika,e.naziv,e.id,n.id,e.vrsta_jela)}))}))}function on(e,n,t,r,i){void 0===i&&(i=0);var o=document.createElement("a");o.href=n,o.classList.add(t),o.innerHTML=r,"dropdown-content-links"===t&&function(e,n,t){pe(e,n).pipe(he((function(){return $(fetch(re+"?vrsta_jela="+t,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})))}))).subscribe((function(e){He(document.querySelector(".middle"),document.querySelectorAll(".middle > div"));var n=document.createElement("div");n.classList.add("divReceptFromVrstaJela"),e.forEach((function(e){console.log(e),Ae(n,e.slika,e.naziv,e.id,e.autor,e.vrsta_jela)})),document.querySelector(".middle").appendChild(n)}))}(o,"click",i);var u=document.querySelector(e);null!==o&&null!==u&&u.appendChild(o)}function un(e,n){var t=document.querySelector("a[href='"+n+"']"),r=document.querySelector(e);null!==t&&null!==r&&r.removeChild(t)}function cn(){var e=sessionStorage.getItem("current-user"),n=sessionStorage.getItem("current-user-id");null!==e?(on(".header","#novi-recept","header-item","NOVI RECEPT"),on(".header","#profil","header-item","PROFIL"),on(".header","#odjavi-se","header-item","ODJAVI SE"),un(".header","#prijavi-se"),un(".header","#kreiraj-nalog")):(on(".header","#prijavi-se","header-item","PRIJAVI SE"),on(".header","#kreiraj-nalog","header-item","KREIRAJ NALOG"),un(".header","#profil"),un(".header","#odjavi-se"),un(".header","#novi-recept"));var t=document.querySelector("a[href='#kreiraj-nalog']"),r=new Be;null!==t&&t.addEventListener("click",(function(){He(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("divSignup");var t=document.createElement("div");t.classList.add("divSignupLabels");var r=document.createElement("label");r.innerHTML="Ime:",t.appendChild(r);var i=document.createElement("label");i.innerHTML="Prezime:",t.appendChild(i);var o=document.createElement("label");o.innerHTML="E-mail:",t.appendChild(o);var u=document.createElement("label");u.innerHTML="Lozinka:",t.appendChild(u);var c=document.createElement("label");c.innerHTML="Grad:",t.appendChild(c);var a=document.createElement("label");a.innerHTML="Datum rodjenja:",t.appendChild(a);var l=document.createElement("label");l.innerHTML="Datum rodjenja:",t.appendChild(l),n.appendChild(t);var s=document.createElement("div");s.classList.add("divSignupInput");var d=document.createElement("input");d.id="signup-name",d.type="name",s.appendChild(d);var p=document.createElement("input");p.id="signup-lastname",p.type="name",s.appendChild(p);var f=document.createElement("input");f.id="signup-email",f.type="email",s.appendChild(f);var v=document.createElement("input");v.id="signup-password",v.type="password",s.appendChild(v);var h=document.createElement("input");h.id="signup-city",h.type="name",s.appendChild(h);var m=document.createElement("input");m.id="signup-date",m.type="date",s.appendChild(m);var y=document.createElement("input");y.id="signup-image",y.type="file",s.appendChild(y),n.appendChild(s),e.appendChild(n);var b=document.createElement("div");b.classList.add("divSlikaPreviw");var g=document.createElement("img");g.alt="Image preview",g.width=150,g.height=150,b.appendChild(g),e.appendChild(b);var E=document.createElement("div");E.classList.add("divSignupButton");var S=document.createElement("button");S.classList.add("signupButton"),S.innerHTML="Kreiraj",E.appendChild(S),e.appendChild(E)}(document.querySelector(".middle")),function(e){var n=new Pe(null,null,null,null,null,null,null);document.querySelector(".signupButton").disabled=!0;var t=pe(document.querySelector("#signup-name"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e)),r=pe(document.querySelector("#signup-lastname"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e)),i=pe(document.querySelector("#signup-email"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e)),o=pe(document.querySelector("#signup-password"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e)),u=pe(document.querySelector("#signup-city"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e)),c=pe(document.querySelector("#signup-date"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e)),a=function(e){return pe(document.querySelector("#signup-image"),"input").pipe(oe((function(e){return e.target.files[0]})),he((function(n){return tn(n,e)})),Ke(e))}(e);Ze([t,r,i,o,u,c,a]).pipe(Ke(e)).subscribe((function(e){n.name=e[0],n.last_name=e[1],n.email=e[2],n.password=e[3],n.city=e[4],n.birth_date=e[5],n.picture=e[6],document.querySelector(".signupButton").disabled=!1})),pe(document.querySelector(".signupButton"),"click").pipe(he((function(){return e=n.email,$(fetch(te+"?email="+e,{method:"GET"}).then((function(e){return e.ok?e.json():null})).catch((function(e){return console.log(e)})));var e})),nn(500)).subscribe((function(t){t.length>0?alert("Korisnik sa ovom email adresom vec postoji.Pokusajte drugu."):null===n.name||null===n.last_name||null===n.email||null===n.password||null===n.city||null===n.birth_date||null===n.picture?alert("Morate da unesete sve podatke"):function(e){return console.log(e),$(fetch(te,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))}(n).subscribe((function(t){!0===t?(alert("Uspesno registrovnje."),e.next("Login complete..."),e.complete(),De(n.email,n.password).subscribe((function(e){sessionStorage.setItem("current-user-id",e[0].id.toString()),sessionStorage.setItem("current-user",e[0].email),document.location.reload()}))):alert("Doslo je do greske,pokusajte ponovo...")}))}))}(r)}));var i=document.querySelector("a[href='#prijavi-se']"),o=new Be;null!==i&&i.addEventListener("click",(function(){He(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var n=document.createElement("div");n.classList.add("divLogin");var t=document.createElement("div");t.classList.add("divLoginLabels");var r=document.createElement("label");r.innerHTML="E-mail:",t.appendChild(r);var i=document.createElement("label");i.innerHTML="Password:",t.appendChild(i),n.appendChild(t);var o=document.createElement("div");o.classList.add("divLoginInput");var u=document.createElement("input");u.id="userEmail",u.type="email",o.appendChild(u);var c=document.createElement("input");c.id="userPass",c.type="password",o.appendChild(c),n.appendChild(o),e.appendChild(n);var a=document.createElement("div");a.classList.add("divLoginButton");var l=document.createElement("button");l.id="btnLogin",l.innerHTML="Uloguj se",a.appendChild(l),e.appendChild(a)}(document.querySelector(".middle")),function(e){var n=new Pe(null,null,null,null,null,null,null),t=pe(document.querySelector("#userPass"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e));Ze([pe(document.querySelector("#userEmail"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e)),t]).pipe(Ke(e)).subscribe((function(e){n.email=e[0],n.password=e[1]})),pe(document.querySelector("#btnLogin"),"click").pipe(he((function(){return De(n.email,n.password)})),nn(500)).subscribe((function(n){0===n.length?alert("Niste uneli ispravne podatke"):(e.next("Login complete..."),e.complete(),sessionStorage.setItem("current-user",n[0].email),sessionStorage.setItem("current-user-id",n[0].id.toString()),document.location.reload())}))}(o)}));var u=document.querySelector("a[href='#odjavi-se']");null!==u&&u.addEventListener("click",(function(){He(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),sessionStorage.removeItem("current-user"),sessionStorage.removeItem("current-user-id"),document.location.reload()}));var c=document.querySelector("a[href='#profil']");null!==c&&rn(parseInt(n),c)}function an(e,n,t){He(document.querySelector(".middle"),document.querySelectorAll(".middle > div"));var r=document.createElement("div");r.classList.add("divReceptPage");var i=document.createElement("div");i.classList.add("divReceptPageSlika");var o=document.createElement("img");o.alt="Recept image.",o.src=e.slika,i.appendChild(o),r.appendChild(i);var u=document.createElement("div");u.classList.add("divReceptPageInfo");var c=document.createElement("div");c.classList.add("divReceptPageName");var a=document.createElement("label");a.classList.add("main-label"),a.innerHTML="Naziv recepta: ",c.appendChild(a);var l=document.createElement("label");l.innerHTML=e.naziv,c.appendChild(l),u.appendChild(c);var s=document.createElement("div");s.classList.add("divReceptPageAutor");var d=document.createElement("label");d.innerHTML="Ime autora: ",d.classList.add("main-label"),s.appendChild(d);var p=document.createElement("a");p.href="#autro-link",rn(n.id,p),p.innerHTML=n.name+" "+n.last_name,s.appendChild(p),u.appendChild(s);var f=document.createElement("div");f.classList.add("divRecepPageVrstaJela");var v=document.createElement("label");v.classList.add("main-label"),v.innerHTML="Vrsta jela: ",f.appendChild(v);var h=document.createElement("label");h.innerHTML=t.name,f.appendChild(h),u.appendChild(f);var m=document.createElement("div");m.classList.add("divRecepPageSastojci");var y=document.createElement("label");y.classList.add("main-label"),y.innerHTML="Sastojci: ",m.appendChild(y);var b=document.createElement("label");b.innerHTML=e.sastojci,m.appendChild(b),u.appendChild(m);var g=document.createElement("div");g.classList.add("divRecepPagePriprema");var E=document.createElement("label");E.classList.add("main-label"),E.innerHTML="Priprema: ",g.appendChild(E);var S=document.createElement("div");S.classList.add("divPripremaLabels"),e.priprema.split("\n").forEach((function(e){var n=document.createElement("label");n.innerHTML=e,S.appendChild(n)})),g.appendChild(S),u.appendChild(g),r.appendChild(u),document.querySelector(".middle").appendChild(r)}document.body.onload=function(){cn(),function(){var e=document.querySelector(".middle"),n=document.createElement("div");n.classList.add("divReceptDrawParent"),e.appendChild(n);var t=document.createElement("div");t.classList.add("divReceptMoreButton");var r,i=document.createElement("button");i.id="buttonPrikaziJos",i.innerHTML="Prikazi jos",t.appendChild(i),e.appendChild(t),r=n,Ge().subscribe((function(e){e.reverse().slice(0,8).forEach((function(e){Ae(r,e.slika,e.naziv,e.id,e.autor,e.vrsta_jela)}))}));var o=pe(i,"click");Se([o.pipe(oe((function(){return 8})),ve((function(e,n){return e+n}),8)),o.pipe(he((function(){return Ge()})))]).subscribe((function(e){He(n,document.querySelectorAll(".divRecept")),e[1].reverse().slice(0,e[0]).forEach((function(e){Ae(n,e.slika,e.naziv,e.id,e.autor,e.vrsta_jela)}))}))}(),document.querySelector("a[href='#pocetna']").addEventListener("click",(function(){document.location.reload()}));var e=document.querySelector("a[href='#recepti']");null!==e&&e.addEventListener("click",(function(){var e=document.querySelectorAll(".dropdown-content-links"),n=document.querySelector(".dropdown-content");e.length>0?e.forEach((function(e){n.removeChild(e)})):Ne().subscribe((function(e){e.forEach((function(e){on(".dropdown-content","#"+e.name.toLowerCase().split(" ").reduce((function(e,n){return e+n})),"dropdown-content-links",e.name,e.id)}))}))})),document.querySelector("a[href='#search-input']").onclick=function(){document.querySelector("#search-bar-dropdown-show").classList.toggle("hideDisplay"),Oe()},pe(document.querySelector("#header-search-input"),"input").pipe(xe(200),oe((function(e){return e.target.value})),qe((function(e){return e.length>=3})),he((function(e){return Ge().pipe(oe((function(n){return n.filter((function(n){return n.naziv.toLowerCase().includes(e)}))})))}))).subscribe((function(e){var n=document.querySelector("#search-bar-dropdown-show");Oe(),e.forEach((function(e){return function(e,n){var t=document.createElement("div");t.classList.add("divSearchSingleRecept");var r=document.createElement("img");r.src=n.slika,t.appendChild(r);var i=document.createElement("label");i.innerHTML=n.naziv,t.appendChild(i),function(e,n){var t=new Ie,r=new Pe(null,null,null,null,null,null,null),i=new Me(null,null),o=pe(e,"click");Se([o.pipe(he((function(){return Je(n.id)}))),o.pipe(he((function(){return ze(n.autor)}))),o.pipe(he((function(){return Ue(n.vrsta_jela)})))]).subscribe((function(e){t=e[0],r=e[1],i=e[2],an(t,r,i)}))}(t,n),e.appendChild(t)}(n,e)}))})),window.onclick=function(e){if(!e.target.matches("a[href='recepti']")){var n=document.querySelector(".dropdown-content"),t=document.querySelectorAll(".dropdown-content-links");t.length>0&&t.forEach((function(e){n.removeChild(e)}))}e.target.matches("a[href='#search-input']")||e.target.matches("#header-search-input")||(document.querySelector("#search-bar-dropdown-show").classList.toggle("hideDisplay",!0),Oe())};var n=document.querySelector("a[href='#novi-recept']"),t=new Be;null!==n&&n.addEventListener("click",(function(){var e,n,r,i,o,u,c,a=document.querySelectorAll(".middle > div");null!==a&&a.forEach((function(e){document.querySelector(".middle").removeChild(e)})),function(e){var n=document.createElement("div");n.classList.add("divReceptParent");var t=document.createElement("div");t.classList.add("divNazivRecepta");var r=document.createElement("label");r.innerHTML="Naziv:",t.appendChild(r);var i=document.createElement("input");i.type="name",i.id="noviReceptName",t.appendChild(i),n.appendChild(t);var o=document.createElement("div");o.classList.add("divVrstaJela");var u=document.createElement("label");u.innerHTML="Vrsta jela:",o.appendChild(u);var c=document.createElement("select");c.classList.add("divVrstaJelaSelect");var a=document.createElement("option");a.innerHTML="",a.value="0",c.appendChild(a),Ne().subscribe((function(e){e.forEach((function(e){var n=document.createElement("option");n.innerHTML=e.name,n.value=e.id.toString(),c.appendChild(n)}))})),o.appendChild(c),n.appendChild(o);var l=document.createElement("div");l.classList.add("divSastojci");var s=document.createElement("label");s.innerHTML="Sastojci:",l.appendChild(s);var d=document.createElement("input");d.type="text",d.id="noviReceptSastojci",l.appendChild(d),n.appendChild(l);var p=document.createElement("div");p.classList.add("divPriprema");var f=document.createElement("label");f.innerHTML="Priprema:",p.appendChild(f);var v=document.createElement("textarea");v.id="noviReceptPriprema",v.cols=30,v.rows=15,p.appendChild(v),n.appendChild(p);var h=document.createElement("div");h.classList.add("divSlika");var m=document.createElement("label");m.innerHTML="Dodaj sliku",h.appendChild(m);var y=document.createElement("input");y.id="slikaRecept",y.type="file",h.appendChild(y);var b=document.createElement("img");b.alt="Image preview",b.width=150,b.height=150,h.appendChild(b),n.appendChild(h);var g=document.createElement("div");g.classList.add("divButtonDodajRecept");var E=document.createElement("button");E.innerHTML="Dodaj",E.classList.add("buttonDodajRecept"),E.disabled=!0,g.appendChild(E),n.appendChild(g),e.appendChild(n)}(document.querySelector(".middle")),e=t,n=new Ie,r=function(e){return pe(document.querySelector("#noviReceptName"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e))}(e),i=function(e){return pe(document.querySelector("select"),"change").pipe(oe((function(e){return e.target.value})),qe((function(e){return parseInt(e)>0})),Ke(e))}(e),o=function(e){return pe(document.querySelector("#noviReceptSastojci"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e))}(e),u=function(e){return pe(document.querySelector("#noviReceptPriprema"),"input").pipe(xe(200),oe((function(e){return e.target.value})),Ke(e))}(e),c=function(e){return pe(document.querySelector("#slikaRecept"),"input").pipe(oe((function(e){return e.target.files[0]})),he((function(n){return tn(n,e)})),Ke(e))}(e),Ze([r,i,o,u,c]).pipe(Ke(e)).subscribe((function(e){""!==e[0]&&"0"!==e[1]&&""!==e[2]&&""!==e[3]&&""!==e[4]?(n.naziv=e[0],n.vrsta_jela=parseInt(e[1]),n.sastojci=e[2],n.priprema=e[3],n.slika=e[4],n.autor=parseInt(sessionStorage.getItem("current-user-id")),document.querySelector(".buttonDodajRecept").disabled=!1):alert("Morate uneti sve podatke...")})),pe(document.querySelector(".buttonDodajRecept"),"click").pipe(he((function(){return function(e){return $(fetch(re,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((function(e){return!!e.ok})).catch((function(e){return console.log(e)})))}(n)}))).subscribe((function(e){if(!0===e){alert("Dodali ste novi recept.");var n=document.querySelectorAll("input"),t=document.querySelector("textarea");document.querySelector("img").src="",n.forEach((function(e){return e.value=""})),t.value=""}else alert("Doslo je do greske,pokusajte ponovo.")}))}))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,